package main

import (
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
	"testing"

	"github.com/stretchr/testify/suite"

	"github.com/coinbase/chainstorage/internal/utils/testutil"
)

type configTemplateTestSuite struct {
	suite.Suite
	tempDir string
}

func TestConfigTemplateSuite(t *testing.T) {
	suite.Run(t, new(configTemplateTestSuite))
}

func (s *configTemplateTestSuite) SetupTest() {
	require := testutil.Require(s.T())
	tempDir, err := ioutil.TempDir("", "chainstorage_config_template_test")
	require.Nil(err)
	s.tempDir = tempDir
}

func (s *configTemplateTestSuite) TearDownTest() {
	require := testutil.Require(s.T())
	err := os.RemoveAll(s.tempDir)
	require.Nil(err)
}

func (s *configTemplateTestSuite) TestNewConfigTemplateFromString() {
	require := testutil.Require(s.T())

	var tests = []struct {
		vars       *ConfigVars
		expected   string
		successful bool
	}{
		{&ConfigVars{"ethereum", "mainnet", "development", "development"}, "8000-ethereum-mainnet-development-ETHEREUM-MAINNET-dev", true},
		{&ConfigVars{"ethereum", "mainnet", "production", "production"}, "8000-ethereum-mainnet-production-ETHEREUM-MAINNET-prod", true},
		{&ConfigVars{"ethereum", "mainnet", "base", "base"}, "", false},
	}

	config := `
foo:
  bar:
    - baz: "8000-{{blockchain}}-{{network}}-{{env}}-{{BLOCKCHAIN}}-{{NETWORK}}-{{short_env}}"
`
	expected := `
foo:
  bar:
    - baz: "%s"
`
	for _, test := range tests {
		template, err := NewConfigTemplateFromString(config)
		require.Nil(err)
		actualBuffer, err := template.executeTemplate(test.vars)
		if test.successful {
			require.Nil(err)
			require.Equal([]byte(fmt.Sprintf(expected, test.expected)), actualBuffer.Bytes())
		} else {
			require.NotNil(err)
		}
	}
}

func (s *configTemplateTestSuite) TestNewConfigTemplateFromFile() {
	require := testutil.Require(s.T())
	config := []byte(`
foo:
  bar:
    - baz: "8000-{{blockchain}}-{{env}}"
`)
	expected := []byte(`
foo:
  bar:
    - baz: "8000-foo-bar"
`)

	filename := filepath.Join(s.tempDir, "config.template.yml")
	err := ioutil.WriteFile(filename, config, 0644)
	require.Nil(err)
	actual, err := NewConfigTemplateFromFile(filename)
	require.Nil(err)
	actualBuffer, err := actual.executeTemplate(&ConfigVars{"foo", "", "bar", "bar"})
	require.Nil(err)
	require.Equal(expected, actualBuffer.Bytes())
}

func (s *configTemplateTestSuite) TestWriteToFile() {
	require := testutil.Require(s.T())
	config := `
a: b
foo:
  wow: 42
  bar:
  - baz: "8000-{{blockchain}}"
`
	parentConfig := `
foo:
  wow: 56
  bar:
  - baz: "{{env}}-9000"
  - real: "world-{{blockchain}}-{{network}}"
c:
  d: 1600
`
	expected := []byte(`# This file is generated by "make config". DO NOT EDIT.
a: b
c:
  d: 1600
foo:
  bar:
  - baz: 8000-foo
  wow: 42
`)
	template, err := NewConfigTemplateFromString(config)
	require.Nil(err)
	parentTemplate, err := NewConfigTemplateFromString(parentConfig)
	require.Nil(err)

	template.Inherit(parentTemplate)

	ymlFile := filepath.Join(s.tempDir, "test.yml")

	err = template.WriteToFile(&ConfigVars{"foo", "baz", "bar", "development"}, ymlFile)
	require.Nil(err)
	actual, err := ioutil.ReadFile(ymlFile)
	require.Nil(err)
	require.Equal(expected, actual)
}
