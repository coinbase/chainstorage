// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        v5.28.1
// source: coinbase/chainstorage/blockchain_ethereum_beacon.proto

package chainstorage

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EthereumBeaconVersion int32

const (
	EthereumBeaconVersion_UNKNOWN   EthereumBeaconVersion = 0
	EthereumBeaconVersion_PHASE0    EthereumBeaconVersion = 1
	EthereumBeaconVersion_ALTAIR    EthereumBeaconVersion = 2
	EthereumBeaconVersion_BELLATRIX EthereumBeaconVersion = 3
	EthereumBeaconVersion_CAPELLA   EthereumBeaconVersion = 4
	EthereumBeaconVersion_DENEB     EthereumBeaconVersion = 5
)

// Enum value maps for EthereumBeaconVersion.
var (
	EthereumBeaconVersion_name = map[int32]string{
		0: "UNKNOWN",
		1: "PHASE0",
		2: "ALTAIR",
		3: "BELLATRIX",
		4: "CAPELLA",
		5: "DENEB",
	}
	EthereumBeaconVersion_value = map[string]int32{
		"UNKNOWN":   0,
		"PHASE0":    1,
		"ALTAIR":    2,
		"BELLATRIX": 3,
		"CAPELLA":   4,
		"DENEB":     5,
	}
)

func (x EthereumBeaconVersion) Enum() *EthereumBeaconVersion {
	p := new(EthereumBeaconVersion)
	*p = x
	return p
}

func (x EthereumBeaconVersion) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EthereumBeaconVersion) Descriptor() protoreflect.EnumDescriptor {
	return file_coinbase_chainstorage_blockchain_ethereum_beacon_proto_enumTypes[0].Descriptor()
}

func (EthereumBeaconVersion) Type() protoreflect.EnumType {
	return &file_coinbase_chainstorage_blockchain_ethereum_beacon_proto_enumTypes[0]
}

func (x EthereumBeaconVersion) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EthereumBeaconVersion.Descriptor instead.
func (EthereumBeaconVersion) EnumDescriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_ethereum_beacon_proto_rawDescGZIP(), []int{0}
}

type EthereumBeaconBlobdata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header []byte `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Block  []byte `protobuf:"bytes,2,opt,name=block,proto3" json:"block,omitempty"`
	Blobs  []byte `protobuf:"bytes,4,opt,name=blobs,proto3" json:"blobs,omitempty"`
}

func (x *EthereumBeaconBlobdata) Reset() {
	*x = EthereumBeaconBlobdata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_ethereum_beacon_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EthereumBeaconBlobdata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EthereumBeaconBlobdata) ProtoMessage() {}

func (x *EthereumBeaconBlobdata) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_ethereum_beacon_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EthereumBeaconBlobdata.ProtoReflect.Descriptor instead.
func (*EthereumBeaconBlobdata) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_ethereum_beacon_proto_rawDescGZIP(), []int{0}
}

func (x *EthereumBeaconBlobdata) GetHeader() []byte {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *EthereumBeaconBlobdata) GetBlock() []byte {
	if x != nil {
		return x.Block
	}
	return nil
}

func (x *EthereumBeaconBlobdata) GetBlobs() []byte {
	if x != nil {
		return x.Blobs
	}
	return nil
}

type EthereumBeaconBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *EthereumBeaconBlockHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Block  *EthereumBeaconBlockData   `protobuf:"bytes,2,opt,name=block,proto3" json:"block,omitempty"`
	Blobs  []*EthereumBeaconBlob      `protobuf:"bytes,3,rep,name=blobs,proto3" json:"blobs,omitempty"`
}

func (x *EthereumBeaconBlock) Reset() {
	*x = EthereumBeaconBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_ethereum_beacon_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EthereumBeaconBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EthereumBeaconBlock) ProtoMessage() {}

func (x *EthereumBeaconBlock) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_ethereum_beacon_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EthereumBeaconBlock.ProtoReflect.Descriptor instead.
func (*EthereumBeaconBlock) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_ethereum_beacon_proto_rawDescGZIP(), []int{1}
}

func (x *EthereumBeaconBlock) GetHeader() *EthereumBeaconBlockHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *EthereumBeaconBlock) GetBlock() *EthereumBeaconBlockData {
	if x != nil {
		return x.Block
	}
	return nil
}

func (x *EthereumBeaconBlock) GetBlobs() []*EthereumBeaconBlob {
	if x != nil {
		return x.Blobs
	}
	return nil
}

type EthereumBeaconBlockHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Slot          uint64 `protobuf:"varint,1,opt,name=slot,proto3" json:"slot,omitempty"`
	ProposerIndex uint64 `protobuf:"varint,2,opt,name=proposer_index,json=proposerIndex,proto3" json:"proposer_index,omitempty"`
	ParentRoot    string `protobuf:"bytes,3,opt,name=parent_root,json=parentRoot,proto3" json:"parent_root,omitempty"`
	StateRoot     string `protobuf:"bytes,4,opt,name=state_root,json=stateRoot,proto3" json:"state_root,omitempty"`
	BodyRoot      string `protobuf:"bytes,5,opt,name=body_root,json=bodyRoot,proto3" json:"body_root,omitempty"`
	Signature     string `protobuf:"bytes,6,opt,name=signature,proto3" json:"signature,omitempty"`
	Root          string `protobuf:"bytes,7,opt,name=root,proto3" json:"root,omitempty"`
	Epoch         uint64 `protobuf:"varint,8,opt,name=epoch,proto3" json:"epoch,omitempty"`
}

func (x *EthereumBeaconBlockHeader) Reset() {
	*x = EthereumBeaconBlockHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_ethereum_beacon_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EthereumBeaconBlockHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EthereumBeaconBlockHeader) ProtoMessage() {}

func (x *EthereumBeaconBlockHeader) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_ethereum_beacon_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EthereumBeaconBlockHeader.ProtoReflect.Descriptor instead.
func (*EthereumBeaconBlockHeader) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_ethereum_beacon_proto_rawDescGZIP(), []int{2}
}

func (x *EthereumBeaconBlockHeader) GetSlot() uint64 {
	if x != nil {
		return x.Slot
	}
	return 0
}

func (x *EthereumBeaconBlockHeader) GetProposerIndex() uint64 {
	if x != nil {
		return x.ProposerIndex
	}
	return 0
}

func (x *EthereumBeaconBlockHeader) GetParentRoot() string {
	if x != nil {
		return x.ParentRoot
	}
	return ""
}

func (x *EthereumBeaconBlockHeader) GetStateRoot() string {
	if x != nil {
		return x.StateRoot
	}
	return ""
}

func (x *EthereumBeaconBlockHeader) GetBodyRoot() string {
	if x != nil {
		return x.BodyRoot
	}
	return ""
}

func (x *EthereumBeaconBlockHeader) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

func (x *EthereumBeaconBlockHeader) GetRoot() string {
	if x != nil {
		return x.Root
	}
	return ""
}

func (x *EthereumBeaconBlockHeader) GetEpoch() uint64 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

type EthereumBeaconBlockData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version       EthereumBeaconVersion `protobuf:"varint,1,opt,name=version,proto3,enum=coinbase.chainstorage.EthereumBeaconVersion" json:"version,omitempty"`
	Slot          uint64                `protobuf:"varint,2,opt,name=slot,proto3" json:"slot,omitempty"`
	ProposerIndex uint64                `protobuf:"varint,3,opt,name=proposer_index,json=proposerIndex,proto3" json:"proposer_index,omitempty"`
	ParentRoot    string                `protobuf:"bytes,4,opt,name=parent_root,json=parentRoot,proto3" json:"parent_root,omitempty"`
	StateRoot     string                `protobuf:"bytes,5,opt,name=state_root,json=stateRoot,proto3" json:"state_root,omitempty"`
	Signature     string                `protobuf:"bytes,6,opt,name=signature,proto3" json:"signature,omitempty"`
	// Types that are assignable to BlockData:
	//
	//	*EthereumBeaconBlockData_Phase0Block
	//	*EthereumBeaconBlockData_AltairBlock
	//	*EthereumBeaconBlockData_BellatrixBlock
	//	*EthereumBeaconBlockData_CapellaBlock
	//	*EthereumBeaconBlockData_DenebBlock
	BlockData isEthereumBeaconBlockData_BlockData `protobuf_oneof:"block_data"`
}

func (x *EthereumBeaconBlockData) Reset() {
	*x = EthereumBeaconBlockData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_ethereum_beacon_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EthereumBeaconBlockData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EthereumBeaconBlockData) ProtoMessage() {}

func (x *EthereumBeaconBlockData) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_ethereum_beacon_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EthereumBeaconBlockData.ProtoReflect.Descriptor instead.
func (*EthereumBeaconBlockData) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_ethereum_beacon_proto_rawDescGZIP(), []int{3}
}

func (x *EthereumBeaconBlockData) GetVersion() EthereumBeaconVersion {
	if x != nil {
		return x.Version
	}
	return EthereumBeaconVersion_UNKNOWN
}

func (x *EthereumBeaconBlockData) GetSlot() uint64 {
	if x != nil {
		return x.Slot
	}
	return 0
}

func (x *EthereumBeaconBlockData) GetProposerIndex() uint64 {
	if x != nil {
		return x.ProposerIndex
	}
	return 0
}

func (x *EthereumBeaconBlockData) GetParentRoot() string {
	if x != nil {
		return x.ParentRoot
	}
	return ""
}

func (x *EthereumBeaconBlockData) GetStateRoot() string {
	if x != nil {
		return x.StateRoot
	}
	return ""
}

func (x *EthereumBeaconBlockData) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

func (m *EthereumBeaconBlockData) GetBlockData() isEthereumBeaconBlockData_BlockData {
	if m != nil {
		return m.BlockData
	}
	return nil
}

func (x *EthereumBeaconBlockData) GetPhase0Block() *EthereumBeaconBlockPhase0 {
	if x, ok := x.GetBlockData().(*EthereumBeaconBlockData_Phase0Block); ok {
		return x.Phase0Block
	}
	return nil
}

func (x *EthereumBeaconBlockData) GetAltairBlock() *EthereumBeaconBlockAltair {
	if x, ok := x.GetBlockData().(*EthereumBeaconBlockData_AltairBlock); ok {
		return x.AltairBlock
	}
	return nil
}

func (x *EthereumBeaconBlockData) GetBellatrixBlock() *EthereumBeaconBlockBellatrix {
	if x, ok := x.GetBlockData().(*EthereumBeaconBlockData_BellatrixBlock); ok {
		return x.BellatrixBlock
	}
	return nil
}

func (x *EthereumBeaconBlockData) GetCapellaBlock() *EthereumBeaconBlockCapella {
	if x, ok := x.GetBlockData().(*EthereumBeaconBlockData_CapellaBlock); ok {
		return x.CapellaBlock
	}
	return nil
}

func (x *EthereumBeaconBlockData) GetDenebBlock() *EthereumBeaconBlockDeneb {
	if x, ok := x.GetBlockData().(*EthereumBeaconBlockData_DenebBlock); ok {
		return x.DenebBlock
	}
	return nil
}

type isEthereumBeaconBlockData_BlockData interface {
	isEthereumBeaconBlockData_BlockData()
}

type EthereumBeaconBlockData_Phase0Block struct {
	Phase0Block *EthereumBeaconBlockPhase0 `protobuf:"bytes,100,opt,name=phase0_block,json=phase0Block,proto3,oneof"`
}

type EthereumBeaconBlockData_AltairBlock struct {
	AltairBlock *EthereumBeaconBlockAltair `protobuf:"bytes,101,opt,name=altair_block,json=altairBlock,proto3,oneof"`
}

type EthereumBeaconBlockData_BellatrixBlock struct {
	BellatrixBlock *EthereumBeaconBlockBellatrix `protobuf:"bytes,102,opt,name=bellatrix_block,json=bellatrixBlock,proto3,oneof"`
}

type EthereumBeaconBlockData_CapellaBlock struct {
	CapellaBlock *EthereumBeaconBlockCapella `protobuf:"bytes,103,opt,name=capella_block,json=capellaBlock,proto3,oneof"`
}

type EthereumBeaconBlockData_DenebBlock struct {
	DenebBlock *EthereumBeaconBlockDeneb `protobuf:"bytes,104,opt,name=deneb_block,json=denebBlock,proto3,oneof"`
}

func (*EthereumBeaconBlockData_Phase0Block) isEthereumBeaconBlockData_BlockData() {}

func (*EthereumBeaconBlockData_AltairBlock) isEthereumBeaconBlockData_BlockData() {}

func (*EthereumBeaconBlockData_BellatrixBlock) isEthereumBeaconBlockData_BlockData() {}

func (*EthereumBeaconBlockData_CapellaBlock) isEthereumBeaconBlockData_BlockData() {}

func (*EthereumBeaconBlockData_DenebBlock) isEthereumBeaconBlockData_BlockData() {}

type EthereumBeaconBlockPhase0 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RandaoReveal string                  `protobuf:"bytes,1,opt,name=randao_reveal,json=randaoReveal,proto3" json:"randao_reveal,omitempty"`
	Eth1Data     *EthereumBeaconEth1Data `protobuf:"bytes,2,opt,name=eth1_data,json=eth1Data,proto3" json:"eth1_data,omitempty"`
}

func (x *EthereumBeaconBlockPhase0) Reset() {
	*x = EthereumBeaconBlockPhase0{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_ethereum_beacon_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EthereumBeaconBlockPhase0) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EthereumBeaconBlockPhase0) ProtoMessage() {}

func (x *EthereumBeaconBlockPhase0) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_ethereum_beacon_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EthereumBeaconBlockPhase0.ProtoReflect.Descriptor instead.
func (*EthereumBeaconBlockPhase0) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_ethereum_beacon_proto_rawDescGZIP(), []int{4}
}

func (x *EthereumBeaconBlockPhase0) GetRandaoReveal() string {
	if x != nil {
		return x.RandaoReveal
	}
	return ""
}

func (x *EthereumBeaconBlockPhase0) GetEth1Data() *EthereumBeaconEth1Data {
	if x != nil {
		return x.Eth1Data
	}
	return nil
}

type EthereumBeaconBlockAltair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RandaoReveal string                  `protobuf:"bytes,1,opt,name=randao_reveal,json=randaoReveal,proto3" json:"randao_reveal,omitempty"`
	Eth1Data     *EthereumBeaconEth1Data `protobuf:"bytes,2,opt,name=eth1_data,json=eth1Data,proto3" json:"eth1_data,omitempty"`
}

func (x *EthereumBeaconBlockAltair) Reset() {
	*x = EthereumBeaconBlockAltair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_ethereum_beacon_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EthereumBeaconBlockAltair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EthereumBeaconBlockAltair) ProtoMessage() {}

func (x *EthereumBeaconBlockAltair) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_ethereum_beacon_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EthereumBeaconBlockAltair.ProtoReflect.Descriptor instead.
func (*EthereumBeaconBlockAltair) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_ethereum_beacon_proto_rawDescGZIP(), []int{5}
}

func (x *EthereumBeaconBlockAltair) GetRandaoReveal() string {
	if x != nil {
		return x.RandaoReveal
	}
	return ""
}

func (x *EthereumBeaconBlockAltair) GetEth1Data() *EthereumBeaconEth1Data {
	if x != nil {
		return x.Eth1Data
	}
	return nil
}

type EthereumBeaconBlockBellatrix struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RandaoReveal     string                                   `protobuf:"bytes,1,opt,name=randao_reveal,json=randaoReveal,proto3" json:"randao_reveal,omitempty"`
	Eth1Data         *EthereumBeaconEth1Data                  `protobuf:"bytes,2,opt,name=eth1_data,json=eth1Data,proto3" json:"eth1_data,omitempty"`
	ExecutionPayload *EthereumBeaconExecutionPayloadBellatrix `protobuf:"bytes,3,opt,name=execution_payload,json=executionPayload,proto3" json:"execution_payload,omitempty"`
}

func (x *EthereumBeaconBlockBellatrix) Reset() {
	*x = EthereumBeaconBlockBellatrix{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_ethereum_beacon_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EthereumBeaconBlockBellatrix) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EthereumBeaconBlockBellatrix) ProtoMessage() {}

func (x *EthereumBeaconBlockBellatrix) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_ethereum_beacon_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EthereumBeaconBlockBellatrix.ProtoReflect.Descriptor instead.
func (*EthereumBeaconBlockBellatrix) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_ethereum_beacon_proto_rawDescGZIP(), []int{6}
}

func (x *EthereumBeaconBlockBellatrix) GetRandaoReveal() string {
	if x != nil {
		return x.RandaoReveal
	}
	return ""
}

func (x *EthereumBeaconBlockBellatrix) GetEth1Data() *EthereumBeaconEth1Data {
	if x != nil {
		return x.Eth1Data
	}
	return nil
}

func (x *EthereumBeaconBlockBellatrix) GetExecutionPayload() *EthereumBeaconExecutionPayloadBellatrix {
	if x != nil {
		return x.ExecutionPayload
	}
	return nil
}

type EthereumBeaconBlockCapella struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RandaoReveal     string                                 `protobuf:"bytes,1,opt,name=randao_reveal,json=randaoReveal,proto3" json:"randao_reveal,omitempty"`
	Eth1Data         *EthereumBeaconEth1Data                `protobuf:"bytes,2,opt,name=eth1_data,json=eth1Data,proto3" json:"eth1_data,omitempty"`
	ExecutionPayload *EthereumBeaconExecutionPayloadCapella `protobuf:"bytes,3,opt,name=execution_payload,json=executionPayload,proto3" json:"execution_payload,omitempty"`
}

func (x *EthereumBeaconBlockCapella) Reset() {
	*x = EthereumBeaconBlockCapella{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_ethereum_beacon_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EthereumBeaconBlockCapella) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EthereumBeaconBlockCapella) ProtoMessage() {}

func (x *EthereumBeaconBlockCapella) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_ethereum_beacon_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EthereumBeaconBlockCapella.ProtoReflect.Descriptor instead.
func (*EthereumBeaconBlockCapella) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_ethereum_beacon_proto_rawDescGZIP(), []int{7}
}

func (x *EthereumBeaconBlockCapella) GetRandaoReveal() string {
	if x != nil {
		return x.RandaoReveal
	}
	return ""
}

func (x *EthereumBeaconBlockCapella) GetEth1Data() *EthereumBeaconEth1Data {
	if x != nil {
		return x.Eth1Data
	}
	return nil
}

func (x *EthereumBeaconBlockCapella) GetExecutionPayload() *EthereumBeaconExecutionPayloadCapella {
	if x != nil {
		return x.ExecutionPayload
	}
	return nil
}

type EthereumBeaconBlockDeneb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RandaoReveal       string                               `protobuf:"bytes,1,opt,name=randao_reveal,json=randaoReveal,proto3" json:"randao_reveal,omitempty"`
	Eth1Data           *EthereumBeaconEth1Data              `protobuf:"bytes,2,opt,name=eth1_data,json=eth1Data,proto3" json:"eth1_data,omitempty"`
	ExecutionPayload   *EthereumBeaconExecutionPayloadDeneb `protobuf:"bytes,3,opt,name=execution_payload,json=executionPayload,proto3" json:"execution_payload,omitempty"`
	BlobKzgCommitments []string                             `protobuf:"bytes,4,rep,name=blob_kzg_commitments,json=blobKzgCommitments,proto3" json:"blob_kzg_commitments,omitempty"`
}

func (x *EthereumBeaconBlockDeneb) Reset() {
	*x = EthereumBeaconBlockDeneb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_ethereum_beacon_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EthereumBeaconBlockDeneb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EthereumBeaconBlockDeneb) ProtoMessage() {}

func (x *EthereumBeaconBlockDeneb) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_ethereum_beacon_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EthereumBeaconBlockDeneb.ProtoReflect.Descriptor instead.
func (*EthereumBeaconBlockDeneb) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_ethereum_beacon_proto_rawDescGZIP(), []int{8}
}

func (x *EthereumBeaconBlockDeneb) GetRandaoReveal() string {
	if x != nil {
		return x.RandaoReveal
	}
	return ""
}

func (x *EthereumBeaconBlockDeneb) GetEth1Data() *EthereumBeaconEth1Data {
	if x != nil {
		return x.Eth1Data
	}
	return nil
}

func (x *EthereumBeaconBlockDeneb) GetExecutionPayload() *EthereumBeaconExecutionPayloadDeneb {
	if x != nil {
		return x.ExecutionPayload
	}
	return nil
}

func (x *EthereumBeaconBlockDeneb) GetBlobKzgCommitments() []string {
	if x != nil {
		return x.BlobKzgCommitments
	}
	return nil
}

type EthereumBeaconEth1Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DepositRoot  string `protobuf:"bytes,1,opt,name=deposit_root,json=depositRoot,proto3" json:"deposit_root,omitempty"`
	DepositCount uint64 `protobuf:"varint,2,opt,name=deposit_count,json=depositCount,proto3" json:"deposit_count,omitempty"`
	BlockHash    string `protobuf:"bytes,3,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
}

func (x *EthereumBeaconEth1Data) Reset() {
	*x = EthereumBeaconEth1Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_ethereum_beacon_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EthereumBeaconEth1Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EthereumBeaconEth1Data) ProtoMessage() {}

func (x *EthereumBeaconEth1Data) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_ethereum_beacon_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EthereumBeaconEth1Data.ProtoReflect.Descriptor instead.
func (*EthereumBeaconEth1Data) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_ethereum_beacon_proto_rawDescGZIP(), []int{9}
}

func (x *EthereumBeaconEth1Data) GetDepositRoot() string {
	if x != nil {
		return x.DepositRoot
	}
	return ""
}

func (x *EthereumBeaconEth1Data) GetDepositCount() uint64 {
	if x != nil {
		return x.DepositCount
	}
	return 0
}

func (x *EthereumBeaconEth1Data) GetBlockHash() string {
	if x != nil {
		return x.BlockHash
	}
	return ""
}

type EthereumBeaconExecutionPayloadBellatrix struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParentHash    string                 `protobuf:"bytes,1,opt,name=parent_hash,json=parentHash,proto3" json:"parent_hash,omitempty"`
	FeeRecipient  string                 `protobuf:"bytes,2,opt,name=fee_recipient,json=feeRecipient,proto3" json:"fee_recipient,omitempty"`
	StateRoot     string                 `protobuf:"bytes,3,opt,name=state_root,json=stateRoot,proto3" json:"state_root,omitempty"`
	ReceiptsRoot  string                 `protobuf:"bytes,4,opt,name=receipts_root,json=receiptsRoot,proto3" json:"receipts_root,omitempty"`
	LogsBloom     string                 `protobuf:"bytes,5,opt,name=logs_bloom,json=logsBloom,proto3" json:"logs_bloom,omitempty"`
	PrevRandao    string                 `protobuf:"bytes,6,opt,name=prev_randao,json=prevRandao,proto3" json:"prev_randao,omitempty"`
	BlockNumber   uint64                 `protobuf:"varint,7,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	GasLimit      uint64                 `protobuf:"varint,8,opt,name=gas_limit,json=gasLimit,proto3" json:"gas_limit,omitempty"`
	GasUsed       uint64                 `protobuf:"varint,9,opt,name=gas_used,json=gasUsed,proto3" json:"gas_used,omitempty"`
	Timestamp     *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	ExtraData     string                 `protobuf:"bytes,11,opt,name=extra_data,json=extraData,proto3" json:"extra_data,omitempty"`
	BaseFeePerGas string                 `protobuf:"bytes,12,opt,name=base_fee_per_gas,json=baseFeePerGas,proto3" json:"base_fee_per_gas,omitempty"`
	BlockHash     string                 `protobuf:"bytes,13,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	// Transactions is a list of bytes representing hex-encoded execution layer transactions.
	// To decode transaction data, transactionDecoded = geth.UnmarshalBinary(hex.DecodeString(string(transaction)))
	Transactions [][]byte `protobuf:"bytes,14,rep,name=transactions,proto3" json:"transactions,omitempty"`
}

func (x *EthereumBeaconExecutionPayloadBellatrix) Reset() {
	*x = EthereumBeaconExecutionPayloadBellatrix{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_ethereum_beacon_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EthereumBeaconExecutionPayloadBellatrix) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EthereumBeaconExecutionPayloadBellatrix) ProtoMessage() {}

func (x *EthereumBeaconExecutionPayloadBellatrix) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_ethereum_beacon_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EthereumBeaconExecutionPayloadBellatrix.ProtoReflect.Descriptor instead.
func (*EthereumBeaconExecutionPayloadBellatrix) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_ethereum_beacon_proto_rawDescGZIP(), []int{10}
}

func (x *EthereumBeaconExecutionPayloadBellatrix) GetParentHash() string {
	if x != nil {
		return x.ParentHash
	}
	return ""
}

func (x *EthereumBeaconExecutionPayloadBellatrix) GetFeeRecipient() string {
	if x != nil {
		return x.FeeRecipient
	}
	return ""
}

func (x *EthereumBeaconExecutionPayloadBellatrix) GetStateRoot() string {
	if x != nil {
		return x.StateRoot
	}
	return ""
}

func (x *EthereumBeaconExecutionPayloadBellatrix) GetReceiptsRoot() string {
	if x != nil {
		return x.ReceiptsRoot
	}
	return ""
}

func (x *EthereumBeaconExecutionPayloadBellatrix) GetLogsBloom() string {
	if x != nil {
		return x.LogsBloom
	}
	return ""
}

func (x *EthereumBeaconExecutionPayloadBellatrix) GetPrevRandao() string {
	if x != nil {
		return x.PrevRandao
	}
	return ""
}

func (x *EthereumBeaconExecutionPayloadBellatrix) GetBlockNumber() uint64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (x *EthereumBeaconExecutionPayloadBellatrix) GetGasLimit() uint64 {
	if x != nil {
		return x.GasLimit
	}
	return 0
}

func (x *EthereumBeaconExecutionPayloadBellatrix) GetGasUsed() uint64 {
	if x != nil {
		return x.GasUsed
	}
	return 0
}

func (x *EthereumBeaconExecutionPayloadBellatrix) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *EthereumBeaconExecutionPayloadBellatrix) GetExtraData() string {
	if x != nil {
		return x.ExtraData
	}
	return ""
}

func (x *EthereumBeaconExecutionPayloadBellatrix) GetBaseFeePerGas() string {
	if x != nil {
		return x.BaseFeePerGas
	}
	return ""
}

func (x *EthereumBeaconExecutionPayloadBellatrix) GetBlockHash() string {
	if x != nil {
		return x.BlockHash
	}
	return ""
}

func (x *EthereumBeaconExecutionPayloadBellatrix) GetTransactions() [][]byte {
	if x != nil {
		return x.Transactions
	}
	return nil
}

type EthereumBeaconExecutionPayloadCapella struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParentHash    string                 `protobuf:"bytes,1,opt,name=parent_hash,json=parentHash,proto3" json:"parent_hash,omitempty"`
	FeeRecipient  string                 `protobuf:"bytes,2,opt,name=fee_recipient,json=feeRecipient,proto3" json:"fee_recipient,omitempty"`
	StateRoot     string                 `protobuf:"bytes,3,opt,name=state_root,json=stateRoot,proto3" json:"state_root,omitempty"`
	ReceiptsRoot  string                 `protobuf:"bytes,4,opt,name=receipts_root,json=receiptsRoot,proto3" json:"receipts_root,omitempty"`
	LogsBloom     string                 `protobuf:"bytes,5,opt,name=logs_bloom,json=logsBloom,proto3" json:"logs_bloom,omitempty"`
	PrevRandao    string                 `protobuf:"bytes,6,opt,name=prev_randao,json=prevRandao,proto3" json:"prev_randao,omitempty"`
	BlockNumber   uint64                 `protobuf:"varint,7,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	GasLimit      uint64                 `protobuf:"varint,8,opt,name=gas_limit,json=gasLimit,proto3" json:"gas_limit,omitempty"`
	GasUsed       uint64                 `protobuf:"varint,9,opt,name=gas_used,json=gasUsed,proto3" json:"gas_used,omitempty"`
	Timestamp     *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	ExtraData     string                 `protobuf:"bytes,11,opt,name=extra_data,json=extraData,proto3" json:"extra_data,omitempty"`
	BaseFeePerGas string                 `protobuf:"bytes,12,opt,name=base_fee_per_gas,json=baseFeePerGas,proto3" json:"base_fee_per_gas,omitempty"`
	BlockHash     string                 `protobuf:"bytes,13,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	// Transactions is a list of bytes representing hex-encoded execution layer transactions.
	// To decode transaction data, transactionDecoded = geth.UnmarshalBinary(hex.DecodeString(string(transaction)))
	Transactions [][]byte              `protobuf:"bytes,14,rep,name=transactions,proto3" json:"transactions,omitempty"`
	Withdrawals  []*EthereumWithdrawal `protobuf:"bytes,15,rep,name=withdrawals,proto3" json:"withdrawals,omitempty"`
}

func (x *EthereumBeaconExecutionPayloadCapella) Reset() {
	*x = EthereumBeaconExecutionPayloadCapella{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_ethereum_beacon_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EthereumBeaconExecutionPayloadCapella) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EthereumBeaconExecutionPayloadCapella) ProtoMessage() {}

func (x *EthereumBeaconExecutionPayloadCapella) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_ethereum_beacon_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EthereumBeaconExecutionPayloadCapella.ProtoReflect.Descriptor instead.
func (*EthereumBeaconExecutionPayloadCapella) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_ethereum_beacon_proto_rawDescGZIP(), []int{11}
}

func (x *EthereumBeaconExecutionPayloadCapella) GetParentHash() string {
	if x != nil {
		return x.ParentHash
	}
	return ""
}

func (x *EthereumBeaconExecutionPayloadCapella) GetFeeRecipient() string {
	if x != nil {
		return x.FeeRecipient
	}
	return ""
}

func (x *EthereumBeaconExecutionPayloadCapella) GetStateRoot() string {
	if x != nil {
		return x.StateRoot
	}
	return ""
}

func (x *EthereumBeaconExecutionPayloadCapella) GetReceiptsRoot() string {
	if x != nil {
		return x.ReceiptsRoot
	}
	return ""
}

func (x *EthereumBeaconExecutionPayloadCapella) GetLogsBloom() string {
	if x != nil {
		return x.LogsBloom
	}
	return ""
}

func (x *EthereumBeaconExecutionPayloadCapella) GetPrevRandao() string {
	if x != nil {
		return x.PrevRandao
	}
	return ""
}

func (x *EthereumBeaconExecutionPayloadCapella) GetBlockNumber() uint64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (x *EthereumBeaconExecutionPayloadCapella) GetGasLimit() uint64 {
	if x != nil {
		return x.GasLimit
	}
	return 0
}

func (x *EthereumBeaconExecutionPayloadCapella) GetGasUsed() uint64 {
	if x != nil {
		return x.GasUsed
	}
	return 0
}

func (x *EthereumBeaconExecutionPayloadCapella) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *EthereumBeaconExecutionPayloadCapella) GetExtraData() string {
	if x != nil {
		return x.ExtraData
	}
	return ""
}

func (x *EthereumBeaconExecutionPayloadCapella) GetBaseFeePerGas() string {
	if x != nil {
		return x.BaseFeePerGas
	}
	return ""
}

func (x *EthereumBeaconExecutionPayloadCapella) GetBlockHash() string {
	if x != nil {
		return x.BlockHash
	}
	return ""
}

func (x *EthereumBeaconExecutionPayloadCapella) GetTransactions() [][]byte {
	if x != nil {
		return x.Transactions
	}
	return nil
}

func (x *EthereumBeaconExecutionPayloadCapella) GetWithdrawals() []*EthereumWithdrawal {
	if x != nil {
		return x.Withdrawals
	}
	return nil
}

type EthereumBeaconExecutionPayloadDeneb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParentHash    string                 `protobuf:"bytes,1,opt,name=parent_hash,json=parentHash,proto3" json:"parent_hash,omitempty"`
	FeeRecipient  string                 `protobuf:"bytes,2,opt,name=fee_recipient,json=feeRecipient,proto3" json:"fee_recipient,omitempty"`
	StateRoot     string                 `protobuf:"bytes,3,opt,name=state_root,json=stateRoot,proto3" json:"state_root,omitempty"`
	ReceiptsRoot  string                 `protobuf:"bytes,4,opt,name=receipts_root,json=receiptsRoot,proto3" json:"receipts_root,omitempty"`
	LogsBloom     string                 `protobuf:"bytes,5,opt,name=logs_bloom,json=logsBloom,proto3" json:"logs_bloom,omitempty"`
	PrevRandao    string                 `protobuf:"bytes,6,opt,name=prev_randao,json=prevRandao,proto3" json:"prev_randao,omitempty"`
	BlockNumber   uint64                 `protobuf:"varint,7,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	GasLimit      uint64                 `protobuf:"varint,8,opt,name=gas_limit,json=gasLimit,proto3" json:"gas_limit,omitempty"`
	GasUsed       uint64                 `protobuf:"varint,9,opt,name=gas_used,json=gasUsed,proto3" json:"gas_used,omitempty"`
	Timestamp     *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	ExtraData     string                 `protobuf:"bytes,11,opt,name=extra_data,json=extraData,proto3" json:"extra_data,omitempty"`
	BaseFeePerGas string                 `protobuf:"bytes,12,opt,name=base_fee_per_gas,json=baseFeePerGas,proto3" json:"base_fee_per_gas,omitempty"`
	BlockHash     string                 `protobuf:"bytes,13,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	// Transactions is a list of bytes representing hex-encoded execution layer transactions.
	// To decode transaction data, transactionDecoded = geth.UnmarshalBinary(hex.DecodeString(string(transaction)))
	Transactions  [][]byte              `protobuf:"bytes,14,rep,name=transactions,proto3" json:"transactions,omitempty"`
	Withdrawals   []*EthereumWithdrawal `protobuf:"bytes,15,rep,name=withdrawals,proto3" json:"withdrawals,omitempty"`
	BlobGasUsed   uint64                `protobuf:"varint,16,opt,name=blob_gas_used,json=blobGasUsed,proto3" json:"blob_gas_used,omitempty"`
	ExcessBlobGas uint64                `protobuf:"varint,17,opt,name=excess_blob_gas,json=excessBlobGas,proto3" json:"excess_blob_gas,omitempty"`
}

func (x *EthereumBeaconExecutionPayloadDeneb) Reset() {
	*x = EthereumBeaconExecutionPayloadDeneb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_ethereum_beacon_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EthereumBeaconExecutionPayloadDeneb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EthereumBeaconExecutionPayloadDeneb) ProtoMessage() {}

func (x *EthereumBeaconExecutionPayloadDeneb) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_ethereum_beacon_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EthereumBeaconExecutionPayloadDeneb.ProtoReflect.Descriptor instead.
func (*EthereumBeaconExecutionPayloadDeneb) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_ethereum_beacon_proto_rawDescGZIP(), []int{12}
}

func (x *EthereumBeaconExecutionPayloadDeneb) GetParentHash() string {
	if x != nil {
		return x.ParentHash
	}
	return ""
}

func (x *EthereumBeaconExecutionPayloadDeneb) GetFeeRecipient() string {
	if x != nil {
		return x.FeeRecipient
	}
	return ""
}

func (x *EthereumBeaconExecutionPayloadDeneb) GetStateRoot() string {
	if x != nil {
		return x.StateRoot
	}
	return ""
}

func (x *EthereumBeaconExecutionPayloadDeneb) GetReceiptsRoot() string {
	if x != nil {
		return x.ReceiptsRoot
	}
	return ""
}

func (x *EthereumBeaconExecutionPayloadDeneb) GetLogsBloom() string {
	if x != nil {
		return x.LogsBloom
	}
	return ""
}

func (x *EthereumBeaconExecutionPayloadDeneb) GetPrevRandao() string {
	if x != nil {
		return x.PrevRandao
	}
	return ""
}

func (x *EthereumBeaconExecutionPayloadDeneb) GetBlockNumber() uint64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (x *EthereumBeaconExecutionPayloadDeneb) GetGasLimit() uint64 {
	if x != nil {
		return x.GasLimit
	}
	return 0
}

func (x *EthereumBeaconExecutionPayloadDeneb) GetGasUsed() uint64 {
	if x != nil {
		return x.GasUsed
	}
	return 0
}

func (x *EthereumBeaconExecutionPayloadDeneb) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *EthereumBeaconExecutionPayloadDeneb) GetExtraData() string {
	if x != nil {
		return x.ExtraData
	}
	return ""
}

func (x *EthereumBeaconExecutionPayloadDeneb) GetBaseFeePerGas() string {
	if x != nil {
		return x.BaseFeePerGas
	}
	return ""
}

func (x *EthereumBeaconExecutionPayloadDeneb) GetBlockHash() string {
	if x != nil {
		return x.BlockHash
	}
	return ""
}

func (x *EthereumBeaconExecutionPayloadDeneb) GetTransactions() [][]byte {
	if x != nil {
		return x.Transactions
	}
	return nil
}

func (x *EthereumBeaconExecutionPayloadDeneb) GetWithdrawals() []*EthereumWithdrawal {
	if x != nil {
		return x.Withdrawals
	}
	return nil
}

func (x *EthereumBeaconExecutionPayloadDeneb) GetBlobGasUsed() uint64 {
	if x != nil {
		return x.BlobGasUsed
	}
	return 0
}

func (x *EthereumBeaconExecutionPayloadDeneb) GetExcessBlobGas() uint64 {
	if x != nil {
		return x.ExcessBlobGas
	}
	return 0
}

type EthereumBeaconBlob struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Slot                        uint64   `protobuf:"varint,1,opt,name=slot,proto3" json:"slot,omitempty"`
	ParentRoot                  string   `protobuf:"bytes,2,opt,name=parent_root,json=parentRoot,proto3" json:"parent_root,omitempty"`
	Index                       uint64   `protobuf:"varint,3,opt,name=index,proto3" json:"index,omitempty"`
	Blob                        []byte   `protobuf:"bytes,4,opt,name=blob,proto3" json:"blob,omitempty"`
	KzgCommitment               string   `protobuf:"bytes,5,opt,name=kzg_commitment,json=kzgCommitment,proto3" json:"kzg_commitment,omitempty"`
	KzgProof                    string   `protobuf:"bytes,6,opt,name=kzg_proof,json=kzgProof,proto3" json:"kzg_proof,omitempty"`
	KzgCommitmentInclusionProof []string `protobuf:"bytes,7,rep,name=kzg_commitment_inclusion_proof,json=kzgCommitmentInclusionProof,proto3" json:"kzg_commitment_inclusion_proof,omitempty"`
}

func (x *EthereumBeaconBlob) Reset() {
	*x = EthereumBeaconBlob{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_ethereum_beacon_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EthereumBeaconBlob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EthereumBeaconBlob) ProtoMessage() {}

func (x *EthereumBeaconBlob) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_ethereum_beacon_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EthereumBeaconBlob.ProtoReflect.Descriptor instead.
func (*EthereumBeaconBlob) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_ethereum_beacon_proto_rawDescGZIP(), []int{13}
}

func (x *EthereumBeaconBlob) GetSlot() uint64 {
	if x != nil {
		return x.Slot
	}
	return 0
}

func (x *EthereumBeaconBlob) GetParentRoot() string {
	if x != nil {
		return x.ParentRoot
	}
	return ""
}

func (x *EthereumBeaconBlob) GetIndex() uint64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *EthereumBeaconBlob) GetBlob() []byte {
	if x != nil {
		return x.Blob
	}
	return nil
}

func (x *EthereumBeaconBlob) GetKzgCommitment() string {
	if x != nil {
		return x.KzgCommitment
	}
	return ""
}

func (x *EthereumBeaconBlob) GetKzgProof() string {
	if x != nil {
		return x.KzgProof
	}
	return ""
}

func (x *EthereumBeaconBlob) GetKzgCommitmentInclusionProof() []string {
	if x != nil {
		return x.KzgCommitmentInclusionProof
	}
	return nil
}

var File_coinbase_chainstorage_blockchain_ethereum_beacon_proto protoreflect.FileDescriptor

var file_coinbase_chainstorage_blockchain_ethereum_beacon_proto_rawDesc = []byte{
	0x0a, 0x36, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x5f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x5f, 0x62, 0x65, 0x61, 0x63,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x15, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x2f, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x5f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x62, 0x0a, 0x16, 0x45, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x42, 0x65, 0x61,
	0x63, 0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x62, 0x64, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x6c, 0x6f,
	0x62, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x62, 0x6c, 0x6f, 0x62, 0x73, 0x4a,
	0x04, 0x08, 0x03, 0x10, 0x04, 0x22, 0xe6, 0x01, 0x0a, 0x13, 0x45, 0x74, 0x68, 0x65, 0x72, 0x65,
	0x75, 0x6d, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x48, 0x0a,
	0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e,
	0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x42, 0x65,
	0x61, 0x63, 0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52,
	0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x44, 0x0a, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x45,
	0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x3f, 0x0a,
	0x05, 0x62, 0x6c, 0x6f, 0x62, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63,
	0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x42, 0x65, 0x61,
	0x63, 0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x62, 0x52, 0x05, 0x62, 0x6c, 0x6f, 0x62, 0x73, 0x22, 0xfb,
	0x01, 0x0a, 0x19, 0x45, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x42, 0x65, 0x61, 0x63, 0x6f,
	0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x6c, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x73, 0x6c, 0x6f, 0x74,
	0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73,
	0x65, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x6f, 0x64, 0x79, 0x5f,
	0x72, 0x6f, 0x6f, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x6f, 0x64, 0x79,
	0x52, 0x6f, 0x6f, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x22, 0xc4, 0x05, 0x0a,
	0x17, 0x45, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x12, 0x46, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x63, 0x6f, 0x69, 0x6e,
	0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04,
	0x73, 0x6c, 0x6f, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x70, 0x72,
	0x6f, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1f, 0x0a, 0x0b, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x55, 0x0a, 0x0c, 0x70, 0x68, 0x61,
	0x73, 0x65, 0x30, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x30, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d,
	0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x50, 0x68, 0x61, 0x73, 0x65,
	0x30, 0x48, 0x00, 0x52, 0x0b, 0x70, 0x68, 0x61, 0x73, 0x65, 0x30, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x12, 0x55, 0x0a, 0x0c, 0x61, 0x6c, 0x74, 0x61, 0x69, 0x72, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x45,
	0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x41, 0x6c, 0x74, 0x61, 0x69, 0x72, 0x48, 0x00, 0x52, 0x0b, 0x61, 0x6c, 0x74, 0x61,
	0x69, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x5e, 0x0a, 0x0f, 0x62, 0x65, 0x6c, 0x6c, 0x61,
	0x74, 0x72, 0x69, 0x78, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x33, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75,
	0x6d, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x65, 0x6c, 0x6c,
	0x61, 0x74, 0x72, 0x69, 0x78, 0x48, 0x00, 0x52, 0x0e, 0x62, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x72,
	0x69, 0x78, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x58, 0x0a, 0x0d, 0x63, 0x61, 0x70, 0x65, 0x6c,
	0x6c, 0x61, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x67, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31,
	0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x42,
	0x65, 0x61, 0x63, 0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x61, 0x70, 0x65, 0x6c, 0x6c,
	0x61, 0x48, 0x00, 0x52, 0x0c, 0x63, 0x61, 0x70, 0x65, 0x6c, 0x6c, 0x61, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x12, 0x52, 0x0a, 0x0b, 0x64, 0x65, 0x6e, 0x65, 0x62, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x18, 0x68, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x45,
	0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x44, 0x65, 0x6e, 0x65, 0x62, 0x48, 0x00, 0x52, 0x0a, 0x64, 0x65, 0x6e, 0x65, 0x62,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x0c, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x22, 0x8c, 0x01, 0x0a, 0x19, 0x45, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d,
	0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x50, 0x68, 0x61, 0x73, 0x65,
	0x30, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x61, 0x6e, 0x64, 0x61, 0x6f, 0x5f, 0x72, 0x65, 0x76, 0x65,
	0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x61, 0x6e, 0x64, 0x61, 0x6f,
	0x52, 0x65, 0x76, 0x65, 0x61, 0x6c, 0x12, 0x4a, 0x0a, 0x09, 0x65, 0x74, 0x68, 0x31, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x6f, 0x69, 0x6e,
	0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e,
	0x45, 0x74, 0x68, 0x31, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x65, 0x74, 0x68, 0x31, 0x44, 0x61,
	0x74, 0x61, 0x22, 0x8c, 0x01, 0x0a, 0x19, 0x45, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x42,
	0x65, 0x61, 0x63, 0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x41, 0x6c, 0x74, 0x61, 0x69, 0x72,
	0x12, 0x23, 0x0a, 0x0d, 0x72, 0x61, 0x6e, 0x64, 0x61, 0x6f, 0x5f, 0x72, 0x65, 0x76, 0x65, 0x61,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x61, 0x6e, 0x64, 0x61, 0x6f, 0x52,
	0x65, 0x76, 0x65, 0x61, 0x6c, 0x12, 0x4a, 0x0a, 0x09, 0x65, 0x74, 0x68, 0x31, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x45,
	0x74, 0x68, 0x31, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x65, 0x74, 0x68, 0x31, 0x44, 0x61, 0x74,
	0x61, 0x22, 0xfc, 0x01, 0x0a, 0x1c, 0x45, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x42, 0x65,
	0x61, 0x63, 0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x72,
	0x69, 0x78, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x61, 0x6e, 0x64, 0x61, 0x6f, 0x5f, 0x72, 0x65, 0x76,
	0x65, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x61, 0x6e, 0x64, 0x61,
	0x6f, 0x52, 0x65, 0x76, 0x65, 0x61, 0x6c, 0x12, 0x4a, 0x0a, 0x09, 0x65, 0x74, 0x68, 0x31, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x6f, 0x69,
	0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x42, 0x65, 0x61, 0x63, 0x6f,
	0x6e, 0x45, 0x74, 0x68, 0x31, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x65, 0x74, 0x68, 0x31, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x6b, 0x0a, 0x11, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e,
	0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x42,
	0x65, 0x61, 0x63, 0x6f, 0x6e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x72, 0x69, 0x78, 0x52, 0x10,
	0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x22, 0xf8, 0x01, 0x0a, 0x1a, 0x45, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x42, 0x65, 0x61,
	0x63, 0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x61, 0x70, 0x65, 0x6c, 0x6c, 0x61, 0x12,
	0x23, 0x0a, 0x0d, 0x72, 0x61, 0x6e, 0x64, 0x61, 0x6f, 0x5f, 0x72, 0x65, 0x76, 0x65, 0x61, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x61, 0x6e, 0x64, 0x61, 0x6f, 0x52, 0x65,
	0x76, 0x65, 0x61, 0x6c, 0x12, 0x4a, 0x0a, 0x09, 0x65, 0x74, 0x68, 0x31, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e,
	0x45, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x45, 0x74,
	0x68, 0x31, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x65, 0x74, 0x68, 0x31, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x69, 0x0a, 0x11, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x63, 0x6f,
	0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x42, 0x65, 0x61, 0x63,
	0x6f, 0x6e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x43, 0x61, 0x70, 0x65, 0x6c, 0x6c, 0x61, 0x52, 0x10, 0x65, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0xa6, 0x02, 0x0a, 0x18,
	0x45, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x44, 0x65, 0x6e, 0x65, 0x62, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x61, 0x6e, 0x64,
	0x61, 0x6f, 0x5f, 0x72, 0x65, 0x76, 0x65, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x72, 0x61, 0x6e, 0x64, 0x61, 0x6f, 0x52, 0x65, 0x76, 0x65, 0x61, 0x6c, 0x12, 0x4a, 0x0a,
	0x09, 0x65, 0x74, 0x68, 0x31, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75,
	0x6d, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x45, 0x74, 0x68, 0x31, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x08, 0x65, 0x74, 0x68, 0x31, 0x44, 0x61, 0x74, 0x61, 0x12, 0x67, 0x0a, 0x11, 0x65, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x45, 0x74, 0x68,
	0x65, 0x72, 0x65, 0x75, 0x6d, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x65, 0x6e, 0x65, 0x62,
	0x52, 0x10, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x62, 0x6c, 0x6f, 0x62, 0x5f, 0x6b, 0x7a, 0x67, 0x5f, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x12, 0x62, 0x6c, 0x6f, 0x62, 0x4b, 0x7a, 0x67, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x22, 0x7f, 0x0a, 0x16, 0x45, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d,
	0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x45, 0x74, 0x68, 0x31, 0x44, 0x61, 0x74, 0x61, 0x12, 0x21,
	0x0a, 0x0c, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x52, 0x6f, 0x6f,
	0x74, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f,
	0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x48, 0x61, 0x73, 0x68, 0x22, 0x93, 0x04, 0x0a, 0x27, 0x45, 0x74, 0x68, 0x65, 0x72, 0x65,
	0x75, 0x6d, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x72, 0x69,
	0x78, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x48, 0x61,
	0x73, 0x68, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x65, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69,
	0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x65, 0x65, 0x52, 0x65,
	0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70,
	0x74, 0x73, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x73, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6c,
	0x6f, 0x67, 0x73, 0x5f, 0x62, 0x6c, 0x6f, 0x6f, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x6c, 0x6f, 0x67, 0x73, 0x42, 0x6c, 0x6f, 0x6f, 0x6d, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72,
	0x65, 0x76, 0x5f, 0x72, 0x61, 0x6e, 0x64, 0x61, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x70, 0x72, 0x65, 0x76, 0x52, 0x61, 0x6e, 0x64, 0x61, 0x6f, 0x12, 0x21, 0x0a, 0x0c, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1b,
	0x0a, 0x09, 0x67, 0x61, 0x73, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x08, 0x67, 0x61, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x67,
	0x61, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x67,
	0x61, 0x73, 0x55, 0x73, 0x65, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x78, 0x74, 0x72, 0x61, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x27, 0x0a, 0x10, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x5f,
	0x67, 0x61, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x62, 0x61, 0x73, 0x65, 0x46,
	0x65, 0x65, 0x50, 0x65, 0x72, 0x47, 0x61, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0c, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xde, 0x04, 0x0a, 0x25,
	0x45, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x61,
	0x70, 0x65, 0x6c, 0x6c, 0x61, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f,
	0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x65, 0x65, 0x5f, 0x72, 0x65,
	0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66,
	0x65, 0x65, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x70, 0x74, 0x73, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x73, 0x52, 0x6f, 0x6f, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x6c, 0x6f, 0x67, 0x73, 0x5f, 0x62, 0x6c, 0x6f, 0x6f, 0x6d, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x6f, 0x67, 0x73, 0x42, 0x6c, 0x6f, 0x6f, 0x6d, 0x12, 0x1f,
	0x0a, 0x0b, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x72, 0x61, 0x6e, 0x64, 0x61, 0x6f, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x65, 0x76, 0x52, 0x61, 0x6e, 0x64, 0x61, 0x6f, 0x12,
	0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x73, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x67, 0x61, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x19, 0x0a, 0x08, 0x67, 0x61, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x07, 0x67, 0x61, 0x73, 0x55, 0x73, 0x65, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x78, 0x74, 0x72, 0x61, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x27, 0x0a, 0x10, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x66, 0x65, 0x65, 0x5f,
	0x70, 0x65, 0x72, 0x5f, 0x67, 0x61, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x62,
	0x61, 0x73, 0x65, 0x46, 0x65, 0x65, 0x50, 0x65, 0x72, 0x47, 0x61, 0x73, 0x12, 0x1d, 0x0a, 0x0a,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x22, 0x0a, 0x0c, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28,
	0x0c, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x4b, 0x0a, 0x0b, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x73, 0x18, 0x0f,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x45, 0x74, 0x68,
	0x65, 0x72, 0x65, 0x75, 0x6d, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x52,
	0x0b, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x73, 0x22, 0xa8, 0x05, 0x0a,
	0x23, 0x45, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x44,
	0x65, 0x6e, 0x65, 0x62, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x68,
	0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x65, 0x65, 0x5f, 0x72, 0x65, 0x63,
	0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x65,
	0x65, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x70, 0x74, 0x73, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x73, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x6c, 0x6f, 0x67, 0x73, 0x5f, 0x62, 0x6c, 0x6f, 0x6f, 0x6d, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x6c, 0x6f, 0x67, 0x73, 0x42, 0x6c, 0x6f, 0x6f, 0x6d, 0x12, 0x1f, 0x0a,
	0x0b, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x72, 0x61, 0x6e, 0x64, 0x61, 0x6f, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x65, 0x76, 0x52, 0x61, 0x6e, 0x64, 0x61, 0x6f, 0x12, 0x21,
	0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x73, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x67, 0x61, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x19,
	0x0a, 0x08, 0x67, 0x61, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x07, 0x67, 0x61, 0x73, 0x55, 0x73, 0x65, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x78, 0x74, 0x72, 0x61, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x27, 0x0a, 0x10, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x70,
	0x65, 0x72, 0x5f, 0x67, 0x61, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x62, 0x61,
	0x73, 0x65, 0x46, 0x65, 0x65, 0x50, 0x65, 0x72, 0x47, 0x61, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0c,
	0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4b,
	0x0a, 0x0b, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x73, 0x18, 0x0f, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x45, 0x74, 0x68, 0x65,
	0x72, 0x65, 0x75, 0x6d, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x52, 0x0b,
	0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x62,
	0x6c, 0x6f, 0x62, 0x5f, 0x67, 0x61, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x62, 0x47, 0x61, 0x73, 0x55, 0x73, 0x65, 0x64, 0x12,
	0x26, 0x0a, 0x0f, 0x65, 0x78, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x62, 0x6c, 0x6f, 0x62, 0x5f, 0x67,
	0x61, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x65, 0x78, 0x63, 0x65, 0x73, 0x73,
	0x42, 0x6c, 0x6f, 0x62, 0x47, 0x61, 0x73, 0x22, 0xfc, 0x01, 0x0a, 0x12, 0x45, 0x74, 0x68, 0x65,
	0x72, 0x65, 0x75, 0x6d, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x62, 0x12, 0x12,
	0x0a, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x73, 0x6c,
	0x6f, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x6f, 0x6f,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x52,
	0x6f, 0x6f, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6c, 0x6f,
	0x62, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x62, 0x6c, 0x6f, 0x62, 0x12, 0x25, 0x0a,
	0x0e, 0x6b, 0x7a, 0x67, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6b, 0x7a, 0x67, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6b, 0x7a, 0x67, 0x5f, 0x70, 0x72, 0x6f, 0x6f,
	0x66, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6b, 0x7a, 0x67, 0x50, 0x72, 0x6f, 0x6f,
	0x66, 0x12, 0x43, 0x0a, 0x1e, 0x6b, 0x7a, 0x67, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72,
	0x6f, 0x6f, 0x66, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x1b, 0x6b, 0x7a, 0x67, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f,
	0x6e, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x2a, 0x63, 0x0a, 0x15, 0x45, 0x74, 0x68, 0x65, 0x72, 0x65,
	0x75, 0x6d, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06,
	0x50, 0x48, 0x41, 0x53, 0x45, 0x30, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x4c, 0x54, 0x41,
	0x49, 0x52, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x42, 0x45, 0x4c, 0x4c, 0x41, 0x54, 0x52, 0x49,
	0x58, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x41, 0x50, 0x45, 0x4c, 0x4c, 0x41, 0x10, 0x04,
	0x12, 0x09, 0x0a, 0x05, 0x44, 0x45, 0x4e, 0x45, 0x42, 0x10, 0x05, 0x42, 0x3f, 0x5a, 0x3d, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61,
	0x73, 0x65, 0x2f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2f,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_coinbase_chainstorage_blockchain_ethereum_beacon_proto_rawDescOnce sync.Once
	file_coinbase_chainstorage_blockchain_ethereum_beacon_proto_rawDescData = file_coinbase_chainstorage_blockchain_ethereum_beacon_proto_rawDesc
)

func file_coinbase_chainstorage_blockchain_ethereum_beacon_proto_rawDescGZIP() []byte {
	file_coinbase_chainstorage_blockchain_ethereum_beacon_proto_rawDescOnce.Do(func() {
		file_coinbase_chainstorage_blockchain_ethereum_beacon_proto_rawDescData = protoimpl.X.CompressGZIP(file_coinbase_chainstorage_blockchain_ethereum_beacon_proto_rawDescData)
	})
	return file_coinbase_chainstorage_blockchain_ethereum_beacon_proto_rawDescData
}

var file_coinbase_chainstorage_blockchain_ethereum_beacon_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_coinbase_chainstorage_blockchain_ethereum_beacon_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_coinbase_chainstorage_blockchain_ethereum_beacon_proto_goTypes = []interface{}{
	(EthereumBeaconVersion)(0),                      // 0: coinbase.chainstorage.EthereumBeaconVersion
	(*EthereumBeaconBlobdata)(nil),                  // 1: coinbase.chainstorage.EthereumBeaconBlobdata
	(*EthereumBeaconBlock)(nil),                     // 2: coinbase.chainstorage.EthereumBeaconBlock
	(*EthereumBeaconBlockHeader)(nil),               // 3: coinbase.chainstorage.EthereumBeaconBlockHeader
	(*EthereumBeaconBlockData)(nil),                 // 4: coinbase.chainstorage.EthereumBeaconBlockData
	(*EthereumBeaconBlockPhase0)(nil),               // 5: coinbase.chainstorage.EthereumBeaconBlockPhase0
	(*EthereumBeaconBlockAltair)(nil),               // 6: coinbase.chainstorage.EthereumBeaconBlockAltair
	(*EthereumBeaconBlockBellatrix)(nil),            // 7: coinbase.chainstorage.EthereumBeaconBlockBellatrix
	(*EthereumBeaconBlockCapella)(nil),              // 8: coinbase.chainstorage.EthereumBeaconBlockCapella
	(*EthereumBeaconBlockDeneb)(nil),                // 9: coinbase.chainstorage.EthereumBeaconBlockDeneb
	(*EthereumBeaconEth1Data)(nil),                  // 10: coinbase.chainstorage.EthereumBeaconEth1Data
	(*EthereumBeaconExecutionPayloadBellatrix)(nil), // 11: coinbase.chainstorage.EthereumBeaconExecutionPayloadBellatrix
	(*EthereumBeaconExecutionPayloadCapella)(nil),   // 12: coinbase.chainstorage.EthereumBeaconExecutionPayloadCapella
	(*EthereumBeaconExecutionPayloadDeneb)(nil),     // 13: coinbase.chainstorage.EthereumBeaconExecutionPayloadDeneb
	(*EthereumBeaconBlob)(nil),                      // 14: coinbase.chainstorage.EthereumBeaconBlob
	(*timestamppb.Timestamp)(nil),                   // 15: google.protobuf.Timestamp
	(*EthereumWithdrawal)(nil),                      // 16: coinbase.chainstorage.EthereumWithdrawal
}
var file_coinbase_chainstorage_blockchain_ethereum_beacon_proto_depIdxs = []int32{
	3,  // 0: coinbase.chainstorage.EthereumBeaconBlock.header:type_name -> coinbase.chainstorage.EthereumBeaconBlockHeader
	4,  // 1: coinbase.chainstorage.EthereumBeaconBlock.block:type_name -> coinbase.chainstorage.EthereumBeaconBlockData
	14, // 2: coinbase.chainstorage.EthereumBeaconBlock.blobs:type_name -> coinbase.chainstorage.EthereumBeaconBlob
	0,  // 3: coinbase.chainstorage.EthereumBeaconBlockData.version:type_name -> coinbase.chainstorage.EthereumBeaconVersion
	5,  // 4: coinbase.chainstorage.EthereumBeaconBlockData.phase0_block:type_name -> coinbase.chainstorage.EthereumBeaconBlockPhase0
	6,  // 5: coinbase.chainstorage.EthereumBeaconBlockData.altair_block:type_name -> coinbase.chainstorage.EthereumBeaconBlockAltair
	7,  // 6: coinbase.chainstorage.EthereumBeaconBlockData.bellatrix_block:type_name -> coinbase.chainstorage.EthereumBeaconBlockBellatrix
	8,  // 7: coinbase.chainstorage.EthereumBeaconBlockData.capella_block:type_name -> coinbase.chainstorage.EthereumBeaconBlockCapella
	9,  // 8: coinbase.chainstorage.EthereumBeaconBlockData.deneb_block:type_name -> coinbase.chainstorage.EthereumBeaconBlockDeneb
	10, // 9: coinbase.chainstorage.EthereumBeaconBlockPhase0.eth1_data:type_name -> coinbase.chainstorage.EthereumBeaconEth1Data
	10, // 10: coinbase.chainstorage.EthereumBeaconBlockAltair.eth1_data:type_name -> coinbase.chainstorage.EthereumBeaconEth1Data
	10, // 11: coinbase.chainstorage.EthereumBeaconBlockBellatrix.eth1_data:type_name -> coinbase.chainstorage.EthereumBeaconEth1Data
	11, // 12: coinbase.chainstorage.EthereumBeaconBlockBellatrix.execution_payload:type_name -> coinbase.chainstorage.EthereumBeaconExecutionPayloadBellatrix
	10, // 13: coinbase.chainstorage.EthereumBeaconBlockCapella.eth1_data:type_name -> coinbase.chainstorage.EthereumBeaconEth1Data
	12, // 14: coinbase.chainstorage.EthereumBeaconBlockCapella.execution_payload:type_name -> coinbase.chainstorage.EthereumBeaconExecutionPayloadCapella
	10, // 15: coinbase.chainstorage.EthereumBeaconBlockDeneb.eth1_data:type_name -> coinbase.chainstorage.EthereumBeaconEth1Data
	13, // 16: coinbase.chainstorage.EthereumBeaconBlockDeneb.execution_payload:type_name -> coinbase.chainstorage.EthereumBeaconExecutionPayloadDeneb
	15, // 17: coinbase.chainstorage.EthereumBeaconExecutionPayloadBellatrix.timestamp:type_name -> google.protobuf.Timestamp
	15, // 18: coinbase.chainstorage.EthereumBeaconExecutionPayloadCapella.timestamp:type_name -> google.protobuf.Timestamp
	16, // 19: coinbase.chainstorage.EthereumBeaconExecutionPayloadCapella.withdrawals:type_name -> coinbase.chainstorage.EthereumWithdrawal
	15, // 20: coinbase.chainstorage.EthereumBeaconExecutionPayloadDeneb.timestamp:type_name -> google.protobuf.Timestamp
	16, // 21: coinbase.chainstorage.EthereumBeaconExecutionPayloadDeneb.withdrawals:type_name -> coinbase.chainstorage.EthereumWithdrawal
	22, // [22:22] is the sub-list for method output_type
	22, // [22:22] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() { file_coinbase_chainstorage_blockchain_ethereum_beacon_proto_init() }
func file_coinbase_chainstorage_blockchain_ethereum_beacon_proto_init() {
	if File_coinbase_chainstorage_blockchain_ethereum_beacon_proto != nil {
		return
	}
	file_coinbase_chainstorage_blockchain_ethereum_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_coinbase_chainstorage_blockchain_ethereum_beacon_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EthereumBeaconBlobdata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_ethereum_beacon_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EthereumBeaconBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_ethereum_beacon_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EthereumBeaconBlockHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_ethereum_beacon_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EthereumBeaconBlockData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_ethereum_beacon_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EthereumBeaconBlockPhase0); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_ethereum_beacon_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EthereumBeaconBlockAltair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_ethereum_beacon_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EthereumBeaconBlockBellatrix); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_ethereum_beacon_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EthereumBeaconBlockCapella); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_ethereum_beacon_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EthereumBeaconBlockDeneb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_ethereum_beacon_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EthereumBeaconEth1Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_ethereum_beacon_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EthereumBeaconExecutionPayloadBellatrix); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_ethereum_beacon_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EthereumBeaconExecutionPayloadCapella); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_ethereum_beacon_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EthereumBeaconExecutionPayloadDeneb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_ethereum_beacon_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EthereumBeaconBlob); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_coinbase_chainstorage_blockchain_ethereum_beacon_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*EthereumBeaconBlockData_Phase0Block)(nil),
		(*EthereumBeaconBlockData_AltairBlock)(nil),
		(*EthereumBeaconBlockData_BellatrixBlock)(nil),
		(*EthereumBeaconBlockData_CapellaBlock)(nil),
		(*EthereumBeaconBlockData_DenebBlock)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_coinbase_chainstorage_blockchain_ethereum_beacon_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_coinbase_chainstorage_blockchain_ethereum_beacon_proto_goTypes,
		DependencyIndexes: file_coinbase_chainstorage_blockchain_ethereum_beacon_proto_depIdxs,
		EnumInfos:         file_coinbase_chainstorage_blockchain_ethereum_beacon_proto_enumTypes,
		MessageInfos:      file_coinbase_chainstorage_blockchain_ethereum_beacon_proto_msgTypes,
	}.Build()
	File_coinbase_chainstorage_blockchain_ethereum_beacon_proto = out.File
	file_coinbase_chainstorage_blockchain_ethereum_beacon_proto_rawDesc = nil
	file_coinbase_chainstorage_blockchain_ethereum_beacon_proto_goTypes = nil
	file_coinbase_chainstorage_blockchain_ethereum_beacon_proto_depIdxs = nil
}
