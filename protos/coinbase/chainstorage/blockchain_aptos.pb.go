// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        v4.25.3
// source: coinbase/chainstorage/blockchain_aptos.proto

package chainstorage

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AptosTransaction_TransactionType int32

const (
	AptosTransaction_UNSPECIFIED      AptosTransaction_TransactionType = 0
	AptosTransaction_GENESIS          AptosTransaction_TransactionType = 1
	AptosTransaction_BLOCK_METADATA   AptosTransaction_TransactionType = 2
	AptosTransaction_STATE_CHECKPOINT AptosTransaction_TransactionType = 3
	AptosTransaction_USER             AptosTransaction_TransactionType = 4
)

// Enum value maps for AptosTransaction_TransactionType.
var (
	AptosTransaction_TransactionType_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "GENESIS",
		2: "BLOCK_METADATA",
		3: "STATE_CHECKPOINT",
		4: "USER",
	}
	AptosTransaction_TransactionType_value = map[string]int32{
		"UNSPECIFIED":      0,
		"GENESIS":          1,
		"BLOCK_METADATA":   2,
		"STATE_CHECKPOINT": 3,
		"USER":             4,
	}
)

func (x AptosTransaction_TransactionType) Enum() *AptosTransaction_TransactionType {
	p := new(AptosTransaction_TransactionType)
	*p = x
	return p
}

func (x AptosTransaction_TransactionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AptosTransaction_TransactionType) Descriptor() protoreflect.EnumDescriptor {
	return file_coinbase_chainstorage_blockchain_aptos_proto_enumTypes[0].Descriptor()
}

func (AptosTransaction_TransactionType) Type() protoreflect.EnumType {
	return &file_coinbase_chainstorage_blockchain_aptos_proto_enumTypes[0]
}

func (x AptosTransaction_TransactionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AptosTransaction_TransactionType.Descriptor instead.
func (AptosTransaction_TransactionType) EnumDescriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_aptos_proto_rawDescGZIP(), []int{3, 0}
}

type AptosWriteSetChange_Type int32

const (
	AptosWriteSetChange_UNSPECIFIED       AptosWriteSetChange_Type = 0
	AptosWriteSetChange_DELETE_MODULE     AptosWriteSetChange_Type = 1
	AptosWriteSetChange_DELETE_RESOURCE   AptosWriteSetChange_Type = 2
	AptosWriteSetChange_DELETE_TABLE_ITEM AptosWriteSetChange_Type = 3
	AptosWriteSetChange_WRITE_MODULE      AptosWriteSetChange_Type = 4
	AptosWriteSetChange_WRITE_RESOURCE    AptosWriteSetChange_Type = 5
	AptosWriteSetChange_WRITE_TABLE_ITEM  AptosWriteSetChange_Type = 6
)

// Enum value maps for AptosWriteSetChange_Type.
var (
	AptosWriteSetChange_Type_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "DELETE_MODULE",
		2: "DELETE_RESOURCE",
		3: "DELETE_TABLE_ITEM",
		4: "WRITE_MODULE",
		5: "WRITE_RESOURCE",
		6: "WRITE_TABLE_ITEM",
	}
	AptosWriteSetChange_Type_value = map[string]int32{
		"UNSPECIFIED":       0,
		"DELETE_MODULE":     1,
		"DELETE_RESOURCE":   2,
		"DELETE_TABLE_ITEM": 3,
		"WRITE_MODULE":      4,
		"WRITE_RESOURCE":    5,
		"WRITE_TABLE_ITEM":  6,
	}
)

func (x AptosWriteSetChange_Type) Enum() *AptosWriteSetChange_Type {
	p := new(AptosWriteSetChange_Type)
	*p = x
	return p
}

func (x AptosWriteSetChange_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AptosWriteSetChange_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_coinbase_chainstorage_blockchain_aptos_proto_enumTypes[1].Descriptor()
}

func (AptosWriteSetChange_Type) Type() protoreflect.EnumType {
	return &file_coinbase_chainstorage_blockchain_aptos_proto_enumTypes[1]
}

func (x AptosWriteSetChange_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AptosWriteSetChange_Type.Descriptor instead.
func (AptosWriteSetChange_Type) EnumDescriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_aptos_proto_rawDescGZIP(), []int{5, 0}
}

type AptosWriteSet_Type int32

const (
	AptosWriteSet_UNSPECIFIED      AptosWriteSet_Type = 0
	AptosWriteSet_SCRIPT_WRITE_SET AptosWriteSet_Type = 1
	AptosWriteSet_DIRECT_WRITE_SET AptosWriteSet_Type = 2
)

// Enum value maps for AptosWriteSet_Type.
var (
	AptosWriteSet_Type_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "SCRIPT_WRITE_SET",
		2: "DIRECT_WRITE_SET",
	}
	AptosWriteSet_Type_value = map[string]int32{
		"UNSPECIFIED":      0,
		"SCRIPT_WRITE_SET": 1,
		"DIRECT_WRITE_SET": 2,
	}
)

func (x AptosWriteSet_Type) Enum() *AptosWriteSet_Type {
	p := new(AptosWriteSet_Type)
	*p = x
	return p
}

func (x AptosWriteSet_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AptosWriteSet_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_coinbase_chainstorage_blockchain_aptos_proto_enumTypes[2].Descriptor()
}

func (AptosWriteSet_Type) Type() protoreflect.EnumType {
	return &file_coinbase_chainstorage_blockchain_aptos_proto_enumTypes[2]
}

func (x AptosWriteSet_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AptosWriteSet_Type.Descriptor instead.
func (AptosWriteSet_Type) EnumDescriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_aptos_proto_rawDescGZIP(), []int{19, 0}
}

type AptosTransactionPayload_Type int32

const (
	AptosTransactionPayload_UNSPECIFIED            AptosTransactionPayload_Type = 0
	AptosTransactionPayload_ENTRY_FUNCTION_PAYLOAD AptosTransactionPayload_Type = 1
	AptosTransactionPayload_SCRIPT_PAYLOAD         AptosTransactionPayload_Type = 2
	AptosTransactionPayload_MODULE_BUNDLE_PAYLOAD  AptosTransactionPayload_Type = 3
	AptosTransactionPayload_WRITE_SET_PAYLOAD      AptosTransactionPayload_Type = 4
	AptosTransactionPayload_MULTISIG_PAYLOAD       AptosTransactionPayload_Type = 5
)

// Enum value maps for AptosTransactionPayload_Type.
var (
	AptosTransactionPayload_Type_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "ENTRY_FUNCTION_PAYLOAD",
		2: "SCRIPT_PAYLOAD",
		3: "MODULE_BUNDLE_PAYLOAD",
		4: "WRITE_SET_PAYLOAD",
		5: "MULTISIG_PAYLOAD",
	}
	AptosTransactionPayload_Type_value = map[string]int32{
		"UNSPECIFIED":            0,
		"ENTRY_FUNCTION_PAYLOAD": 1,
		"SCRIPT_PAYLOAD":         2,
		"MODULE_BUNDLE_PAYLOAD":  3,
		"WRITE_SET_PAYLOAD":      4,
		"MULTISIG_PAYLOAD":       5,
	}
)

func (x AptosTransactionPayload_Type) Enum() *AptosTransactionPayload_Type {
	p := new(AptosTransactionPayload_Type)
	*p = x
	return p
}

func (x AptosTransactionPayload_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AptosTransactionPayload_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_coinbase_chainstorage_blockchain_aptos_proto_enumTypes[3].Descriptor()
}

func (AptosTransactionPayload_Type) Type() protoreflect.EnumType {
	return &file_coinbase_chainstorage_blockchain_aptos_proto_enumTypes[3]
}

func (x AptosTransactionPayload_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AptosTransactionPayload_Type.Descriptor instead.
func (AptosTransactionPayload_Type) EnumDescriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_aptos_proto_rawDescGZIP(), []int{24, 0}
}

type AptosMoveFunction_Type int32

const (
	AptosMoveFunction_UNSPECIFIED AptosMoveFunction_Type = 0
	AptosMoveFunction_PRIVATE     AptosMoveFunction_Type = 1
	AptosMoveFunction_PUBLIC      AptosMoveFunction_Type = 2
	AptosMoveFunction_FRIEND      AptosMoveFunction_Type = 3
)

// Enum value maps for AptosMoveFunction_Type.
var (
	AptosMoveFunction_Type_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "PRIVATE",
		2: "PUBLIC",
		3: "FRIEND",
	}
	AptosMoveFunction_Type_value = map[string]int32{
		"UNSPECIFIED": 0,
		"PRIVATE":     1,
		"PUBLIC":      2,
		"FRIEND":      3,
	}
)

func (x AptosMoveFunction_Type) Enum() *AptosMoveFunction_Type {
	p := new(AptosMoveFunction_Type)
	*p = x
	return p
}

func (x AptosMoveFunction_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AptosMoveFunction_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_coinbase_chainstorage_blockchain_aptos_proto_enumTypes[4].Descriptor()
}

func (AptosMoveFunction_Type) Type() protoreflect.EnumType {
	return &file_coinbase_chainstorage_blockchain_aptos_proto_enumTypes[4]
}

func (x AptosMoveFunction_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AptosMoveFunction_Type.Descriptor instead.
func (AptosMoveFunction_Type) EnumDescriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_aptos_proto_rawDescGZIP(), []int{30, 0}
}

type AptosMultisigTransactionPayload_Type int32

const (
	AptosMultisigTransactionPayload_UNSPECIFIED            AptosMultisigTransactionPayload_Type = 0
	AptosMultisigTransactionPayload_ENTRY_FUNCTION_PAYLOAD AptosMultisigTransactionPayload_Type = 1
)

// Enum value maps for AptosMultisigTransactionPayload_Type.
var (
	AptosMultisigTransactionPayload_Type_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "ENTRY_FUNCTION_PAYLOAD",
	}
	AptosMultisigTransactionPayload_Type_value = map[string]int32{
		"UNSPECIFIED":            0,
		"ENTRY_FUNCTION_PAYLOAD": 1,
	}
)

func (x AptosMultisigTransactionPayload_Type) Enum() *AptosMultisigTransactionPayload_Type {
	p := new(AptosMultisigTransactionPayload_Type)
	*p = x
	return p
}

func (x AptosMultisigTransactionPayload_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AptosMultisigTransactionPayload_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_coinbase_chainstorage_blockchain_aptos_proto_enumTypes[5].Descriptor()
}

func (AptosMultisigTransactionPayload_Type) Type() protoreflect.EnumType {
	return &file_coinbase_chainstorage_blockchain_aptos_proto_enumTypes[5]
}

func (x AptosMultisigTransactionPayload_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AptosMultisigTransactionPayload_Type.Descriptor instead.
func (AptosMultisigTransactionPayload_Type) EnumDescriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_aptos_proto_rawDescGZIP(), []int{40, 0}
}

type AptosSignature_Type int32

const (
	AptosSignature_UNSPECIFIED   AptosSignature_Type = 0
	AptosSignature_ED25519       AptosSignature_Type = 1
	AptosSignature_MULTI_ED25519 AptosSignature_Type = 2
	AptosSignature_MULTI_AGENT   AptosSignature_Type = 3
	AptosSignature_FEE_PAYER     AptosSignature_Type = 4
)

// Enum value maps for AptosSignature_Type.
var (
	AptosSignature_Type_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "ED25519",
		2: "MULTI_ED25519",
		3: "MULTI_AGENT",
		4: "FEE_PAYER",
	}
	AptosSignature_Type_value = map[string]int32{
		"UNSPECIFIED":   0,
		"ED25519":       1,
		"MULTI_ED25519": 2,
		"MULTI_AGENT":   3,
		"FEE_PAYER":     4,
	}
)

func (x AptosSignature_Type) Enum() *AptosSignature_Type {
	p := new(AptosSignature_Type)
	*p = x
	return p
}

func (x AptosSignature_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AptosSignature_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_coinbase_chainstorage_blockchain_aptos_proto_enumTypes[6].Descriptor()
}

func (AptosSignature_Type) Type() protoreflect.EnumType {
	return &file_coinbase_chainstorage_blockchain_aptos_proto_enumTypes[6]
}

func (x AptosSignature_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AptosSignature_Type.Descriptor instead.
func (AptosSignature_Type) EnumDescriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_aptos_proto_rawDescGZIP(), []int{41, 0}
}

type AptosAccountSignature_Type int32

const (
	AptosAccountSignature_UNSPECIFIED   AptosAccountSignature_Type = 0
	AptosAccountSignature_ED25519       AptosAccountSignature_Type = 1
	AptosAccountSignature_MULTI_ED25519 AptosAccountSignature_Type = 2
	AptosAccountSignature_FEE_PAYER     AptosAccountSignature_Type = 3
)

// Enum value maps for AptosAccountSignature_Type.
var (
	AptosAccountSignature_Type_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "ED25519",
		2: "MULTI_ED25519",
		3: "FEE_PAYER",
	}
	AptosAccountSignature_Type_value = map[string]int32{
		"UNSPECIFIED":   0,
		"ED25519":       1,
		"MULTI_ED25519": 2,
		"FEE_PAYER":     3,
	}
)

func (x AptosAccountSignature_Type) Enum() *AptosAccountSignature_Type {
	p := new(AptosAccountSignature_Type)
	*p = x
	return p
}

func (x AptosAccountSignature_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AptosAccountSignature_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_coinbase_chainstorage_blockchain_aptos_proto_enumTypes[7].Descriptor()
}

func (AptosAccountSignature_Type) Type() protoreflect.EnumType {
	return &file_coinbase_chainstorage_blockchain_aptos_proto_enumTypes[7]
}

func (x AptosAccountSignature_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AptosAccountSignature_Type.Descriptor instead.
func (AptosAccountSignature_Type) EnumDescriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_aptos_proto_rawDescGZIP(), []int{46, 0}
}

// One request can fetch all the needed data for a raw block in Aptos.
type AptosBlobdata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Block []byte `protobuf:"bytes,1,opt,name=block,proto3" json:"block,omitempty"`
}

func (x *AptosBlobdata) Reset() {
	*x = AptosBlobdata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_aptos_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AptosBlobdata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AptosBlobdata) ProtoMessage() {}

func (x *AptosBlobdata) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_aptos_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AptosBlobdata.ProtoReflect.Descriptor instead.
func (*AptosBlobdata) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_aptos_proto_rawDescGZIP(), []int{0}
}

func (x *AptosBlobdata) GetBlock() []byte {
	if x != nil {
		return x.Block
	}
	return nil
}

// A block on Aptos holds transactions in chronological order (ordered by a transactions monotonically increasing `version` field)
// All blocks start with a `BlockMetadataTransaction`, and are followed by zero or more transactions.
// The next `BlockMetadataTransaction` denotes the end of the current block, and the start of the next one.
//
// The Block `height` is a strictly monotonically increasing count of the number of blocks,
// and there will never be a gap in the numbers. It is also a unique identifier: there will never be two blocks with
// the same `height`.
//
// The Genesis Transaction (version 0) is contained within the first block, which has a height of `0`.
type AptosBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *AptosHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// All transactions that happened in the Block.
	Transactions []*AptosTransaction `protobuf:"bytes,2,rep,name=transactions,proto3" json:"transactions,omitempty"`
}

func (x *AptosBlock) Reset() {
	*x = AptosBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_aptos_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AptosBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AptosBlock) ProtoMessage() {}

func (x *AptosBlock) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_aptos_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AptosBlock.ProtoReflect.Descriptor instead.
func (*AptosBlock) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_aptos_proto_rawDescGZIP(), []int{1}
}

func (x *AptosBlock) GetHeader() *AptosHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *AptosBlock) GetTransactions() []*AptosTransaction {
	if x != nil {
		return x.Transactions
	}
	return nil
}

type AptosHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockHeight uint64 `protobuf:"varint,1,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	BlockHash   string `protobuf:"bytes,2,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	// Every transaction in the `transactions` will have the same `timestamp` as the block.
	BlockTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=block_time,json=blockTime,proto3" json:"block_time,omitempty"`
}

func (x *AptosHeader) Reset() {
	*x = AptosHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_aptos_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AptosHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AptosHeader) ProtoMessage() {}

func (x *AptosHeader) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_aptos_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AptosHeader.ProtoReflect.Descriptor instead.
func (*AptosHeader) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_aptos_proto_rawDescGZIP(), []int{2}
}

func (x *AptosHeader) GetBlockHeight() uint64 {
	if x != nil {
		return x.BlockHeight
	}
	return 0
}

func (x *AptosHeader) GetBlockHash() string {
	if x != nil {
		return x.BlockHash
	}
	return ""
}

func (x *AptosHeader) GetBlockTime() *timestamppb.Timestamp {
	if x != nil {
		return x.BlockTime
	}
	return nil
}

// Transaction as it happened on the chain, there are 4 types of transactions:
// - User Transaction: a user initiated transaction to interact with the chain
// - Block Metadata Transaction: transactions generated by the chain to group together transactions forming a "block"
// - State Checkpoint Transaction: transactions generated by the chain so when validator agreed on a particular global state
// - Genesis Transaction: the first transaction of the chain, with all core contract and validator information baked in
type AptosTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version     uint64                           `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	BlockHeight uint64                           `protobuf:"varint,2,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	Timestamp   *timestamppb.Timestamp           `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Info        *AptosTransactionInfo            `protobuf:"bytes,4,opt,name=info,proto3" json:"info,omitempty"`
	Type        AptosTransaction_TransactionType `protobuf:"varint,5,opt,name=type,proto3,enum=coinbase.chainstorage.AptosTransaction_TransactionType" json:"type,omitempty"`
	// Types that are assignable to TxnData:
	//
	//	*AptosTransaction_BlockMetadata
	//	*AptosTransaction_Genesis
	//	*AptosTransaction_StateCheckpoint
	//	*AptosTransaction_User
	TxnData isAptosTransaction_TxnData `protobuf_oneof:"txn_data"`
}

func (x *AptosTransaction) Reset() {
	*x = AptosTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_aptos_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AptosTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AptosTransaction) ProtoMessage() {}

func (x *AptosTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_aptos_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AptosTransaction.ProtoReflect.Descriptor instead.
func (*AptosTransaction) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_aptos_proto_rawDescGZIP(), []int{3}
}

func (x *AptosTransaction) GetVersion() uint64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *AptosTransaction) GetBlockHeight() uint64 {
	if x != nil {
		return x.BlockHeight
	}
	return 0
}

func (x *AptosTransaction) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *AptosTransaction) GetInfo() *AptosTransactionInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *AptosTransaction) GetType() AptosTransaction_TransactionType {
	if x != nil {
		return x.Type
	}
	return AptosTransaction_UNSPECIFIED
}

func (m *AptosTransaction) GetTxnData() isAptosTransaction_TxnData {
	if m != nil {
		return m.TxnData
	}
	return nil
}

func (x *AptosTransaction) GetBlockMetadata() *AptosBlockMetadataTransaction {
	if x, ok := x.GetTxnData().(*AptosTransaction_BlockMetadata); ok {
		return x.BlockMetadata
	}
	return nil
}

func (x *AptosTransaction) GetGenesis() *AptosGenesisTransaction {
	if x, ok := x.GetTxnData().(*AptosTransaction_Genesis); ok {
		return x.Genesis
	}
	return nil
}

func (x *AptosTransaction) GetStateCheckpoint() *AptosStateCheckpointTransaction {
	if x, ok := x.GetTxnData().(*AptosTransaction_StateCheckpoint); ok {
		return x.StateCheckpoint
	}
	return nil
}

func (x *AptosTransaction) GetUser() *AptosUserTransaction {
	if x, ok := x.GetTxnData().(*AptosTransaction_User); ok {
		return x.User
	}
	return nil
}

type isAptosTransaction_TxnData interface {
	isAptosTransaction_TxnData()
}

type AptosTransaction_BlockMetadata struct {
	BlockMetadata *AptosBlockMetadataTransaction `protobuf:"bytes,100,opt,name=block_metadata,json=blockMetadata,proto3,oneof"`
}

type AptosTransaction_Genesis struct {
	Genesis *AptosGenesisTransaction `protobuf:"bytes,101,opt,name=genesis,proto3,oneof"`
}

type AptosTransaction_StateCheckpoint struct {
	StateCheckpoint *AptosStateCheckpointTransaction `protobuf:"bytes,102,opt,name=state_checkpoint,json=stateCheckpoint,proto3,oneof"`
}

type AptosTransaction_User struct {
	User *AptosUserTransaction `protobuf:"bytes,103,opt,name=user,proto3,oneof"`
}

func (*AptosTransaction_BlockMetadata) isAptosTransaction_TxnData() {}

func (*AptosTransaction_Genesis) isAptosTransaction_TxnData() {}

func (*AptosTransaction_StateCheckpoint) isAptosTransaction_TxnData() {}

func (*AptosTransaction_User) isAptosTransaction_TxnData() {}

// This is the shared transaction infor for all types of transactions.
type AptosTransactionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The transaction hash.
	Hash            string `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	StateChangeHash string `protobuf:"bytes,2,opt,name=state_change_hash,json=stateChangeHash,proto3" json:"state_change_hash,omitempty"`
	EventRootHash   string `protobuf:"bytes,3,opt,name=event_root_hash,json=eventRootHash,proto3" json:"event_root_hash,omitempty"`
	// Types that are assignable to OptionalStateCheckpointHash:
	//
	//	*AptosTransactionInfo_StateCheckpointHash
	OptionalStateCheckpointHash isAptosTransactionInfo_OptionalStateCheckpointHash `protobuf_oneof:"optional_state_checkpoint_hash"`
	GasUsed                     uint64                                             `protobuf:"varint,5,opt,name=gas_used,json=gasUsed,proto3" json:"gas_used,omitempty"`
	Success                     bool                                               `protobuf:"varint,6,opt,name=success,proto3" json:"success,omitempty"`
	VmStatus                    string                                             `protobuf:"bytes,7,opt,name=vm_status,json=vmStatus,proto3" json:"vm_status,omitempty"`
	AccumulatorRootHash         string                                             `protobuf:"bytes,8,opt,name=accumulator_root_hash,json=accumulatorRootHash,proto3" json:"accumulator_root_hash,omitempty"`
	Changes                     []*AptosWriteSetChange                             `protobuf:"bytes,9,rep,name=changes,proto3" json:"changes,omitempty"`
}

func (x *AptosTransactionInfo) Reset() {
	*x = AptosTransactionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_aptos_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AptosTransactionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AptosTransactionInfo) ProtoMessage() {}

func (x *AptosTransactionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_aptos_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AptosTransactionInfo.ProtoReflect.Descriptor instead.
func (*AptosTransactionInfo) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_aptos_proto_rawDescGZIP(), []int{4}
}

func (x *AptosTransactionInfo) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *AptosTransactionInfo) GetStateChangeHash() string {
	if x != nil {
		return x.StateChangeHash
	}
	return ""
}

func (x *AptosTransactionInfo) GetEventRootHash() string {
	if x != nil {
		return x.EventRootHash
	}
	return ""
}

func (m *AptosTransactionInfo) GetOptionalStateCheckpointHash() isAptosTransactionInfo_OptionalStateCheckpointHash {
	if m != nil {
		return m.OptionalStateCheckpointHash
	}
	return nil
}

func (x *AptosTransactionInfo) GetStateCheckpointHash() string {
	if x, ok := x.GetOptionalStateCheckpointHash().(*AptosTransactionInfo_StateCheckpointHash); ok {
		return x.StateCheckpointHash
	}
	return ""
}

func (x *AptosTransactionInfo) GetGasUsed() uint64 {
	if x != nil {
		return x.GasUsed
	}
	return 0
}

func (x *AptosTransactionInfo) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *AptosTransactionInfo) GetVmStatus() string {
	if x != nil {
		return x.VmStatus
	}
	return ""
}

func (x *AptosTransactionInfo) GetAccumulatorRootHash() string {
	if x != nil {
		return x.AccumulatorRootHash
	}
	return ""
}

func (x *AptosTransactionInfo) GetChanges() []*AptosWriteSetChange {
	if x != nil {
		return x.Changes
	}
	return nil
}

type isAptosTransactionInfo_OptionalStateCheckpointHash interface {
	isAptosTransactionInfo_OptionalStateCheckpointHash()
}

type AptosTransactionInfo_StateCheckpointHash struct {
	StateCheckpointHash string `protobuf:"bytes,4,opt,name=state_checkpoint_hash,json=stateCheckpointHash,proto3,oneof"`
}

func (*AptosTransactionInfo_StateCheckpointHash) isAptosTransactionInfo_OptionalStateCheckpointHash() {
}

type AptosWriteSetChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type AptosWriteSetChange_Type `protobuf:"varint,1,opt,name=type,proto3,enum=coinbase.chainstorage.AptosWriteSetChange_Type" json:"type,omitempty"`
	// Types that are assignable to Change:
	//
	//	*AptosWriteSetChange_DeleteModule
	//	*AptosWriteSetChange_DeleteResource
	//	*AptosWriteSetChange_DeleteTableItem
	//	*AptosWriteSetChange_WriteModule
	//	*AptosWriteSetChange_WriteResource
	//	*AptosWriteSetChange_WriteTableItem
	Change isAptosWriteSetChange_Change `protobuf_oneof:"change"`
}

func (x *AptosWriteSetChange) Reset() {
	*x = AptosWriteSetChange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_aptos_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AptosWriteSetChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AptosWriteSetChange) ProtoMessage() {}

func (x *AptosWriteSetChange) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_aptos_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AptosWriteSetChange.ProtoReflect.Descriptor instead.
func (*AptosWriteSetChange) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_aptos_proto_rawDescGZIP(), []int{5}
}

func (x *AptosWriteSetChange) GetType() AptosWriteSetChange_Type {
	if x != nil {
		return x.Type
	}
	return AptosWriteSetChange_UNSPECIFIED
}

func (m *AptosWriteSetChange) GetChange() isAptosWriteSetChange_Change {
	if m != nil {
		return m.Change
	}
	return nil
}

func (x *AptosWriteSetChange) GetDeleteModule() *AptosDeleteModule {
	if x, ok := x.GetChange().(*AptosWriteSetChange_DeleteModule); ok {
		return x.DeleteModule
	}
	return nil
}

func (x *AptosWriteSetChange) GetDeleteResource() *AptosDeleteResource {
	if x, ok := x.GetChange().(*AptosWriteSetChange_DeleteResource); ok {
		return x.DeleteResource
	}
	return nil
}

func (x *AptosWriteSetChange) GetDeleteTableItem() *AptosDeleteTableItem {
	if x, ok := x.GetChange().(*AptosWriteSetChange_DeleteTableItem); ok {
		return x.DeleteTableItem
	}
	return nil
}

func (x *AptosWriteSetChange) GetWriteModule() *AptosWriteModule {
	if x, ok := x.GetChange().(*AptosWriteSetChange_WriteModule); ok {
		return x.WriteModule
	}
	return nil
}

func (x *AptosWriteSetChange) GetWriteResource() *AptosWriteResource {
	if x, ok := x.GetChange().(*AptosWriteSetChange_WriteResource); ok {
		return x.WriteResource
	}
	return nil
}

func (x *AptosWriteSetChange) GetWriteTableItem() *AptosWriteTableItem {
	if x, ok := x.GetChange().(*AptosWriteSetChange_WriteTableItem); ok {
		return x.WriteTableItem
	}
	return nil
}

type isAptosWriteSetChange_Change interface {
	isAptosWriteSetChange_Change()
}

type AptosWriteSetChange_DeleteModule struct {
	DeleteModule *AptosDeleteModule `protobuf:"bytes,100,opt,name=delete_module,json=deleteModule,proto3,oneof"`
}

type AptosWriteSetChange_DeleteResource struct {
	DeleteResource *AptosDeleteResource `protobuf:"bytes,101,opt,name=delete_resource,json=deleteResource,proto3,oneof"`
}

type AptosWriteSetChange_DeleteTableItem struct {
	DeleteTableItem *AptosDeleteTableItem `protobuf:"bytes,102,opt,name=delete_table_item,json=deleteTableItem,proto3,oneof"`
}

type AptosWriteSetChange_WriteModule struct {
	WriteModule *AptosWriteModule `protobuf:"bytes,103,opt,name=write_module,json=writeModule,proto3,oneof"`
}

type AptosWriteSetChange_WriteResource struct {
	WriteResource *AptosWriteResource `protobuf:"bytes,104,opt,name=write_resource,json=writeResource,proto3,oneof"`
}

type AptosWriteSetChange_WriteTableItem struct {
	WriteTableItem *AptosWriteTableItem `protobuf:"bytes,105,opt,name=write_table_item,json=writeTableItem,proto3,oneof"`
}

func (*AptosWriteSetChange_DeleteModule) isAptosWriteSetChange_Change() {}

func (*AptosWriteSetChange_DeleteResource) isAptosWriteSetChange_Change() {}

func (*AptosWriteSetChange_DeleteTableItem) isAptosWriteSetChange_Change() {}

func (*AptosWriteSetChange_WriteModule) isAptosWriteSetChange_Change() {}

func (*AptosWriteSetChange_WriteResource) isAptosWriteSetChange_Change() {}

func (*AptosWriteSetChange_WriteTableItem) isAptosWriteSetChange_Change() {}

type AptosDeleteModule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address      string             `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	StateKeyHash string             `protobuf:"bytes,2,opt,name=state_key_hash,json=stateKeyHash,proto3" json:"state_key_hash,omitempty"`
	Module       *AptosMoveModuleId `protobuf:"bytes,3,opt,name=module,proto3" json:"module,omitempty"`
}

func (x *AptosDeleteModule) Reset() {
	*x = AptosDeleteModule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_aptos_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AptosDeleteModule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AptosDeleteModule) ProtoMessage() {}

func (x *AptosDeleteModule) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_aptos_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AptosDeleteModule.ProtoReflect.Descriptor instead.
func (*AptosDeleteModule) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_aptos_proto_rawDescGZIP(), []int{6}
}

func (x *AptosDeleteModule) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *AptosDeleteModule) GetStateKeyHash() string {
	if x != nil {
		return x.StateKeyHash
	}
	return ""
}

func (x *AptosDeleteModule) GetModule() *AptosMoveModuleId {
	if x != nil {
		return x.Module
	}
	return nil
}

type AptosDeleteResource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address      string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	StateKeyHash string `protobuf:"bytes,2,opt,name=state_key_hash,json=stateKeyHash,proto3" json:"state_key_hash,omitempty"`
	Resource     string `protobuf:"bytes,3,opt,name=resource,proto3" json:"resource,omitempty"`
}

func (x *AptosDeleteResource) Reset() {
	*x = AptosDeleteResource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_aptos_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AptosDeleteResource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AptosDeleteResource) ProtoMessage() {}

func (x *AptosDeleteResource) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_aptos_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AptosDeleteResource.ProtoReflect.Descriptor instead.
func (*AptosDeleteResource) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_aptos_proto_rawDescGZIP(), []int{7}
}

func (x *AptosDeleteResource) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *AptosDeleteResource) GetStateKeyHash() string {
	if x != nil {
		return x.StateKeyHash
	}
	return ""
}

func (x *AptosDeleteResource) GetResource() string {
	if x != nil {
		return x.Resource
	}
	return ""
}

type AptosDeleteTableItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StateKeyHash string                `protobuf:"bytes,1,opt,name=state_key_hash,json=stateKeyHash,proto3" json:"state_key_hash,omitempty"`
	Handle       string                `protobuf:"bytes,2,opt,name=handle,proto3" json:"handle,omitempty"`
	Key          string                `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	Data         *AptosDeleteTableData `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *AptosDeleteTableItem) Reset() {
	*x = AptosDeleteTableItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_aptos_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AptosDeleteTableItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AptosDeleteTableItem) ProtoMessage() {}

func (x *AptosDeleteTableItem) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_aptos_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AptosDeleteTableItem.ProtoReflect.Descriptor instead.
func (*AptosDeleteTableItem) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_aptos_proto_rawDescGZIP(), []int{8}
}

func (x *AptosDeleteTableItem) GetStateKeyHash() string {
	if x != nil {
		return x.StateKeyHash
	}
	return ""
}

func (x *AptosDeleteTableItem) GetHandle() string {
	if x != nil {
		return x.Handle
	}
	return ""
}

func (x *AptosDeleteTableItem) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *AptosDeleteTableItem) GetData() *AptosDeleteTableData {
	if x != nil {
		return x.Data
	}
	return nil
}

type AptosDeleteTableData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key     string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	KeyType string `protobuf:"bytes,2,opt,name=key_type,json=keyType,proto3" json:"key_type,omitempty"`
}

func (x *AptosDeleteTableData) Reset() {
	*x = AptosDeleteTableData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_aptos_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AptosDeleteTableData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AptosDeleteTableData) ProtoMessage() {}

func (x *AptosDeleteTableData) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_aptos_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AptosDeleteTableData.ProtoReflect.Descriptor instead.
func (*AptosDeleteTableData) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_aptos_proto_rawDescGZIP(), []int{9}
}

func (x *AptosDeleteTableData) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *AptosDeleteTableData) GetKeyType() string {
	if x != nil {
		return x.KeyType
	}
	return ""
}

type AptosWriteModule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address      string                   `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	StateKeyHash string                   `protobuf:"bytes,2,opt,name=state_key_hash,json=stateKeyHash,proto3" json:"state_key_hash,omitempty"`
	Data         *AptosMoveModuleBytecode `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *AptosWriteModule) Reset() {
	*x = AptosWriteModule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_aptos_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AptosWriteModule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AptosWriteModule) ProtoMessage() {}

func (x *AptosWriteModule) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_aptos_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AptosWriteModule.ProtoReflect.Descriptor instead.
func (*AptosWriteModule) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_aptos_proto_rawDescGZIP(), []int{10}
}

func (x *AptosWriteModule) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *AptosWriteModule) GetStateKeyHash() string {
	if x != nil {
		return x.StateKeyHash
	}
	return ""
}

func (x *AptosWriteModule) GetData() *AptosMoveModuleBytecode {
	if x != nil {
		return x.Data
	}
	return nil
}

type AptosWriteResource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address      string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	StateKeyHash string `protobuf:"bytes,2,opt,name=state_key_hash,json=stateKeyHash,proto3" json:"state_key_hash,omitempty"`
	TypeStr      string `protobuf:"bytes,3,opt,name=type_str,json=typeStr,proto3" json:"type_str,omitempty"`
	Data         string `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *AptosWriteResource) Reset() {
	*x = AptosWriteResource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_aptos_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AptosWriteResource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AptosWriteResource) ProtoMessage() {}

func (x *AptosWriteResource) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_aptos_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AptosWriteResource.ProtoReflect.Descriptor instead.
func (*AptosWriteResource) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_aptos_proto_rawDescGZIP(), []int{11}
}

func (x *AptosWriteResource) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *AptosWriteResource) GetStateKeyHash() string {
	if x != nil {
		return x.StateKeyHash
	}
	return ""
}

func (x *AptosWriteResource) GetTypeStr() string {
	if x != nil {
		return x.TypeStr
	}
	return ""
}

func (x *AptosWriteResource) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type AptosWriteTableItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StateKeyHash string                   `protobuf:"bytes,1,opt,name=state_key_hash,json=stateKeyHash,proto3" json:"state_key_hash,omitempty"`
	Handle       string                   `protobuf:"bytes,2,opt,name=handle,proto3" json:"handle,omitempty"`
	Key          string                   `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	Value        string                   `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
	Data         *AptosWriteTableItemData `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *AptosWriteTableItem) Reset() {
	*x = AptosWriteTableItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_aptos_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AptosWriteTableItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AptosWriteTableItem) ProtoMessage() {}

func (x *AptosWriteTableItem) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_aptos_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AptosWriteTableItem.ProtoReflect.Descriptor instead.
func (*AptosWriteTableItem) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_aptos_proto_rawDescGZIP(), []int{12}
}

func (x *AptosWriteTableItem) GetStateKeyHash() string {
	if x != nil {
		return x.StateKeyHash
	}
	return ""
}

func (x *AptosWriteTableItem) GetHandle() string {
	if x != nil {
		return x.Handle
	}
	return ""
}

func (x *AptosWriteTableItem) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *AptosWriteTableItem) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *AptosWriteTableItem) GetData() *AptosWriteTableItemData {
	if x != nil {
		return x.Data
	}
	return nil
}

type AptosWriteTableItemData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key       string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	KeyType   string `protobuf:"bytes,2,opt,name=key_type,json=keyType,proto3" json:"key_type,omitempty"`
	Value     string `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	ValueType string `protobuf:"bytes,4,opt,name=value_type,json=valueType,proto3" json:"value_type,omitempty"`
}

func (x *AptosWriteTableItemData) Reset() {
	*x = AptosWriteTableItemData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_aptos_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AptosWriteTableItemData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AptosWriteTableItemData) ProtoMessage() {}

func (x *AptosWriteTableItemData) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_aptos_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AptosWriteTableItemData.ProtoReflect.Descriptor instead.
func (*AptosWriteTableItemData) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_aptos_proto_rawDescGZIP(), []int{13}
}

func (x *AptosWriteTableItemData) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *AptosWriteTableItemData) GetKeyType() string {
	if x != nil {
		return x.KeyType
	}
	return ""
}

func (x *AptosWriteTableItemData) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *AptosWriteTableItemData) GetValueType() string {
	if x != nil {
		return x.ValueType
	}
	return ""
}

// Block metadata transaction.
type AptosBlockMetadataTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                       string        `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Epoch                    uint64        `protobuf:"varint,2,opt,name=epoch,proto3" json:"epoch,omitempty"`
	Round                    uint64        `protobuf:"varint,3,opt,name=round,proto3" json:"round,omitempty"`
	Events                   []*AptosEvent `protobuf:"bytes,4,rep,name=events,proto3" json:"events,omitempty"`
	PreviousBlockVotesBitvec []byte        `protobuf:"bytes,5,opt,name=previous_block_votes_bitvec,json=previousBlockVotesBitvec,proto3" json:"previous_block_votes_bitvec,omitempty"`
	Proposer                 string        `protobuf:"bytes,6,opt,name=proposer,proto3" json:"proposer,omitempty"`
	FailedProposerIndices    []uint32      `protobuf:"varint,7,rep,packed,name=failed_proposer_indices,json=failedProposerIndices,proto3" json:"failed_proposer_indices,omitempty"`
}

func (x *AptosBlockMetadataTransaction) Reset() {
	*x = AptosBlockMetadataTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_aptos_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AptosBlockMetadataTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AptosBlockMetadataTransaction) ProtoMessage() {}

func (x *AptosBlockMetadataTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_aptos_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AptosBlockMetadataTransaction.ProtoReflect.Descriptor instead.
func (*AptosBlockMetadataTransaction) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_aptos_proto_rawDescGZIP(), []int{14}
}

func (x *AptosBlockMetadataTransaction) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AptosBlockMetadataTransaction) GetEpoch() uint64 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *AptosBlockMetadataTransaction) GetRound() uint64 {
	if x != nil {
		return x.Round
	}
	return 0
}

func (x *AptosBlockMetadataTransaction) GetEvents() []*AptosEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *AptosBlockMetadataTransaction) GetPreviousBlockVotesBitvec() []byte {
	if x != nil {
		return x.PreviousBlockVotesBitvec
	}
	return nil
}

func (x *AptosBlockMetadataTransaction) GetProposer() string {
	if x != nil {
		return x.Proposer
	}
	return ""
}

func (x *AptosBlockMetadataTransaction) GetFailedProposerIndices() []uint32 {
	if x != nil {
		return x.FailedProposerIndices
	}
	return nil
}

type AptosEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key            *AptosEventKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	SequenceNumber uint64         `protobuf:"varint,2,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"`
	Type           string         `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	Data           string         `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *AptosEvent) Reset() {
	*x = AptosEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_aptos_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AptosEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AptosEvent) ProtoMessage() {}

func (x *AptosEvent) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_aptos_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AptosEvent.ProtoReflect.Descriptor instead.
func (*AptosEvent) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_aptos_proto_rawDescGZIP(), []int{15}
}

func (x *AptosEvent) GetKey() *AptosEventKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *AptosEvent) GetSequenceNumber() uint64 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

func (x *AptosEvent) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *AptosEvent) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type AptosEventKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreationNumber uint64 `protobuf:"varint,1,opt,name=creation_number,json=creationNumber,proto3" json:"creation_number,omitempty"`
	AccountAddress string `protobuf:"bytes,2,opt,name=account_address,json=accountAddress,proto3" json:"account_address,omitempty"`
}

func (x *AptosEventKey) Reset() {
	*x = AptosEventKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_aptos_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AptosEventKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AptosEventKey) ProtoMessage() {}

func (x *AptosEventKey) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_aptos_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AptosEventKey.ProtoReflect.Descriptor instead.
func (*AptosEventKey) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_aptos_proto_rawDescGZIP(), []int{16}
}

func (x *AptosEventKey) GetCreationNumber() uint64 {
	if x != nil {
		return x.CreationNumber
	}
	return 0
}

func (x *AptosEventKey) GetAccountAddress() string {
	if x != nil {
		return x.AccountAddress
	}
	return ""
}

// State checkpoint transaction.
// Note that this is an empty struct. All the information of state checkpoint transaction is in AptosTransactionInfo.
type AptosStateCheckpointTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AptosStateCheckpointTransaction) Reset() {
	*x = AptosStateCheckpointTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_aptos_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AptosStateCheckpointTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AptosStateCheckpointTransaction) ProtoMessage() {}

func (x *AptosStateCheckpointTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_aptos_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AptosStateCheckpointTransaction.ProtoReflect.Descriptor instead.
func (*AptosStateCheckpointTransaction) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_aptos_proto_rawDescGZIP(), []int{17}
}

// Genesis transaction.
type AptosGenesisTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Payload *AptosWriteSet `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	Events  []*AptosEvent  `protobuf:"bytes,2,rep,name=events,proto3" json:"events,omitempty"`
}

func (x *AptosGenesisTransaction) Reset() {
	*x = AptosGenesisTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_aptos_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AptosGenesisTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AptosGenesisTransaction) ProtoMessage() {}

func (x *AptosGenesisTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_aptos_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AptosGenesisTransaction.ProtoReflect.Descriptor instead.
func (*AptosGenesisTransaction) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_aptos_proto_rawDescGZIP(), []int{18}
}

func (x *AptosGenesisTransaction) GetPayload() *AptosWriteSet {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *AptosGenesisTransaction) GetEvents() []*AptosEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

type AptosWriteSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WriteSetType AptosWriteSet_Type `protobuf:"varint,1,opt,name=write_set_type,json=writeSetType,proto3,enum=coinbase.chainstorage.AptosWriteSet_Type" json:"write_set_type,omitempty"`
	// Types that are assignable to WriteSet:
	//
	//	*AptosWriteSet_ScriptWriteSet
	//	*AptosWriteSet_DirectWriteSet
	WriteSet isAptosWriteSet_WriteSet `protobuf_oneof:"write_set"`
}

func (x *AptosWriteSet) Reset() {
	*x = AptosWriteSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_aptos_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AptosWriteSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AptosWriteSet) ProtoMessage() {}

func (x *AptosWriteSet) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_aptos_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AptosWriteSet.ProtoReflect.Descriptor instead.
func (*AptosWriteSet) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_aptos_proto_rawDescGZIP(), []int{19}
}

func (x *AptosWriteSet) GetWriteSetType() AptosWriteSet_Type {
	if x != nil {
		return x.WriteSetType
	}
	return AptosWriteSet_UNSPECIFIED
}

func (m *AptosWriteSet) GetWriteSet() isAptosWriteSet_WriteSet {
	if m != nil {
		return m.WriteSet
	}
	return nil
}

func (x *AptosWriteSet) GetScriptWriteSet() *AptosScriptWriteSet {
	if x, ok := x.GetWriteSet().(*AptosWriteSet_ScriptWriteSet); ok {
		return x.ScriptWriteSet
	}
	return nil
}

func (x *AptosWriteSet) GetDirectWriteSet() *AptosDirectWriteSet {
	if x, ok := x.GetWriteSet().(*AptosWriteSet_DirectWriteSet); ok {
		return x.DirectWriteSet
	}
	return nil
}

type isAptosWriteSet_WriteSet interface {
	isAptosWriteSet_WriteSet()
}

type AptosWriteSet_ScriptWriteSet struct {
	ScriptWriteSet *AptosScriptWriteSet `protobuf:"bytes,100,opt,name=script_write_set,json=scriptWriteSet,proto3,oneof"`
}

type AptosWriteSet_DirectWriteSet struct {
	DirectWriteSet *AptosDirectWriteSet `protobuf:"bytes,101,opt,name=direct_write_set,json=directWriteSet,proto3,oneof"`
}

func (*AptosWriteSet_ScriptWriteSet) isAptosWriteSet_WriteSet() {}

func (*AptosWriteSet_DirectWriteSet) isAptosWriteSet_WriteSet() {}

type AptosScriptWriteSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExecuteAs string              `protobuf:"bytes,1,opt,name=execute_as,json=executeAs,proto3" json:"execute_as,omitempty"`
	Script    *AptosScriptPayload `protobuf:"bytes,2,opt,name=script,proto3" json:"script,omitempty"`
}

func (x *AptosScriptWriteSet) Reset() {
	*x = AptosScriptWriteSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_aptos_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AptosScriptWriteSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AptosScriptWriteSet) ProtoMessage() {}

func (x *AptosScriptWriteSet) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_aptos_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AptosScriptWriteSet.ProtoReflect.Descriptor instead.
func (*AptosScriptWriteSet) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_aptos_proto_rawDescGZIP(), []int{20}
}

func (x *AptosScriptWriteSet) GetExecuteAs() string {
	if x != nil {
		return x.ExecuteAs
	}
	return ""
}

func (x *AptosScriptWriteSet) GetScript() *AptosScriptPayload {
	if x != nil {
		return x.Script
	}
	return nil
}

type AptosDirectWriteSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WriteSetChange []*AptosWriteSetChange `protobuf:"bytes,1,rep,name=write_set_change,json=writeSetChange,proto3" json:"write_set_change,omitempty"`
	Events         []*AptosEvent          `protobuf:"bytes,2,rep,name=events,proto3" json:"events,omitempty"`
}

func (x *AptosDirectWriteSet) Reset() {
	*x = AptosDirectWriteSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_aptos_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AptosDirectWriteSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AptosDirectWriteSet) ProtoMessage() {}

func (x *AptosDirectWriteSet) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_aptos_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AptosDirectWriteSet.ProtoReflect.Descriptor instead.
func (*AptosDirectWriteSet) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_aptos_proto_rawDescGZIP(), []int{21}
}

func (x *AptosDirectWriteSet) GetWriteSetChange() []*AptosWriteSetChange {
	if x != nil {
		return x.WriteSetChange
	}
	return nil
}

func (x *AptosDirectWriteSet) GetEvents() []*AptosEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

type AptosUserTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Request *AptosUserTransactionRequest `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
	Events  []*AptosEvent                `protobuf:"bytes,2,rep,name=events,proto3" json:"events,omitempty"`
}

func (x *AptosUserTransaction) Reset() {
	*x = AptosUserTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_aptos_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AptosUserTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AptosUserTransaction) ProtoMessage() {}

func (x *AptosUserTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_aptos_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AptosUserTransaction.ProtoReflect.Descriptor instead.
func (*AptosUserTransaction) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_aptos_proto_rawDescGZIP(), []int{22}
}

func (x *AptosUserTransaction) GetRequest() *AptosUserTransactionRequest {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *AptosUserTransaction) GetEvents() []*AptosEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

type AptosUserTransactionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sender                  string                   `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	SequenceNumber          uint64                   `protobuf:"varint,2,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"`
	MaxGasAmount            uint64                   `protobuf:"varint,3,opt,name=max_gas_amount,json=maxGasAmount,proto3" json:"max_gas_amount,omitempty"`
	GasUnitPrice            uint64                   `protobuf:"varint,4,opt,name=gas_unit_price,json=gasUnitPrice,proto3" json:"gas_unit_price,omitempty"`
	ExpirationTimestampSecs *timestamppb.Timestamp   `protobuf:"bytes,5,opt,name=expiration_timestamp_secs,json=expirationTimestampSecs,proto3" json:"expiration_timestamp_secs,omitempty"`
	Payload                 *AptosTransactionPayload `protobuf:"bytes,6,opt,name=payload,proto3" json:"payload,omitempty"`
	Signature               *AptosSignature          `protobuf:"bytes,7,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *AptosUserTransactionRequest) Reset() {
	*x = AptosUserTransactionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_aptos_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AptosUserTransactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AptosUserTransactionRequest) ProtoMessage() {}

func (x *AptosUserTransactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_aptos_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AptosUserTransactionRequest.ProtoReflect.Descriptor instead.
func (*AptosUserTransactionRequest) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_aptos_proto_rawDescGZIP(), []int{23}
}

func (x *AptosUserTransactionRequest) GetSender() string {
	if x != nil {
		return x.Sender
	}
	return ""
}

func (x *AptosUserTransactionRequest) GetSequenceNumber() uint64 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

func (x *AptosUserTransactionRequest) GetMaxGasAmount() uint64 {
	if x != nil {
		return x.MaxGasAmount
	}
	return 0
}

func (x *AptosUserTransactionRequest) GetGasUnitPrice() uint64 {
	if x != nil {
		return x.GasUnitPrice
	}
	return 0
}

func (x *AptosUserTransactionRequest) GetExpirationTimestampSecs() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpirationTimestampSecs
	}
	return nil
}

func (x *AptosUserTransactionRequest) GetPayload() *AptosTransactionPayload {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *AptosUserTransactionRequest) GetSignature() *AptosSignature {
	if x != nil {
		return x.Signature
	}
	return nil
}

type AptosTransactionPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type AptosTransactionPayload_Type `protobuf:"varint,1,opt,name=type,proto3,enum=coinbase.chainstorage.AptosTransactionPayload_Type" json:"type,omitempty"`
	// Types that are assignable to Payload:
	//
	//	*AptosTransactionPayload_EntryFunctionPayload
	//	*AptosTransactionPayload_ScriptPayload
	//	*AptosTransactionPayload_ModuleBundlePayload
	//	*AptosTransactionPayload_WriteSetPayload
	//	*AptosTransactionPayload_MultisigPayload
	Payload isAptosTransactionPayload_Payload `protobuf_oneof:"payload"`
}

func (x *AptosTransactionPayload) Reset() {
	*x = AptosTransactionPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_aptos_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AptosTransactionPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AptosTransactionPayload) ProtoMessage() {}

func (x *AptosTransactionPayload) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_aptos_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AptosTransactionPayload.ProtoReflect.Descriptor instead.
func (*AptosTransactionPayload) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_aptos_proto_rawDescGZIP(), []int{24}
}

func (x *AptosTransactionPayload) GetType() AptosTransactionPayload_Type {
	if x != nil {
		return x.Type
	}
	return AptosTransactionPayload_UNSPECIFIED
}

func (m *AptosTransactionPayload) GetPayload() isAptosTransactionPayload_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *AptosTransactionPayload) GetEntryFunctionPayload() *AptosEntryFunctionPayload {
	if x, ok := x.GetPayload().(*AptosTransactionPayload_EntryFunctionPayload); ok {
		return x.EntryFunctionPayload
	}
	return nil
}

func (x *AptosTransactionPayload) GetScriptPayload() *AptosScriptPayload {
	if x, ok := x.GetPayload().(*AptosTransactionPayload_ScriptPayload); ok {
		return x.ScriptPayload
	}
	return nil
}

func (x *AptosTransactionPayload) GetModuleBundlePayload() *AptosModuleBundlePayload {
	if x, ok := x.GetPayload().(*AptosTransactionPayload_ModuleBundlePayload); ok {
		return x.ModuleBundlePayload
	}
	return nil
}

func (x *AptosTransactionPayload) GetWriteSetPayload() *AptosWriteSetPayload {
	if x, ok := x.GetPayload().(*AptosTransactionPayload_WriteSetPayload); ok {
		return x.WriteSetPayload
	}
	return nil
}

func (x *AptosTransactionPayload) GetMultisigPayload() *AptosMultisigPayload {
	if x, ok := x.GetPayload().(*AptosTransactionPayload_MultisigPayload); ok {
		return x.MultisigPayload
	}
	return nil
}

type isAptosTransactionPayload_Payload interface {
	isAptosTransactionPayload_Payload()
}

type AptosTransactionPayload_EntryFunctionPayload struct {
	EntryFunctionPayload *AptosEntryFunctionPayload `protobuf:"bytes,100,opt,name=entry_function_payload,json=entryFunctionPayload,proto3,oneof"`
}

type AptosTransactionPayload_ScriptPayload struct {
	ScriptPayload *AptosScriptPayload `protobuf:"bytes,101,opt,name=script_payload,json=scriptPayload,proto3,oneof"`
}

type AptosTransactionPayload_ModuleBundlePayload struct {
	ModuleBundlePayload *AptosModuleBundlePayload `protobuf:"bytes,102,opt,name=module_bundle_payload,json=moduleBundlePayload,proto3,oneof"`
}

type AptosTransactionPayload_WriteSetPayload struct {
	WriteSetPayload *AptosWriteSetPayload `protobuf:"bytes,103,opt,name=write_set_payload,json=writeSetPayload,proto3,oneof"`
}

type AptosTransactionPayload_MultisigPayload struct {
	MultisigPayload *AptosMultisigPayload `protobuf:"bytes,104,opt,name=multisig_payload,json=multisigPayload,proto3,oneof"`
}

func (*AptosTransactionPayload_EntryFunctionPayload) isAptosTransactionPayload_Payload() {}

func (*AptosTransactionPayload_ScriptPayload) isAptosTransactionPayload_Payload() {}

func (*AptosTransactionPayload_ModuleBundlePayload) isAptosTransactionPayload_Payload() {}

func (*AptosTransactionPayload_WriteSetPayload) isAptosTransactionPayload_Payload() {}

func (*AptosTransactionPayload_MultisigPayload) isAptosTransactionPayload_Payload() {}

type AptosEntryFunctionPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Function      *AptosEntryFunctionId `protobuf:"bytes,1,opt,name=function,proto3" json:"function,omitempty"`
	TypeArguments []string              `protobuf:"bytes,2,rep,name=type_arguments,json=typeArguments,proto3" json:"type_arguments,omitempty"`
	Arguments     [][]byte              `protobuf:"bytes,3,rep,name=arguments,proto3" json:"arguments,omitempty"`
}

func (x *AptosEntryFunctionPayload) Reset() {
	*x = AptosEntryFunctionPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_aptos_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AptosEntryFunctionPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AptosEntryFunctionPayload) ProtoMessage() {}

func (x *AptosEntryFunctionPayload) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_aptos_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AptosEntryFunctionPayload.ProtoReflect.Descriptor instead.
func (*AptosEntryFunctionPayload) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_aptos_proto_rawDescGZIP(), []int{25}
}

func (x *AptosEntryFunctionPayload) GetFunction() *AptosEntryFunctionId {
	if x != nil {
		return x.Function
	}
	return nil
}

func (x *AptosEntryFunctionPayload) GetTypeArguments() []string {
	if x != nil {
		return x.TypeArguments
	}
	return nil
}

func (x *AptosEntryFunctionPayload) GetArguments() [][]byte {
	if x != nil {
		return x.Arguments
	}
	return nil
}

type AptosEntryFunctionId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Module       *AptosMoveModuleId `protobuf:"bytes,1,opt,name=module,proto3" json:"module,omitempty"`
	FunctionName string             `protobuf:"bytes,2,opt,name=function_name,json=functionName,proto3" json:"function_name,omitempty"`
}

func (x *AptosEntryFunctionId) Reset() {
	*x = AptosEntryFunctionId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_aptos_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AptosEntryFunctionId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AptosEntryFunctionId) ProtoMessage() {}

func (x *AptosEntryFunctionId) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_aptos_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AptosEntryFunctionId.ProtoReflect.Descriptor instead.
func (*AptosEntryFunctionId) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_aptos_proto_rawDescGZIP(), []int{26}
}

func (x *AptosEntryFunctionId) GetModule() *AptosMoveModuleId {
	if x != nil {
		return x.Module
	}
	return nil
}

func (x *AptosEntryFunctionId) GetFunctionName() string {
	if x != nil {
		return x.FunctionName
	}
	return ""
}

type AptosMoveModuleId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Name    string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *AptosMoveModuleId) Reset() {
	*x = AptosMoveModuleId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_aptos_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AptosMoveModuleId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AptosMoveModuleId) ProtoMessage() {}

func (x *AptosMoveModuleId) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_aptos_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AptosMoveModuleId.ProtoReflect.Descriptor instead.
func (*AptosMoveModuleId) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_aptos_proto_rawDescGZIP(), []int{27}
}

func (x *AptosMoveModuleId) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *AptosMoveModuleId) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type AptosScriptPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code          *AptosMoveScriptBytecode `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	TypeArguments []string                 `protobuf:"bytes,2,rep,name=type_arguments,json=typeArguments,proto3" json:"type_arguments,omitempty"`
	Arguments     [][]byte                 `protobuf:"bytes,3,rep,name=arguments,proto3" json:"arguments,omitempty"`
}

func (x *AptosScriptPayload) Reset() {
	*x = AptosScriptPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_aptos_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AptosScriptPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AptosScriptPayload) ProtoMessage() {}

func (x *AptosScriptPayload) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_aptos_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AptosScriptPayload.ProtoReflect.Descriptor instead.
func (*AptosScriptPayload) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_aptos_proto_rawDescGZIP(), []int{28}
}

func (x *AptosScriptPayload) GetCode() *AptosMoveScriptBytecode {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *AptosScriptPayload) GetTypeArguments() []string {
	if x != nil {
		return x.TypeArguments
	}
	return nil
}

func (x *AptosScriptPayload) GetArguments() [][]byte {
	if x != nil {
		return x.Arguments
	}
	return nil
}

type AptosMoveScriptBytecode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bytecode string             `protobuf:"bytes,1,opt,name=bytecode,proto3" json:"bytecode,omitempty"`
	Abi      *AptosMoveFunction `protobuf:"bytes,2,opt,name=abi,proto3" json:"abi,omitempty"`
}

func (x *AptosMoveScriptBytecode) Reset() {
	*x = AptosMoveScriptBytecode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_aptos_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AptosMoveScriptBytecode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AptosMoveScriptBytecode) ProtoMessage() {}

func (x *AptosMoveScriptBytecode) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_aptos_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AptosMoveScriptBytecode.ProtoReflect.Descriptor instead.
func (*AptosMoveScriptBytecode) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_aptos_proto_rawDescGZIP(), []int{29}
}

func (x *AptosMoveScriptBytecode) GetBytecode() string {
	if x != nil {
		return x.Bytecode
	}
	return ""
}

func (x *AptosMoveScriptBytecode) GetAbi() *AptosMoveFunction {
	if x != nil {
		return x.Abi
	}
	return nil
}

type AptosMoveFunction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name              string                               `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Visibility        AptosMoveFunction_Type               `protobuf:"varint,2,opt,name=visibility,proto3,enum=coinbase.chainstorage.AptosMoveFunction_Type" json:"visibility,omitempty"`
	IsEntry           bool                                 `protobuf:"varint,3,opt,name=is_entry,json=isEntry,proto3" json:"is_entry,omitempty"`
	GenericTypeParams []*AptosMoveFunctionGenericTypeParam `protobuf:"bytes,4,rep,name=generic_type_params,json=genericTypeParams,proto3" json:"generic_type_params,omitempty"`
	Params            []string                             `protobuf:"bytes,5,rep,name=params,proto3" json:"params,omitempty"`
	Return            []string                             `protobuf:"bytes,6,rep,name=return,proto3" json:"return,omitempty"`
}

func (x *AptosMoveFunction) Reset() {
	*x = AptosMoveFunction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_aptos_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AptosMoveFunction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AptosMoveFunction) ProtoMessage() {}

func (x *AptosMoveFunction) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_aptos_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AptosMoveFunction.ProtoReflect.Descriptor instead.
func (*AptosMoveFunction) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_aptos_proto_rawDescGZIP(), []int{30}
}

func (x *AptosMoveFunction) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AptosMoveFunction) GetVisibility() AptosMoveFunction_Type {
	if x != nil {
		return x.Visibility
	}
	return AptosMoveFunction_UNSPECIFIED
}

func (x *AptosMoveFunction) GetIsEntry() bool {
	if x != nil {
		return x.IsEntry
	}
	return false
}

func (x *AptosMoveFunction) GetGenericTypeParams() []*AptosMoveFunctionGenericTypeParam {
	if x != nil {
		return x.GenericTypeParams
	}
	return nil
}

func (x *AptosMoveFunction) GetParams() []string {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *AptosMoveFunction) GetReturn() []string {
	if x != nil {
		return x.Return
	}
	return nil
}

type AptosMoveFunctionGenericTypeParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constraints []string `protobuf:"bytes,1,rep,name=constraints,proto3" json:"constraints,omitempty"`
}

func (x *AptosMoveFunctionGenericTypeParam) Reset() {
	*x = AptosMoveFunctionGenericTypeParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_aptos_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AptosMoveFunctionGenericTypeParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AptosMoveFunctionGenericTypeParam) ProtoMessage() {}

func (x *AptosMoveFunctionGenericTypeParam) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_aptos_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AptosMoveFunctionGenericTypeParam.ProtoReflect.Descriptor instead.
func (*AptosMoveFunctionGenericTypeParam) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_aptos_proto_rawDescGZIP(), []int{31}
}

func (x *AptosMoveFunctionGenericTypeParam) GetConstraints() []string {
	if x != nil {
		return x.Constraints
	}
	return nil
}

type AptosModuleBundlePayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Modules []*AptosMoveModuleBytecode `protobuf:"bytes,1,rep,name=modules,proto3" json:"modules,omitempty"`
}

func (x *AptosModuleBundlePayload) Reset() {
	*x = AptosModuleBundlePayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_aptos_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AptosModuleBundlePayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AptosModuleBundlePayload) ProtoMessage() {}

func (x *AptosModuleBundlePayload) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_aptos_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AptosModuleBundlePayload.ProtoReflect.Descriptor instead.
func (*AptosModuleBundlePayload) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_aptos_proto_rawDescGZIP(), []int{32}
}

func (x *AptosModuleBundlePayload) GetModules() []*AptosMoveModuleBytecode {
	if x != nil {
		return x.Modules
	}
	return nil
}

type AptosMoveModuleBytecode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bytecode string           `protobuf:"bytes,1,opt,name=bytecode,proto3" json:"bytecode,omitempty"`
	Abi      *AptosMoveModule `protobuf:"bytes,2,opt,name=abi,proto3" json:"abi,omitempty"`
}

func (x *AptosMoveModuleBytecode) Reset() {
	*x = AptosMoveModuleBytecode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_aptos_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AptosMoveModuleBytecode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AptosMoveModuleBytecode) ProtoMessage() {}

func (x *AptosMoveModuleBytecode) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_aptos_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AptosMoveModuleBytecode.ProtoReflect.Descriptor instead.
func (*AptosMoveModuleBytecode) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_aptos_proto_rawDescGZIP(), []int{33}
}

func (x *AptosMoveModuleBytecode) GetBytecode() string {
	if x != nil {
		return x.Bytecode
	}
	return ""
}

func (x *AptosMoveModuleBytecode) GetAbi() *AptosMoveModule {
	if x != nil {
		return x.Abi
	}
	return nil
}

type AptosMoveModule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address          string               `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Name             string               `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Friends          []*AptosMoveModuleId `protobuf:"bytes,3,rep,name=friends,proto3" json:"friends,omitempty"`
	ExposedFunctions []*AptosMoveFunction `protobuf:"bytes,4,rep,name=exposed_functions,json=exposedFunctions,proto3" json:"exposed_functions,omitempty"`
	Structs          []*AptosMoveStruct   `protobuf:"bytes,5,rep,name=structs,proto3" json:"structs,omitempty"`
}

func (x *AptosMoveModule) Reset() {
	*x = AptosMoveModule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_aptos_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AptosMoveModule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AptosMoveModule) ProtoMessage() {}

func (x *AptosMoveModule) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_aptos_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AptosMoveModule.ProtoReflect.Descriptor instead.
func (*AptosMoveModule) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_aptos_proto_rawDescGZIP(), []int{34}
}

func (x *AptosMoveModule) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *AptosMoveModule) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AptosMoveModule) GetFriends() []*AptosMoveModuleId {
	if x != nil {
		return x.Friends
	}
	return nil
}

func (x *AptosMoveModule) GetExposedFunctions() []*AptosMoveFunction {
	if x != nil {
		return x.ExposedFunctions
	}
	return nil
}

func (x *AptosMoveModule) GetStructs() []*AptosMoveStruct {
	if x != nil {
		return x.Structs
	}
	return nil
}

type AptosMoveStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name              string                             `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	IsNative          bool                               `protobuf:"varint,2,opt,name=is_native,json=isNative,proto3" json:"is_native,omitempty"`
	Abilities         []string                           `protobuf:"bytes,3,rep,name=abilities,proto3" json:"abilities,omitempty"`
	GenericTypeParams []*AptosMoveStructGenericTypeParam `protobuf:"bytes,4,rep,name=generic_type_params,json=genericTypeParams,proto3" json:"generic_type_params,omitempty"`
	Fields            []*AptosMoveStructField            `protobuf:"bytes,5,rep,name=fields,proto3" json:"fields,omitempty"`
}

func (x *AptosMoveStruct) Reset() {
	*x = AptosMoveStruct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_aptos_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AptosMoveStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AptosMoveStruct) ProtoMessage() {}

func (x *AptosMoveStruct) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_aptos_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AptosMoveStruct.ProtoReflect.Descriptor instead.
func (*AptosMoveStruct) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_aptos_proto_rawDescGZIP(), []int{35}
}

func (x *AptosMoveStruct) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AptosMoveStruct) GetIsNative() bool {
	if x != nil {
		return x.IsNative
	}
	return false
}

func (x *AptosMoveStruct) GetAbilities() []string {
	if x != nil {
		return x.Abilities
	}
	return nil
}

func (x *AptosMoveStruct) GetGenericTypeParams() []*AptosMoveStructGenericTypeParam {
	if x != nil {
		return x.GenericTypeParams
	}
	return nil
}

func (x *AptosMoveStruct) GetFields() []*AptosMoveStructField {
	if x != nil {
		return x.Fields
	}
	return nil
}

type AptosMoveStructGenericTypeParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constraints []string `protobuf:"bytes,1,rep,name=constraints,proto3" json:"constraints,omitempty"`
}

func (x *AptosMoveStructGenericTypeParam) Reset() {
	*x = AptosMoveStructGenericTypeParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_aptos_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AptosMoveStructGenericTypeParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AptosMoveStructGenericTypeParam) ProtoMessage() {}

func (x *AptosMoveStructGenericTypeParam) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_aptos_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AptosMoveStructGenericTypeParam.ProtoReflect.Descriptor instead.
func (*AptosMoveStructGenericTypeParam) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_aptos_proto_rawDescGZIP(), []int{36}
}

func (x *AptosMoveStructGenericTypeParam) GetConstraints() []string {
	if x != nil {
		return x.Constraints
	}
	return nil
}

type AptosMoveStructField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *AptosMoveStructField) Reset() {
	*x = AptosMoveStructField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_aptos_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AptosMoveStructField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AptosMoveStructField) ProtoMessage() {}

func (x *AptosMoveStructField) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_aptos_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AptosMoveStructField.ProtoReflect.Descriptor instead.
func (*AptosMoveStructField) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_aptos_proto_rawDescGZIP(), []int{37}
}

func (x *AptosMoveStructField) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AptosMoveStructField) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type AptosWriteSetPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WriteSet *AptosWriteSet `protobuf:"bytes,1,opt,name=write_set,json=writeSet,proto3" json:"write_set,omitempty"`
}

func (x *AptosWriteSetPayload) Reset() {
	*x = AptosWriteSetPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_aptos_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AptosWriteSetPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AptosWriteSetPayload) ProtoMessage() {}

func (x *AptosWriteSetPayload) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_aptos_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AptosWriteSetPayload.ProtoReflect.Descriptor instead.
func (*AptosWriteSetPayload) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_aptos_proto_rawDescGZIP(), []int{38}
}

func (x *AptosWriteSetPayload) GetWriteSet() *AptosWriteSet {
	if x != nil {
		return x.WriteSet
	}
	return nil
}

type AptosMultisigPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MultisigAddress string `protobuf:"bytes,1,opt,name=multisig_address,json=multisigAddress,proto3" json:"multisig_address,omitempty"`
	// Types that are assignable to OptionalTransactionPayload:
	//
	//	*AptosMultisigPayload_TransactionPayload
	OptionalTransactionPayload isAptosMultisigPayload_OptionalTransactionPayload `protobuf_oneof:"optional_transaction_payload"`
}

func (x *AptosMultisigPayload) Reset() {
	*x = AptosMultisigPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_aptos_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AptosMultisigPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AptosMultisigPayload) ProtoMessage() {}

func (x *AptosMultisigPayload) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_aptos_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AptosMultisigPayload.ProtoReflect.Descriptor instead.
func (*AptosMultisigPayload) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_aptos_proto_rawDescGZIP(), []int{39}
}

func (x *AptosMultisigPayload) GetMultisigAddress() string {
	if x != nil {
		return x.MultisigAddress
	}
	return ""
}

func (m *AptosMultisigPayload) GetOptionalTransactionPayload() isAptosMultisigPayload_OptionalTransactionPayload {
	if m != nil {
		return m.OptionalTransactionPayload
	}
	return nil
}

func (x *AptosMultisigPayload) GetTransactionPayload() *AptosMultisigTransactionPayload {
	if x, ok := x.GetOptionalTransactionPayload().(*AptosMultisigPayload_TransactionPayload); ok {
		return x.TransactionPayload
	}
	return nil
}

type isAptosMultisigPayload_OptionalTransactionPayload interface {
	isAptosMultisigPayload_OptionalTransactionPayload()
}

type AptosMultisigPayload_TransactionPayload struct {
	TransactionPayload *AptosMultisigTransactionPayload `protobuf:"bytes,2,opt,name=transaction_payload,json=transactionPayload,proto3,oneof"`
}

func (*AptosMultisigPayload_TransactionPayload) isAptosMultisigPayload_OptionalTransactionPayload() {}

type AptosMultisigTransactionPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type AptosMultisigTransactionPayload_Type `protobuf:"varint,1,opt,name=type,proto3,enum=coinbase.chainstorage.AptosMultisigTransactionPayload_Type" json:"type,omitempty"`
	// Types that are assignable to Payload:
	//
	//	*AptosMultisigTransactionPayload_EntryFunctionPayload
	Payload isAptosMultisigTransactionPayload_Payload `protobuf_oneof:"payload"`
}

func (x *AptosMultisigTransactionPayload) Reset() {
	*x = AptosMultisigTransactionPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_aptos_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AptosMultisigTransactionPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AptosMultisigTransactionPayload) ProtoMessage() {}

func (x *AptosMultisigTransactionPayload) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_aptos_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AptosMultisigTransactionPayload.ProtoReflect.Descriptor instead.
func (*AptosMultisigTransactionPayload) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_aptos_proto_rawDescGZIP(), []int{40}
}

func (x *AptosMultisigTransactionPayload) GetType() AptosMultisigTransactionPayload_Type {
	if x != nil {
		return x.Type
	}
	return AptosMultisigTransactionPayload_UNSPECIFIED
}

func (m *AptosMultisigTransactionPayload) GetPayload() isAptosMultisigTransactionPayload_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *AptosMultisigTransactionPayload) GetEntryFunctionPayload() *AptosEntryFunctionPayload {
	if x, ok := x.GetPayload().(*AptosMultisigTransactionPayload_EntryFunctionPayload); ok {
		return x.EntryFunctionPayload
	}
	return nil
}

type isAptosMultisigTransactionPayload_Payload interface {
	isAptosMultisigTransactionPayload_Payload()
}

type AptosMultisigTransactionPayload_EntryFunctionPayload struct {
	EntryFunctionPayload *AptosEntryFunctionPayload `protobuf:"bytes,100,opt,name=entry_function_payload,json=entryFunctionPayload,proto3,oneof"`
}

func (*AptosMultisigTransactionPayload_EntryFunctionPayload) isAptosMultisigTransactionPayload_Payload() {
}

type AptosSignature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type AptosSignature_Type `protobuf:"varint,1,opt,name=type,proto3,enum=coinbase.chainstorage.AptosSignature_Type" json:"type,omitempty"`
	// Types that are assignable to Signature:
	//
	//	*AptosSignature_Ed25519
	//	*AptosSignature_MultiEd25519
	//	*AptosSignature_MultiAgent
	//	*AptosSignature_FeePayer
	Signature isAptosSignature_Signature `protobuf_oneof:"signature"`
}

func (x *AptosSignature) Reset() {
	*x = AptosSignature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_aptos_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AptosSignature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AptosSignature) ProtoMessage() {}

func (x *AptosSignature) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_aptos_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AptosSignature.ProtoReflect.Descriptor instead.
func (*AptosSignature) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_aptos_proto_rawDescGZIP(), []int{41}
}

func (x *AptosSignature) GetType() AptosSignature_Type {
	if x != nil {
		return x.Type
	}
	return AptosSignature_UNSPECIFIED
}

func (m *AptosSignature) GetSignature() isAptosSignature_Signature {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (x *AptosSignature) GetEd25519() *AptosEd25519Signature {
	if x, ok := x.GetSignature().(*AptosSignature_Ed25519); ok {
		return x.Ed25519
	}
	return nil
}

func (x *AptosSignature) GetMultiEd25519() *AptosMultiEd25519Signature {
	if x, ok := x.GetSignature().(*AptosSignature_MultiEd25519); ok {
		return x.MultiEd25519
	}
	return nil
}

func (x *AptosSignature) GetMultiAgent() *AptosMultiAgentSignature {
	if x, ok := x.GetSignature().(*AptosSignature_MultiAgent); ok {
		return x.MultiAgent
	}
	return nil
}

func (x *AptosSignature) GetFeePayer() *AptosFeePayerSignature {
	if x, ok := x.GetSignature().(*AptosSignature_FeePayer); ok {
		return x.FeePayer
	}
	return nil
}

type isAptosSignature_Signature interface {
	isAptosSignature_Signature()
}

type AptosSignature_Ed25519 struct {
	Ed25519 *AptosEd25519Signature `protobuf:"bytes,2,opt,name=ed25519,proto3,oneof"`
}

type AptosSignature_MultiEd25519 struct {
	MultiEd25519 *AptosMultiEd25519Signature `protobuf:"bytes,3,opt,name=multi_ed25519,json=multiEd25519,proto3,oneof"`
}

type AptosSignature_MultiAgent struct {
	MultiAgent *AptosMultiAgentSignature `protobuf:"bytes,4,opt,name=multi_agent,json=multiAgent,proto3,oneof"`
}

type AptosSignature_FeePayer struct {
	FeePayer *AptosFeePayerSignature `protobuf:"bytes,5,opt,name=fee_payer,json=feePayer,proto3,oneof"`
}

func (*AptosSignature_Ed25519) isAptosSignature_Signature() {}

func (*AptosSignature_MultiEd25519) isAptosSignature_Signature() {}

func (*AptosSignature_MultiAgent) isAptosSignature_Signature() {}

func (*AptosSignature_FeePayer) isAptosSignature_Signature() {}

type AptosEd25519Signature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublicKey string `protobuf:"bytes,1,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	Signature string `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *AptosEd25519Signature) Reset() {
	*x = AptosEd25519Signature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_aptos_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AptosEd25519Signature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AptosEd25519Signature) ProtoMessage() {}

func (x *AptosEd25519Signature) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_aptos_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AptosEd25519Signature.ProtoReflect.Descriptor instead.
func (*AptosEd25519Signature) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_aptos_proto_rawDescGZIP(), []int{42}
}

func (x *AptosEd25519Signature) GetPublicKey() string {
	if x != nil {
		return x.PublicKey
	}
	return ""
}

func (x *AptosEd25519Signature) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

type AptosMultiEd25519Signature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublicKeys       []string `protobuf:"bytes,1,rep,name=public_keys,json=publicKeys,proto3" json:"public_keys,omitempty"`
	Signatures       []string `protobuf:"bytes,2,rep,name=signatures,proto3" json:"signatures,omitempty"`
	Threshold        uint32   `protobuf:"varint,3,opt,name=threshold,proto3" json:"threshold,omitempty"`
	PublicKeyIndices string   `protobuf:"bytes,4,opt,name=public_key_indices,json=publicKeyIndices,proto3" json:"public_key_indices,omitempty"`
}

func (x *AptosMultiEd25519Signature) Reset() {
	*x = AptosMultiEd25519Signature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_aptos_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AptosMultiEd25519Signature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AptosMultiEd25519Signature) ProtoMessage() {}

func (x *AptosMultiEd25519Signature) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_aptos_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AptosMultiEd25519Signature.ProtoReflect.Descriptor instead.
func (*AptosMultiEd25519Signature) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_aptos_proto_rawDescGZIP(), []int{43}
}

func (x *AptosMultiEd25519Signature) GetPublicKeys() []string {
	if x != nil {
		return x.PublicKeys
	}
	return nil
}

func (x *AptosMultiEd25519Signature) GetSignatures() []string {
	if x != nil {
		return x.Signatures
	}
	return nil
}

func (x *AptosMultiEd25519Signature) GetThreshold() uint32 {
	if x != nil {
		return x.Threshold
	}
	return 0
}

func (x *AptosMultiEd25519Signature) GetPublicKeyIndices() string {
	if x != nil {
		return x.PublicKeyIndices
	}
	return ""
}

type AptosMultiAgentSignature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sender                   *AptosAccountSignature   `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	SecondarySignerAddresses []string                 `protobuf:"bytes,2,rep,name=secondary_signer_addresses,json=secondarySignerAddresses,proto3" json:"secondary_signer_addresses,omitempty"`
	SecondarySigners         []*AptosAccountSignature `protobuf:"bytes,3,rep,name=secondary_signers,json=secondarySigners,proto3" json:"secondary_signers,omitempty"`
}

func (x *AptosMultiAgentSignature) Reset() {
	*x = AptosMultiAgentSignature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_aptos_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AptosMultiAgentSignature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AptosMultiAgentSignature) ProtoMessage() {}

func (x *AptosMultiAgentSignature) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_aptos_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AptosMultiAgentSignature.ProtoReflect.Descriptor instead.
func (*AptosMultiAgentSignature) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_aptos_proto_rawDescGZIP(), []int{44}
}

func (x *AptosMultiAgentSignature) GetSender() *AptosAccountSignature {
	if x != nil {
		return x.Sender
	}
	return nil
}

func (x *AptosMultiAgentSignature) GetSecondarySignerAddresses() []string {
	if x != nil {
		return x.SecondarySignerAddresses
	}
	return nil
}

func (x *AptosMultiAgentSignature) GetSecondarySigners() []*AptosAccountSignature {
	if x != nil {
		return x.SecondarySigners
	}
	return nil
}

type AptosFeePayerSignature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sender                   *AptosAccountSignature   `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	SecondarySignerAddresses []string                 `protobuf:"bytes,2,rep,name=secondary_signer_addresses,json=secondarySignerAddresses,proto3" json:"secondary_signer_addresses,omitempty"`
	SecondarySigners         []*AptosAccountSignature `protobuf:"bytes,3,rep,name=secondary_signers,json=secondarySigners,proto3" json:"secondary_signers,omitempty"`
	FeePayerSigner           *AptosAccountSignature   `protobuf:"bytes,4,opt,name=fee_payer_signer,json=feePayerSigner,proto3" json:"fee_payer_signer,omitempty"`
	FeePayerAddress          string                   `protobuf:"bytes,5,opt,name=fee_payer_address,json=feePayerAddress,proto3" json:"fee_payer_address,omitempty"`
}

func (x *AptosFeePayerSignature) Reset() {
	*x = AptosFeePayerSignature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_aptos_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AptosFeePayerSignature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AptosFeePayerSignature) ProtoMessage() {}

func (x *AptosFeePayerSignature) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_aptos_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AptosFeePayerSignature.ProtoReflect.Descriptor instead.
func (*AptosFeePayerSignature) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_aptos_proto_rawDescGZIP(), []int{45}
}

func (x *AptosFeePayerSignature) GetSender() *AptosAccountSignature {
	if x != nil {
		return x.Sender
	}
	return nil
}

func (x *AptosFeePayerSignature) GetSecondarySignerAddresses() []string {
	if x != nil {
		return x.SecondarySignerAddresses
	}
	return nil
}

func (x *AptosFeePayerSignature) GetSecondarySigners() []*AptosAccountSignature {
	if x != nil {
		return x.SecondarySigners
	}
	return nil
}

func (x *AptosFeePayerSignature) GetFeePayerSigner() *AptosAccountSignature {
	if x != nil {
		return x.FeePayerSigner
	}
	return nil
}

func (x *AptosFeePayerSignature) GetFeePayerAddress() string {
	if x != nil {
		return x.FeePayerAddress
	}
	return ""
}

type AptosAccountSignature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type AptosAccountSignature_Type `protobuf:"varint,1,opt,name=type,proto3,enum=coinbase.chainstorage.AptosAccountSignature_Type" json:"type,omitempty"`
	// Types that are assignable to Signature:
	//
	//	*AptosAccountSignature_Ed25519
	//	*AptosAccountSignature_MultiEd25519
	//	*AptosAccountSignature_FeePayer
	Signature isAptosAccountSignature_Signature `protobuf_oneof:"signature"`
}

func (x *AptosAccountSignature) Reset() {
	*x = AptosAccountSignature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_aptos_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AptosAccountSignature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AptosAccountSignature) ProtoMessage() {}

func (x *AptosAccountSignature) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_aptos_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AptosAccountSignature.ProtoReflect.Descriptor instead.
func (*AptosAccountSignature) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_aptos_proto_rawDescGZIP(), []int{46}
}

func (x *AptosAccountSignature) GetType() AptosAccountSignature_Type {
	if x != nil {
		return x.Type
	}
	return AptosAccountSignature_UNSPECIFIED
}

func (m *AptosAccountSignature) GetSignature() isAptosAccountSignature_Signature {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (x *AptosAccountSignature) GetEd25519() *AptosEd25519Signature {
	if x, ok := x.GetSignature().(*AptosAccountSignature_Ed25519); ok {
		return x.Ed25519
	}
	return nil
}

func (x *AptosAccountSignature) GetMultiEd25519() *AptosMultiEd25519Signature {
	if x, ok := x.GetSignature().(*AptosAccountSignature_MultiEd25519); ok {
		return x.MultiEd25519
	}
	return nil
}

func (x *AptosAccountSignature) GetFeePayer() *AptosFeePayerSignature {
	if x, ok := x.GetSignature().(*AptosAccountSignature_FeePayer); ok {
		return x.FeePayer
	}
	return nil
}

type isAptosAccountSignature_Signature interface {
	isAptosAccountSignature_Signature()
}

type AptosAccountSignature_Ed25519 struct {
	Ed25519 *AptosEd25519Signature `protobuf:"bytes,2,opt,name=ed25519,proto3,oneof"`
}

type AptosAccountSignature_MultiEd25519 struct {
	MultiEd25519 *AptosMultiEd25519Signature `protobuf:"bytes,3,opt,name=multi_ed25519,json=multiEd25519,proto3,oneof"`
}

type AptosAccountSignature_FeePayer struct {
	FeePayer *AptosFeePayerSignature `protobuf:"bytes,4,opt,name=fee_payer,json=feePayer,proto3,oneof"`
}

func (*AptosAccountSignature_Ed25519) isAptosAccountSignature_Signature() {}

func (*AptosAccountSignature_MultiEd25519) isAptosAccountSignature_Signature() {}

func (*AptosAccountSignature_FeePayer) isAptosAccountSignature_Signature() {}

var File_coinbase_chainstorage_blockchain_aptos_proto protoreflect.FileDescriptor

var file_coinbase_chainstorage_blockchain_aptos_proto_rawDesc = []byte{
	0x0a, 0x2c, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x5f, 0x61, 0x70, 0x74, 0x6f, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x15,
	0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x25, 0x0a, 0x0d, 0x41, 0x70, 0x74, 0x6f, 0x73, 0x42,
	0x6c, 0x6f, 0x62, 0x64, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x95, 0x01,
	0x0a, 0x0a, 0x41, 0x70, 0x74, 0x6f, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x3a, 0x0a, 0x06,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63,
	0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x41, 0x70, 0x74, 0x6f, 0x73, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x4b, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x41, 0x70, 0x74, 0x6f, 0x73, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x8a, 0x01, 0x0a, 0x0b, 0x41, 0x70, 0x74, 0x6f, 0x73, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x39, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x69,
	0x6d, 0x65, 0x22, 0xdb, 0x05, 0x0a, 0x10, 0x41, 0x70, 0x74, 0x6f, 0x73, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x3f,
	0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63,
	0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x41, 0x70, 0x74, 0x6f, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12,
	0x4b, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e,
	0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x41, 0x70, 0x74, 0x6f, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x5d, 0x0a, 0x0e,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x64,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x41, 0x70, 0x74,
	0x6f, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0d, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x4a, 0x0a, 0x07, 0x67,
	0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63,
	0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x41, 0x70, 0x74, 0x6f, 0x73, 0x47, 0x65, 0x6e, 0x65, 0x73, 0x69,
	0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x07,
	0x67, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x12, 0x63, 0x0a, 0x10, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x66, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x36, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x41, 0x70, 0x74, 0x6f, 0x73, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x41, 0x0a, 0x04,
	0x75, 0x73, 0x65, 0x72, 0x18, 0x67, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x69,
	0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x2e, 0x41, 0x70, 0x74, 0x6f, 0x73, 0x55, 0x73, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x22,
	0x63, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x47, 0x45, 0x4e, 0x45, 0x53, 0x49, 0x53, 0x10, 0x01,
	0x12, 0x12, 0x0a, 0x0e, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x4d, 0x45, 0x54, 0x41, 0x44, 0x41,
	0x54, 0x41, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x48,
	0x45, 0x43, 0x4b, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x55, 0x53,
	0x45, 0x52, 0x10, 0x04, 0x42, 0x0a, 0x0a, 0x08, 0x74, 0x78, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x22, 0xa2, 0x03, 0x0a, 0x14, 0x41, 0x70, 0x74, 0x6f, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x2a, 0x0a,
	0x11, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x68, 0x61,
	0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x26, 0x0a, 0x0f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x6f, 0x74, 0x48, 0x61, 0x73,
	0x68, 0x12, 0x34, 0x0a, 0x15, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x13, 0x73, 0x74, 0x61, 0x74, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x61, 0x73, 0x5f, 0x75,
	0x73, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x67, 0x61, 0x73, 0x55, 0x73,
	0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x1b, 0x0a, 0x09,
	0x76, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x76, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x61, 0x63, 0x63,
	0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x68, 0x61,
	0x73, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x61, 0x63, 0x63, 0x75, 0x6d, 0x75,
	0x6c, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x6f, 0x6f, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x44, 0x0a,
	0x07, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x41, 0x70, 0x74, 0x6f, 0x73, 0x57, 0x72, 0x69, 0x74,
	0x65, 0x53, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x73, 0x42, 0x20, 0x0a, 0x1e, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x5f, 0x68, 0x61, 0x73, 0x68, 0x22, 0xf6, 0x05, 0x0a, 0x13, 0x41, 0x70, 0x74, 0x6f, 0x73, 0x57,
	0x72, 0x69, 0x74, 0x65, 0x53, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x43, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x63, 0x6f,
	0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2e, 0x41, 0x70, 0x74, 0x6f, 0x73, 0x57, 0x72, 0x69, 0x74, 0x65, 0x53, 0x65,
	0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x4f, 0x0a, 0x0d, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x69, 0x6e,
	0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x2e, 0x41, 0x70, 0x74, 0x6f, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x12, 0x55, 0x0a, 0x0f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63,
	0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x41, 0x70, 0x74, 0x6f, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x59, 0x0a, 0x11, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x18,
	0x66, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65,
	0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x41, 0x70,
	0x74, 0x6f, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x74,
	0x65, 0x6d, 0x48, 0x00, 0x52, 0x0f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x4c, 0x0a, 0x0c, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x67, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f,
	0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2e, 0x41, 0x70, 0x74, 0x6f, 0x73, 0x57, 0x72, 0x69, 0x74, 0x65, 0x4d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x77, 0x72, 0x69, 0x74, 0x65, 0x4d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x12, 0x52, 0x0a, 0x0e, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x68, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6f,
	0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2e, 0x41, 0x70, 0x74, 0x6f, 0x73, 0x57, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x77, 0x72, 0x69, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x56, 0x0a, 0x10, 0x77, 0x72, 0x69, 0x74, 0x65,
	0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x69, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x41, 0x70, 0x74, 0x6f, 0x73, 0x57,
	0x72, 0x69, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x48, 0x00, 0x52,
	0x0e, 0x77, 0x72, 0x69, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x22,
	0x92, 0x01, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x44, 0x45, 0x4c,
	0x45, 0x54, 0x45, 0x5f, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f,
	0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x10,
	0x02, 0x12, 0x15, 0x0a, 0x11, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x54, 0x41, 0x42, 0x4c,
	0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x57, 0x52, 0x49, 0x54,
	0x45, 0x5f, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x57, 0x52,
	0x49, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x10, 0x05, 0x12, 0x14,
	0x0a, 0x10, 0x57, 0x52, 0x49, 0x54, 0x45, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x49, 0x54,
	0x45, 0x4d, 0x10, 0x06, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x22, 0x95,
	0x01, 0x0a, 0x11, 0x41, 0x70, 0x74, 0x6f, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x24,
	0x0a, 0x0e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x68, 0x61, 0x73, 0x68,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79,
	0x48, 0x61, 0x73, 0x68, 0x12, 0x40, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x41, 0x70, 0x74,
	0x6f, 0x73, 0x4d, 0x6f, 0x76, 0x65, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x52, 0x06,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x22, 0x71, 0x0a, 0x13, 0x41, 0x70, 0x74, 0x6f, 0x73, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x73, 0x74, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1a, 0x0a,
	0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0xa7, 0x01, 0x0a, 0x14, 0x41, 0x70,
	0x74, 0x6f, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x74,
	0x65, 0x6d, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x5f,
	0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x4b, 0x65, 0x79, 0x48, 0x61, 0x73, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x61, 0x6e, 0x64,
	0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x3f, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x41, 0x70, 0x74, 0x6f, 0x73, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0x43, 0x0a, 0x14, 0x41, 0x70, 0x74, 0x6f, 0x73, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x19, 0x0a,
	0x08, 0x6b, 0x65, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x22, 0x96, 0x01, 0x0a, 0x10, 0x41, 0x70, 0x74,
	0x6f, 0x73, 0x57, 0x72, 0x69, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x73, 0x74, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x48, 0x61, 0x73, 0x68, 0x12, 0x42, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6f,
	0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2e, 0x41, 0x70, 0x74, 0x6f, 0x73, 0x4d, 0x6f, 0x76, 0x65, 0x4d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x42, 0x79, 0x74, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x83, 0x01, 0x0a, 0x12, 0x41, 0x70, 0x74, 0x6f, 0x73, 0x57, 0x72, 0x69, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x5f,
	0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x4b, 0x65, 0x79, 0x48, 0x61, 0x73, 0x68, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x73, 0x74, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x79, 0x70, 0x65,
	0x53, 0x74, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xbf, 0x01, 0x0a, 0x13, 0x41, 0x70, 0x74, 0x6f,
	0x73, 0x57, 0x72, 0x69, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12,
	0x24, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x68, 0x61, 0x73,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x65, 0x4b, 0x65,
	0x79, 0x48, 0x61, 0x73, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x42, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x41, 0x70, 0x74, 0x6f,
	0x73, 0x57, 0x72, 0x69, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x7b, 0x0a, 0x17, 0x41, 0x70, 0x74,
	0x6f, 0x73, 0x57, 0x72, 0x69, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x74, 0x65, 0x6d,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0xa9, 0x02, 0x0a, 0x1d, 0x41, 0x70, 0x74, 0x6f, 0x73,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63,
	0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x14,
	0x0a, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x12, 0x39, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x41, 0x70, 0x74,
	0x6f, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x3d, 0x0a, 0x1b, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x5f, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x5f, 0x62, 0x69, 0x74, 0x76, 0x65, 0x63, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x18, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x56, 0x6f, 0x74, 0x65, 0x73, 0x42, 0x69, 0x74, 0x76, 0x65, 0x63, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x17, 0x66, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e,
	0x64, 0x69, 0x63, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x15, 0x66, 0x61, 0x69,
	0x6c, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x64, 0x69, 0x63,
	0x65, 0x73, 0x22, 0x95, 0x01, 0x0a, 0x0a, 0x41, 0x70, 0x74, 0x6f, 0x73, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x36, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x41, 0x70, 0x74, 0x6f, 0x73, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x61, 0x0a, 0x0d, 0x41, 0x70,
	0x74, 0x6f, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x27, 0x0a, 0x0f, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x21, 0x0a,
	0x1f, 0x41, 0x70, 0x74, 0x6f, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x94, 0x01, 0x0a, 0x17, 0x41, 0x70, 0x74, 0x6f, 0x73, 0x47, 0x65, 0x6e, 0x65, 0x73, 0x69,
	0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x07,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x41, 0x70, 0x74, 0x6f, 0x73, 0x57, 0x72, 0x69, 0x74, 0x65,
	0x53, 0x65, 0x74, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x39, 0x0a, 0x06,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63,
	0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x41, 0x70, 0x74, 0x6f, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52,
	0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xe2, 0x02, 0x0a, 0x0d, 0x41, 0x70, 0x74, 0x6f,
	0x73, 0x57, 0x72, 0x69, 0x74, 0x65, 0x53, 0x65, 0x74, 0x12, 0x4f, 0x0a, 0x0e, 0x77, 0x72, 0x69,
	0x74, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x29, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x41, 0x70, 0x74, 0x6f, 0x73, 0x57,
	0x72, 0x69, 0x74, 0x65, 0x53, 0x65, 0x74, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x77, 0x72,
	0x69, 0x74, 0x65, 0x53, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x56, 0x0a, 0x10, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x64,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x41, 0x70, 0x74,
	0x6f, 0x73, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x57, 0x72, 0x69, 0x74, 0x65, 0x53, 0x65, 0x74,
	0x48, 0x00, 0x52, 0x0e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x57, 0x72, 0x69, 0x74, 0x65, 0x53,
	0x65, 0x74, 0x12, 0x56, 0x0a, 0x10, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x77, 0x72, 0x69,
	0x74, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63,
	0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x41, 0x70, 0x74, 0x6f, 0x73, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x57, 0x72, 0x69, 0x74, 0x65, 0x53, 0x65, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x57, 0x72, 0x69, 0x74, 0x65, 0x53, 0x65, 0x74, 0x22, 0x43, 0x0a, 0x04, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x5f, 0x57, 0x52,
	0x49, 0x54, 0x45, 0x5f, 0x53, 0x45, 0x54, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x44, 0x49, 0x52,
	0x45, 0x43, 0x54, 0x5f, 0x57, 0x52, 0x49, 0x54, 0x45, 0x5f, 0x53, 0x45, 0x54, 0x10, 0x02, 0x42,
	0x0b, 0x0a, 0x09, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x22, 0x77, 0x0a, 0x13,
	0x41, 0x70, 0x74, 0x6f, 0x73, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x57, 0x72, 0x69, 0x74, 0x65,
	0x53, 0x65, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x5f, 0x61,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65,
	0x41, 0x73, 0x12, 0x41, 0x0a, 0x06, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x41, 0x70, 0x74, 0x6f, 0x73,
	0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x06, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x22, 0xa6, 0x01, 0x0a, 0x13, 0x41, 0x70, 0x74, 0x6f, 0x73, 0x44,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x57, 0x72, 0x69, 0x74, 0x65, 0x53, 0x65, 0x74, 0x12, 0x54, 0x0a,
	0x10, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e,
	0x41, 0x70, 0x74, 0x6f, 0x73, 0x57, 0x72, 0x69, 0x74, 0x65, 0x53, 0x65, 0x74, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x52, 0x0e, 0x77, 0x72, 0x69, 0x74, 0x65, 0x53, 0x65, 0x74, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x12, 0x39, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x41, 0x70, 0x74, 0x6f,
	0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x9f,
	0x01, 0x0a, 0x14, 0x41, 0x70, 0x74, 0x6f, 0x73, 0x55, 0x73, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2e, 0x41, 0x70, 0x74, 0x6f, 0x73, 0x55, 0x73, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65,
	0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x41, 0x70,
	0x74, 0x6f, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x22, 0x91, 0x03, 0x0a, 0x1b, 0x41, 0x70, 0x74, 0x6f, 0x73, 0x55, 0x73, 0x65, 0x72, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x5f, 0x67, 0x61, 0x73, 0x5f, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x47, 0x61,
	0x73, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x67, 0x61, 0x73, 0x5f, 0x75,
	0x6e, 0x69, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0c, 0x67, 0x61, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x56, 0x0a,
	0x19, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x73, 0x65, 0x63, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x17, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x53, 0x65, 0x63, 0x73, 0x12, 0x48, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x41,
	0x70, 0x74, 0x6f, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12,
	0x43, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x41, 0x70, 0x74, 0x6f, 0x73,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x22, 0xd9, 0x05, 0x0a, 0x17, 0x41, 0x70, 0x74, 0x6f, 0x73, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x12, 0x47, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33,
	0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x41, 0x70, 0x74, 0x6f, 0x73, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x68, 0x0a, 0x16, 0x65, 0x6e, 0x74,
	0x72, 0x79, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x6f, 0x69, 0x6e,
	0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x2e, 0x41, 0x70, 0x74, 0x6f, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x46, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x48, 0x00, 0x52, 0x14, 0x65,
	0x6e, 0x74, 0x72, 0x79, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x12, 0x52, 0x0a, 0x0e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6f,
	0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2e, 0x41, 0x70, 0x74, 0x6f, 0x73, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x65, 0x0a, 0x15, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x5f, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x18, 0x66, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x41,
	0x70, 0x74, 0x6f, 0x73, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x48, 0x00, 0x52, 0x13, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x59,
	0x0a, 0x11, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x18, 0x67, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x69, 0x6e,
	0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x2e, 0x41, 0x70, 0x74, 0x6f, 0x73, 0x57, 0x72, 0x69, 0x74, 0x65, 0x53, 0x65, 0x74, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x48, 0x00, 0x52, 0x0f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x53,
	0x65, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x58, 0x0a, 0x10, 0x6d, 0x75, 0x6c,
	0x74, 0x69, 0x73, 0x69, 0x67, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x68, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x41, 0x70, 0x74, 0x6f,
	0x73, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x48, 0x00, 0x52, 0x0f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x50, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x22, 0x8f, 0x01, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a,
	0x16, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x50, 0x41, 0x59, 0x4c, 0x4f, 0x41, 0x44, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x43, 0x52,
	0x49, 0x50, 0x54, 0x5f, 0x50, 0x41, 0x59, 0x4c, 0x4f, 0x41, 0x44, 0x10, 0x02, 0x12, 0x19, 0x0a,
	0x15, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x42, 0x55, 0x4e, 0x44, 0x4c, 0x45, 0x5f, 0x50,
	0x41, 0x59, 0x4c, 0x4f, 0x41, 0x44, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x57, 0x52, 0x49, 0x54,
	0x45, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x50, 0x41, 0x59, 0x4c, 0x4f, 0x41, 0x44, 0x10, 0x04, 0x12,
	0x14, 0x0a, 0x10, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x53, 0x49, 0x47, 0x5f, 0x50, 0x41, 0x59, 0x4c,
	0x4f, 0x41, 0x44, 0x10, 0x05, 0x42, 0x09, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x22, 0xa9, 0x01, 0x0a, 0x19, 0x41, 0x70, 0x74, 0x6f, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x46,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x47,
	0x0a, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x41, 0x70, 0x74, 0x6f, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x52, 0x08, 0x66,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0d, 0x74, 0x79, 0x70, 0x65, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1c,
	0x0a, 0x09, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0c, 0x52, 0x09, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x7d, 0x0a, 0x14,
	0x41, 0x70, 0x74, 0x6f, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x41, 0x70, 0x74,
	0x6f, 0x73, 0x4d, 0x6f, 0x76, 0x65, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x52, 0x06,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x41, 0x0a, 0x11, 0x41,
	0x70, 0x74, 0x6f, 0x73, 0x4d, 0x6f, 0x76, 0x65, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x9d,
	0x01, 0x0a, 0x12, 0x41, 0x70, 0x74, 0x6f, 0x73, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x42, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x41, 0x70, 0x74, 0x6f,
	0x73, 0x4d, 0x6f, 0x76, 0x65, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x42, 0x79, 0x74, 0x65, 0x63,
	0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x79, 0x70,
	0x65, 0x5f, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0d, 0x74, 0x79, 0x70, 0x65, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x1c, 0x0a, 0x09, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0c, 0x52, 0x09, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x71,
	0x0a, 0x17, 0x41, 0x70, 0x74, 0x6f, 0x73, 0x4d, 0x6f, 0x76, 0x65, 0x53, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x42, 0x79, 0x74, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x79, 0x74,
	0x65, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x79, 0x74,
	0x65, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x03, 0x61, 0x62, 0x69, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x41, 0x70, 0x74, 0x6f, 0x73,
	0x4d, 0x6f, 0x76, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x61, 0x62,
	0x69, 0x22, 0xe9, 0x02, 0x0a, 0x11, 0x41, 0x70, 0x74, 0x6f, 0x73, 0x4d, 0x6f, 0x76, 0x65, 0x46,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4d, 0x0a, 0x0a, 0x76,
	0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2d, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x41, 0x70, 0x74, 0x6f, 0x73, 0x4d, 0x6f, 0x76,
	0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a,
	0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73,
	0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x68, 0x0a, 0x13, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x38, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x41, 0x70, 0x74, 0x6f, 0x73,
	0x4d, 0x6f, 0x76, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x11, 0x67, 0x65,
	0x6e, 0x65, 0x72, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x22,
	0x3c, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x52, 0x49, 0x56,
	0x41, 0x54, 0x45, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x10,
	0x02, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x52, 0x49, 0x45, 0x4e, 0x44, 0x10, 0x03, 0x22, 0x45, 0x0a,
	0x21, 0x41, 0x70, 0x74, 0x6f, 0x73, 0x4d, 0x6f, 0x76, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61,
	0x69, 0x6e, 0x74, 0x73, 0x22, 0x64, 0x0a, 0x18, 0x41, 0x70, 0x74, 0x6f, 0x73, 0x4d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x12, 0x48, 0x0a, 0x07, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x41, 0x70, 0x74, 0x6f, 0x73, 0x4d,
	0x6f, 0x76, 0x65, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x79, 0x74, 0x65, 0x63, 0x6f, 0x64,
	0x65, 0x52, 0x07, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x22, 0x6f, 0x0a, 0x17, 0x41, 0x70,
	0x74, 0x6f, 0x73, 0x4d, 0x6f, 0x76, 0x65, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x79, 0x74,
	0x65, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x79, 0x74, 0x65, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x79, 0x74, 0x65, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x38, 0x0a, 0x03, 0x61, 0x62, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x41, 0x70, 0x74, 0x6f, 0x73, 0x4d, 0x6f, 0x76, 0x65,
	0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x03, 0x61, 0x62, 0x69, 0x22, 0x9c, 0x02, 0x0a, 0x0f,
	0x41, 0x70, 0x74, 0x6f, 0x73, 0x4d, 0x6f, 0x76, 0x65, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x42, 0x0a,
	0x07, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x41, 0x70, 0x74, 0x6f, 0x73, 0x4d, 0x6f, 0x76, 0x65,
	0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x52, 0x07, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x73, 0x12, 0x55, 0x0a, 0x11, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x5f, 0x66, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63,
	0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x41, 0x70, 0x74, 0x6f, 0x73, 0x4d, 0x6f, 0x76, 0x65, 0x46, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x46,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x40, 0x0a, 0x07, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x69, 0x6e,
	0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x2e, 0x41, 0x70, 0x74, 0x6f, 0x73, 0x4d, 0x6f, 0x76, 0x65, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x52, 0x07, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x73, 0x22, 0x8d, 0x02, 0x0a, 0x0f, 0x41,
	0x70, 0x74, 0x6f, 0x73, 0x4d, 0x6f, 0x76, 0x65, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x09, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x66, 0x0a,
	0x13, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x63, 0x6f, 0x69,
	0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x2e, 0x41, 0x70, 0x74, 0x6f, 0x73, 0x4d, 0x6f, 0x76, 0x65, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x52, 0x11, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x43, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65,
	0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x41, 0x70,
	0x74, 0x6f, 0x73, 0x4d, 0x6f, 0x76, 0x65, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x22, 0x43, 0x0a, 0x1f, 0x41, 0x70,
	0x74, 0x6f, 0x73, 0x4d, 0x6f, 0x76, 0x65, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x20, 0x0a,
	0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x22,
	0x3e, 0x0a, 0x14, 0x41, 0x70, 0x74, 0x6f, 0x73, 0x4d, 0x6f, 0x76, 0x65, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22,
	0x59, 0x0a, 0x14, 0x41, 0x70, 0x74, 0x6f, 0x73, 0x57, 0x72, 0x69, 0x74, 0x65, 0x53, 0x65, 0x74,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x41, 0x0a, 0x09, 0x77, 0x72, 0x69, 0x74, 0x65,
	0x5f, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x69,
	0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x2e, 0x41, 0x70, 0x74, 0x6f, 0x73, 0x57, 0x72, 0x69, 0x74, 0x65, 0x53, 0x65, 0x74,
	0x52, 0x08, 0x77, 0x72, 0x69, 0x74, 0x65, 0x53, 0x65, 0x74, 0x22, 0xcc, 0x01, 0x0a, 0x14, 0x41,
	0x70, 0x74, 0x6f, 0x73, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x50, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6d,
	0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x69,
	0x0a, 0x13, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x63, 0x6f,
	0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2e, 0x41, 0x70, 0x74, 0x6f, 0x73, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69,
	0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x48, 0x00, 0x52, 0x12, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x1e, 0x0a, 0x1c, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x9c, 0x02, 0x0a, 0x1f, 0x41, 0x70,
	0x74, 0x6f, 0x73, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x4f, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3b, 0x2e, 0x63, 0x6f,
	0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2e, 0x41, 0x70, 0x74, 0x6f, 0x73, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69,
	0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x68,
	0x0a, 0x16, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30,
	0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x41, 0x70, 0x74, 0x6f, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x48, 0x00, 0x52, 0x14, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x33, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x41, 0x59, 0x4c, 0x4f, 0x41, 0x44, 0x10, 0x01, 0x42, 0x09, 0x0a,
	0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0xfc, 0x03, 0x0a, 0x0e, 0x41, 0x70, 0x74,
	0x6f, 0x73, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x3e, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x69, 0x6e,
	0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x2e, 0x41, 0x70, 0x74, 0x6f, 0x73, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x48, 0x0a, 0x07, 0x65,
	0x64, 0x32, 0x35, 0x35, 0x31, 0x39, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63,
	0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x41, 0x70, 0x74, 0x6f, 0x73, 0x45, 0x64, 0x32, 0x35, 0x35, 0x31,
	0x39, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x48, 0x00, 0x52, 0x07, 0x65, 0x64,
	0x32, 0x35, 0x35, 0x31, 0x39, 0x12, 0x58, 0x0a, 0x0d, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x65,
	0x64, 0x32, 0x35, 0x35, 0x31, 0x39, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x63,
	0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x41, 0x70, 0x74, 0x6f, 0x73, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x45,
	0x64, 0x32, 0x35, 0x35, 0x31, 0x39, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x48,
	0x00, 0x52, 0x0c, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x45, 0x64, 0x32, 0x35, 0x35, 0x31, 0x39, 0x12,
	0x52, 0x0a, 0x0b, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x41, 0x70, 0x74,
	0x6f, 0x73, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x12, 0x4c, 0x0a, 0x09, 0x66, 0x65, 0x65, 0x5f, 0x70, 0x61, 0x79, 0x65, 0x72,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x41,
	0x70, 0x74, 0x6f, 0x73, 0x46, 0x65, 0x65, 0x50, 0x61, 0x79, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x48, 0x00, 0x52, 0x08, 0x66, 0x65, 0x65, 0x50, 0x61, 0x79, 0x65,
	0x72, 0x22, 0x57, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x44,
	0x32, 0x35, 0x35, 0x31, 0x39, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x4d, 0x55, 0x4c, 0x54, 0x49,
	0x5f, 0x45, 0x44, 0x32, 0x35, 0x35, 0x31, 0x39, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x55,
	0x4c, 0x54, 0x49, 0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x46,
	0x45, 0x45, 0x5f, 0x50, 0x41, 0x59, 0x45, 0x52, 0x10, 0x04, 0x42, 0x0b, 0x0a, 0x09, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x54, 0x0a, 0x15, 0x41, 0x70, 0x74, 0x6f, 0x73,
	0x45, 0x64, 0x32, 0x35, 0x35, 0x31, 0x39, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12,
	0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0xa9, 0x01,
	0x0a, 0x1a, 0x41, 0x70, 0x74, 0x6f, 0x73, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x45, 0x64, 0x32, 0x35,
	0x35, 0x31, 0x39, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x1e, 0x0a,
	0x0a, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x1c, 0x0a,
	0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x65,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b,
	0x65, 0x79, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x22, 0xf9, 0x01, 0x0a, 0x18, 0x41, 0x70,
	0x74, 0x6f, 0x73, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x44, 0x0a, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x41,
	0x70, 0x74, 0x6f, 0x73, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x52, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x1a,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x18, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x53, 0x69, 0x67, 0x6e, 0x65,
	0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x59, 0x0a, 0x11, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65,
	0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x41, 0x70,
	0x74, 0x6f, 0x73, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x52, 0x10, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x53, 0x69,
	0x67, 0x6e, 0x65, 0x72, 0x73, 0x22, 0xfb, 0x02, 0x0a, 0x16, 0x41, 0x70, 0x74, 0x6f, 0x73, 0x46,
	0x65, 0x65, 0x50, 0x61, 0x79, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x12, 0x44, 0x0a, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x41, 0x70, 0x74, 0x6f, 0x73, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x06,
	0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x1a, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x61, 0x72, 0x79, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x18, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x61, 0x72, 0x79, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x65, 0x73, 0x12, 0x59, 0x0a, 0x11, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72,
	0x79, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x41, 0x70, 0x74, 0x6f, 0x73, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x10, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x73, 0x12,
	0x56, 0x0a, 0x10, 0x66, 0x65, 0x65, 0x5f, 0x70, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x67,
	0x6e, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6f, 0x69, 0x6e,
	0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x2e, 0x41, 0x70, 0x74, 0x6f, 0x73, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x0e, 0x66, 0x65, 0x65, 0x50, 0x61, 0x79, 0x65,
	0x72, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x11, 0x66, 0x65, 0x65, 0x5f, 0x70,
	0x61, 0x79, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x66, 0x65, 0x65, 0x50, 0x61, 0x79, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x22, 0xa5, 0x03, 0x0a, 0x15, 0x41, 0x70, 0x74, 0x6f, 0x73, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x45, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x63, 0x6f,
	0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2e, 0x41, 0x70, 0x74, 0x6f, 0x73, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x48, 0x0a, 0x07, 0x65, 0x64, 0x32, 0x35, 0x35, 0x31, 0x39, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65,
	0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x41, 0x70,
	0x74, 0x6f, 0x73, 0x45, 0x64, 0x32, 0x35, 0x35, 0x31, 0x39, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x48, 0x00, 0x52, 0x07, 0x65, 0x64, 0x32, 0x35, 0x35, 0x31, 0x39, 0x12, 0x58,
	0x0a, 0x0d, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x65, 0x64, 0x32, 0x35, 0x35, 0x31, 0x39, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65,
	0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x41, 0x70,
	0x74, 0x6f, 0x73, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x45, 0x64, 0x32, 0x35, 0x35, 0x31, 0x39, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x45, 0x64, 0x32, 0x35, 0x35, 0x31, 0x39, 0x12, 0x4c, 0x0a, 0x09, 0x66, 0x65, 0x65, 0x5f,
	0x70, 0x61, 0x79, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x6f,
	0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2e, 0x41, 0x70, 0x74, 0x6f, 0x73, 0x46, 0x65, 0x65, 0x50, 0x61, 0x79, 0x65,
	0x72, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x48, 0x00, 0x52, 0x08, 0x66, 0x65,
	0x65, 0x50, 0x61, 0x79, 0x65, 0x72, 0x22, 0x46, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f,
	0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x0b, 0x0a, 0x07, 0x45, 0x44, 0x32, 0x35, 0x35, 0x31, 0x39, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d,
	0x4d, 0x55, 0x4c, 0x54, 0x49, 0x5f, 0x45, 0x44, 0x32, 0x35, 0x35, 0x31, 0x39, 0x10, 0x02, 0x12,
	0x0d, 0x0a, 0x09, 0x46, 0x45, 0x45, 0x5f, 0x50, 0x41, 0x59, 0x45, 0x52, 0x10, 0x03, 0x42, 0x0b,
	0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x42, 0x3f, 0x5a, 0x3d, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61,
	0x73, 0x65, 0x2f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2f,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_coinbase_chainstorage_blockchain_aptos_proto_rawDescOnce sync.Once
	file_coinbase_chainstorage_blockchain_aptos_proto_rawDescData = file_coinbase_chainstorage_blockchain_aptos_proto_rawDesc
)

func file_coinbase_chainstorage_blockchain_aptos_proto_rawDescGZIP() []byte {
	file_coinbase_chainstorage_blockchain_aptos_proto_rawDescOnce.Do(func() {
		file_coinbase_chainstorage_blockchain_aptos_proto_rawDescData = protoimpl.X.CompressGZIP(file_coinbase_chainstorage_blockchain_aptos_proto_rawDescData)
	})
	return file_coinbase_chainstorage_blockchain_aptos_proto_rawDescData
}

var file_coinbase_chainstorage_blockchain_aptos_proto_enumTypes = make([]protoimpl.EnumInfo, 8)
var file_coinbase_chainstorage_blockchain_aptos_proto_msgTypes = make([]protoimpl.MessageInfo, 47)
var file_coinbase_chainstorage_blockchain_aptos_proto_goTypes = []interface{}{
	(AptosTransaction_TransactionType)(0),     // 0: coinbase.chainstorage.AptosTransaction.TransactionType
	(AptosWriteSetChange_Type)(0),             // 1: coinbase.chainstorage.AptosWriteSetChange.Type
	(AptosWriteSet_Type)(0),                   // 2: coinbase.chainstorage.AptosWriteSet.Type
	(AptosTransactionPayload_Type)(0),         // 3: coinbase.chainstorage.AptosTransactionPayload.Type
	(AptosMoveFunction_Type)(0),               // 4: coinbase.chainstorage.AptosMoveFunction.Type
	(AptosMultisigTransactionPayload_Type)(0), // 5: coinbase.chainstorage.AptosMultisigTransactionPayload.Type
	(AptosSignature_Type)(0),                  // 6: coinbase.chainstorage.AptosSignature.Type
	(AptosAccountSignature_Type)(0),           // 7: coinbase.chainstorage.AptosAccountSignature.Type
	(*AptosBlobdata)(nil),                     // 8: coinbase.chainstorage.AptosBlobdata
	(*AptosBlock)(nil),                        // 9: coinbase.chainstorage.AptosBlock
	(*AptosHeader)(nil),                       // 10: coinbase.chainstorage.AptosHeader
	(*AptosTransaction)(nil),                  // 11: coinbase.chainstorage.AptosTransaction
	(*AptosTransactionInfo)(nil),              // 12: coinbase.chainstorage.AptosTransactionInfo
	(*AptosWriteSetChange)(nil),               // 13: coinbase.chainstorage.AptosWriteSetChange
	(*AptosDeleteModule)(nil),                 // 14: coinbase.chainstorage.AptosDeleteModule
	(*AptosDeleteResource)(nil),               // 15: coinbase.chainstorage.AptosDeleteResource
	(*AptosDeleteTableItem)(nil),              // 16: coinbase.chainstorage.AptosDeleteTableItem
	(*AptosDeleteTableData)(nil),              // 17: coinbase.chainstorage.AptosDeleteTableData
	(*AptosWriteModule)(nil),                  // 18: coinbase.chainstorage.AptosWriteModule
	(*AptosWriteResource)(nil),                // 19: coinbase.chainstorage.AptosWriteResource
	(*AptosWriteTableItem)(nil),               // 20: coinbase.chainstorage.AptosWriteTableItem
	(*AptosWriteTableItemData)(nil),           // 21: coinbase.chainstorage.AptosWriteTableItemData
	(*AptosBlockMetadataTransaction)(nil),     // 22: coinbase.chainstorage.AptosBlockMetadataTransaction
	(*AptosEvent)(nil),                        // 23: coinbase.chainstorage.AptosEvent
	(*AptosEventKey)(nil),                     // 24: coinbase.chainstorage.AptosEventKey
	(*AptosStateCheckpointTransaction)(nil),   // 25: coinbase.chainstorage.AptosStateCheckpointTransaction
	(*AptosGenesisTransaction)(nil),           // 26: coinbase.chainstorage.AptosGenesisTransaction
	(*AptosWriteSet)(nil),                     // 27: coinbase.chainstorage.AptosWriteSet
	(*AptosScriptWriteSet)(nil),               // 28: coinbase.chainstorage.AptosScriptWriteSet
	(*AptosDirectWriteSet)(nil),               // 29: coinbase.chainstorage.AptosDirectWriteSet
	(*AptosUserTransaction)(nil),              // 30: coinbase.chainstorage.AptosUserTransaction
	(*AptosUserTransactionRequest)(nil),       // 31: coinbase.chainstorage.AptosUserTransactionRequest
	(*AptosTransactionPayload)(nil),           // 32: coinbase.chainstorage.AptosTransactionPayload
	(*AptosEntryFunctionPayload)(nil),         // 33: coinbase.chainstorage.AptosEntryFunctionPayload
	(*AptosEntryFunctionId)(nil),              // 34: coinbase.chainstorage.AptosEntryFunctionId
	(*AptosMoveModuleId)(nil),                 // 35: coinbase.chainstorage.AptosMoveModuleId
	(*AptosScriptPayload)(nil),                // 36: coinbase.chainstorage.AptosScriptPayload
	(*AptosMoveScriptBytecode)(nil),           // 37: coinbase.chainstorage.AptosMoveScriptBytecode
	(*AptosMoveFunction)(nil),                 // 38: coinbase.chainstorage.AptosMoveFunction
	(*AptosMoveFunctionGenericTypeParam)(nil), // 39: coinbase.chainstorage.AptosMoveFunctionGenericTypeParam
	(*AptosModuleBundlePayload)(nil),          // 40: coinbase.chainstorage.AptosModuleBundlePayload
	(*AptosMoveModuleBytecode)(nil),           // 41: coinbase.chainstorage.AptosMoveModuleBytecode
	(*AptosMoveModule)(nil),                   // 42: coinbase.chainstorage.AptosMoveModule
	(*AptosMoveStruct)(nil),                   // 43: coinbase.chainstorage.AptosMoveStruct
	(*AptosMoveStructGenericTypeParam)(nil),   // 44: coinbase.chainstorage.AptosMoveStructGenericTypeParam
	(*AptosMoveStructField)(nil),              // 45: coinbase.chainstorage.AptosMoveStructField
	(*AptosWriteSetPayload)(nil),              // 46: coinbase.chainstorage.AptosWriteSetPayload
	(*AptosMultisigPayload)(nil),              // 47: coinbase.chainstorage.AptosMultisigPayload
	(*AptosMultisigTransactionPayload)(nil),   // 48: coinbase.chainstorage.AptosMultisigTransactionPayload
	(*AptosSignature)(nil),                    // 49: coinbase.chainstorage.AptosSignature
	(*AptosEd25519Signature)(nil),             // 50: coinbase.chainstorage.AptosEd25519Signature
	(*AptosMultiEd25519Signature)(nil),        // 51: coinbase.chainstorage.AptosMultiEd25519Signature
	(*AptosMultiAgentSignature)(nil),          // 52: coinbase.chainstorage.AptosMultiAgentSignature
	(*AptosFeePayerSignature)(nil),            // 53: coinbase.chainstorage.AptosFeePayerSignature
	(*AptosAccountSignature)(nil),             // 54: coinbase.chainstorage.AptosAccountSignature
	(*timestamppb.Timestamp)(nil),             // 55: google.protobuf.Timestamp
}
var file_coinbase_chainstorage_blockchain_aptos_proto_depIdxs = []int32{
	10, // 0: coinbase.chainstorage.AptosBlock.header:type_name -> coinbase.chainstorage.AptosHeader
	11, // 1: coinbase.chainstorage.AptosBlock.transactions:type_name -> coinbase.chainstorage.AptosTransaction
	55, // 2: coinbase.chainstorage.AptosHeader.block_time:type_name -> google.protobuf.Timestamp
	55, // 3: coinbase.chainstorage.AptosTransaction.timestamp:type_name -> google.protobuf.Timestamp
	12, // 4: coinbase.chainstorage.AptosTransaction.info:type_name -> coinbase.chainstorage.AptosTransactionInfo
	0,  // 5: coinbase.chainstorage.AptosTransaction.type:type_name -> coinbase.chainstorage.AptosTransaction.TransactionType
	22, // 6: coinbase.chainstorage.AptosTransaction.block_metadata:type_name -> coinbase.chainstorage.AptosBlockMetadataTransaction
	26, // 7: coinbase.chainstorage.AptosTransaction.genesis:type_name -> coinbase.chainstorage.AptosGenesisTransaction
	25, // 8: coinbase.chainstorage.AptosTransaction.state_checkpoint:type_name -> coinbase.chainstorage.AptosStateCheckpointTransaction
	30, // 9: coinbase.chainstorage.AptosTransaction.user:type_name -> coinbase.chainstorage.AptosUserTransaction
	13, // 10: coinbase.chainstorage.AptosTransactionInfo.changes:type_name -> coinbase.chainstorage.AptosWriteSetChange
	1,  // 11: coinbase.chainstorage.AptosWriteSetChange.type:type_name -> coinbase.chainstorage.AptosWriteSetChange.Type
	14, // 12: coinbase.chainstorage.AptosWriteSetChange.delete_module:type_name -> coinbase.chainstorage.AptosDeleteModule
	15, // 13: coinbase.chainstorage.AptosWriteSetChange.delete_resource:type_name -> coinbase.chainstorage.AptosDeleteResource
	16, // 14: coinbase.chainstorage.AptosWriteSetChange.delete_table_item:type_name -> coinbase.chainstorage.AptosDeleteTableItem
	18, // 15: coinbase.chainstorage.AptosWriteSetChange.write_module:type_name -> coinbase.chainstorage.AptosWriteModule
	19, // 16: coinbase.chainstorage.AptosWriteSetChange.write_resource:type_name -> coinbase.chainstorage.AptosWriteResource
	20, // 17: coinbase.chainstorage.AptosWriteSetChange.write_table_item:type_name -> coinbase.chainstorage.AptosWriteTableItem
	35, // 18: coinbase.chainstorage.AptosDeleteModule.module:type_name -> coinbase.chainstorage.AptosMoveModuleId
	17, // 19: coinbase.chainstorage.AptosDeleteTableItem.data:type_name -> coinbase.chainstorage.AptosDeleteTableData
	41, // 20: coinbase.chainstorage.AptosWriteModule.data:type_name -> coinbase.chainstorage.AptosMoveModuleBytecode
	21, // 21: coinbase.chainstorage.AptosWriteTableItem.data:type_name -> coinbase.chainstorage.AptosWriteTableItemData
	23, // 22: coinbase.chainstorage.AptosBlockMetadataTransaction.events:type_name -> coinbase.chainstorage.AptosEvent
	24, // 23: coinbase.chainstorage.AptosEvent.key:type_name -> coinbase.chainstorage.AptosEventKey
	27, // 24: coinbase.chainstorage.AptosGenesisTransaction.payload:type_name -> coinbase.chainstorage.AptosWriteSet
	23, // 25: coinbase.chainstorage.AptosGenesisTransaction.events:type_name -> coinbase.chainstorage.AptosEvent
	2,  // 26: coinbase.chainstorage.AptosWriteSet.write_set_type:type_name -> coinbase.chainstorage.AptosWriteSet.Type
	28, // 27: coinbase.chainstorage.AptosWriteSet.script_write_set:type_name -> coinbase.chainstorage.AptosScriptWriteSet
	29, // 28: coinbase.chainstorage.AptosWriteSet.direct_write_set:type_name -> coinbase.chainstorage.AptosDirectWriteSet
	36, // 29: coinbase.chainstorage.AptosScriptWriteSet.script:type_name -> coinbase.chainstorage.AptosScriptPayload
	13, // 30: coinbase.chainstorage.AptosDirectWriteSet.write_set_change:type_name -> coinbase.chainstorage.AptosWriteSetChange
	23, // 31: coinbase.chainstorage.AptosDirectWriteSet.events:type_name -> coinbase.chainstorage.AptosEvent
	31, // 32: coinbase.chainstorage.AptosUserTransaction.request:type_name -> coinbase.chainstorage.AptosUserTransactionRequest
	23, // 33: coinbase.chainstorage.AptosUserTransaction.events:type_name -> coinbase.chainstorage.AptosEvent
	55, // 34: coinbase.chainstorage.AptosUserTransactionRequest.expiration_timestamp_secs:type_name -> google.protobuf.Timestamp
	32, // 35: coinbase.chainstorage.AptosUserTransactionRequest.payload:type_name -> coinbase.chainstorage.AptosTransactionPayload
	49, // 36: coinbase.chainstorage.AptosUserTransactionRequest.signature:type_name -> coinbase.chainstorage.AptosSignature
	3,  // 37: coinbase.chainstorage.AptosTransactionPayload.type:type_name -> coinbase.chainstorage.AptosTransactionPayload.Type
	33, // 38: coinbase.chainstorage.AptosTransactionPayload.entry_function_payload:type_name -> coinbase.chainstorage.AptosEntryFunctionPayload
	36, // 39: coinbase.chainstorage.AptosTransactionPayload.script_payload:type_name -> coinbase.chainstorage.AptosScriptPayload
	40, // 40: coinbase.chainstorage.AptosTransactionPayload.module_bundle_payload:type_name -> coinbase.chainstorage.AptosModuleBundlePayload
	46, // 41: coinbase.chainstorage.AptosTransactionPayload.write_set_payload:type_name -> coinbase.chainstorage.AptosWriteSetPayload
	47, // 42: coinbase.chainstorage.AptosTransactionPayload.multisig_payload:type_name -> coinbase.chainstorage.AptosMultisigPayload
	34, // 43: coinbase.chainstorage.AptosEntryFunctionPayload.function:type_name -> coinbase.chainstorage.AptosEntryFunctionId
	35, // 44: coinbase.chainstorage.AptosEntryFunctionId.module:type_name -> coinbase.chainstorage.AptosMoveModuleId
	37, // 45: coinbase.chainstorage.AptosScriptPayload.code:type_name -> coinbase.chainstorage.AptosMoveScriptBytecode
	38, // 46: coinbase.chainstorage.AptosMoveScriptBytecode.abi:type_name -> coinbase.chainstorage.AptosMoveFunction
	4,  // 47: coinbase.chainstorage.AptosMoveFunction.visibility:type_name -> coinbase.chainstorage.AptosMoveFunction.Type
	39, // 48: coinbase.chainstorage.AptosMoveFunction.generic_type_params:type_name -> coinbase.chainstorage.AptosMoveFunctionGenericTypeParam
	41, // 49: coinbase.chainstorage.AptosModuleBundlePayload.modules:type_name -> coinbase.chainstorage.AptosMoveModuleBytecode
	42, // 50: coinbase.chainstorage.AptosMoveModuleBytecode.abi:type_name -> coinbase.chainstorage.AptosMoveModule
	35, // 51: coinbase.chainstorage.AptosMoveModule.friends:type_name -> coinbase.chainstorage.AptosMoveModuleId
	38, // 52: coinbase.chainstorage.AptosMoveModule.exposed_functions:type_name -> coinbase.chainstorage.AptosMoveFunction
	43, // 53: coinbase.chainstorage.AptosMoveModule.structs:type_name -> coinbase.chainstorage.AptosMoveStruct
	44, // 54: coinbase.chainstorage.AptosMoveStruct.generic_type_params:type_name -> coinbase.chainstorage.AptosMoveStructGenericTypeParam
	45, // 55: coinbase.chainstorage.AptosMoveStruct.fields:type_name -> coinbase.chainstorage.AptosMoveStructField
	27, // 56: coinbase.chainstorage.AptosWriteSetPayload.write_set:type_name -> coinbase.chainstorage.AptosWriteSet
	48, // 57: coinbase.chainstorage.AptosMultisigPayload.transaction_payload:type_name -> coinbase.chainstorage.AptosMultisigTransactionPayload
	5,  // 58: coinbase.chainstorage.AptosMultisigTransactionPayload.type:type_name -> coinbase.chainstorage.AptosMultisigTransactionPayload.Type
	33, // 59: coinbase.chainstorage.AptosMultisigTransactionPayload.entry_function_payload:type_name -> coinbase.chainstorage.AptosEntryFunctionPayload
	6,  // 60: coinbase.chainstorage.AptosSignature.type:type_name -> coinbase.chainstorage.AptosSignature.Type
	50, // 61: coinbase.chainstorage.AptosSignature.ed25519:type_name -> coinbase.chainstorage.AptosEd25519Signature
	51, // 62: coinbase.chainstorage.AptosSignature.multi_ed25519:type_name -> coinbase.chainstorage.AptosMultiEd25519Signature
	52, // 63: coinbase.chainstorage.AptosSignature.multi_agent:type_name -> coinbase.chainstorage.AptosMultiAgentSignature
	53, // 64: coinbase.chainstorage.AptosSignature.fee_payer:type_name -> coinbase.chainstorage.AptosFeePayerSignature
	54, // 65: coinbase.chainstorage.AptosMultiAgentSignature.sender:type_name -> coinbase.chainstorage.AptosAccountSignature
	54, // 66: coinbase.chainstorage.AptosMultiAgentSignature.secondary_signers:type_name -> coinbase.chainstorage.AptosAccountSignature
	54, // 67: coinbase.chainstorage.AptosFeePayerSignature.sender:type_name -> coinbase.chainstorage.AptosAccountSignature
	54, // 68: coinbase.chainstorage.AptosFeePayerSignature.secondary_signers:type_name -> coinbase.chainstorage.AptosAccountSignature
	54, // 69: coinbase.chainstorage.AptosFeePayerSignature.fee_payer_signer:type_name -> coinbase.chainstorage.AptosAccountSignature
	7,  // 70: coinbase.chainstorage.AptosAccountSignature.type:type_name -> coinbase.chainstorage.AptosAccountSignature.Type
	50, // 71: coinbase.chainstorage.AptosAccountSignature.ed25519:type_name -> coinbase.chainstorage.AptosEd25519Signature
	51, // 72: coinbase.chainstorage.AptosAccountSignature.multi_ed25519:type_name -> coinbase.chainstorage.AptosMultiEd25519Signature
	53, // 73: coinbase.chainstorage.AptosAccountSignature.fee_payer:type_name -> coinbase.chainstorage.AptosFeePayerSignature
	74, // [74:74] is the sub-list for method output_type
	74, // [74:74] is the sub-list for method input_type
	74, // [74:74] is the sub-list for extension type_name
	74, // [74:74] is the sub-list for extension extendee
	0,  // [0:74] is the sub-list for field type_name
}

func init() { file_coinbase_chainstorage_blockchain_aptos_proto_init() }
func file_coinbase_chainstorage_blockchain_aptos_proto_init() {
	if File_coinbase_chainstorage_blockchain_aptos_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_coinbase_chainstorage_blockchain_aptos_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AptosBlobdata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_aptos_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AptosBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_aptos_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AptosHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_aptos_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AptosTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_aptos_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AptosTransactionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_aptos_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AptosWriteSetChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_aptos_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AptosDeleteModule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_aptos_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AptosDeleteResource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_aptos_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AptosDeleteTableItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_aptos_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AptosDeleteTableData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_aptos_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AptosWriteModule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_aptos_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AptosWriteResource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_aptos_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AptosWriteTableItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_aptos_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AptosWriteTableItemData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_aptos_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AptosBlockMetadataTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_aptos_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AptosEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_aptos_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AptosEventKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_aptos_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AptosStateCheckpointTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_aptos_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AptosGenesisTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_aptos_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AptosWriteSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_aptos_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AptosScriptWriteSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_aptos_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AptosDirectWriteSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_aptos_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AptosUserTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_aptos_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AptosUserTransactionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_aptos_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AptosTransactionPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_aptos_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AptosEntryFunctionPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_aptos_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AptosEntryFunctionId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_aptos_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AptosMoveModuleId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_aptos_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AptosScriptPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_aptos_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AptosMoveScriptBytecode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_aptos_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AptosMoveFunction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_aptos_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AptosMoveFunctionGenericTypeParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_aptos_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AptosModuleBundlePayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_aptos_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AptosMoveModuleBytecode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_aptos_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AptosMoveModule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_aptos_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AptosMoveStruct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_aptos_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AptosMoveStructGenericTypeParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_aptos_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AptosMoveStructField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_aptos_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AptosWriteSetPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_aptos_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AptosMultisigPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_aptos_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AptosMultisigTransactionPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_aptos_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AptosSignature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_aptos_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AptosEd25519Signature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_aptos_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AptosMultiEd25519Signature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_aptos_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AptosMultiAgentSignature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_aptos_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AptosFeePayerSignature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_aptos_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AptosAccountSignature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_coinbase_chainstorage_blockchain_aptos_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*AptosTransaction_BlockMetadata)(nil),
		(*AptosTransaction_Genesis)(nil),
		(*AptosTransaction_StateCheckpoint)(nil),
		(*AptosTransaction_User)(nil),
	}
	file_coinbase_chainstorage_blockchain_aptos_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*AptosTransactionInfo_StateCheckpointHash)(nil),
	}
	file_coinbase_chainstorage_blockchain_aptos_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*AptosWriteSetChange_DeleteModule)(nil),
		(*AptosWriteSetChange_DeleteResource)(nil),
		(*AptosWriteSetChange_DeleteTableItem)(nil),
		(*AptosWriteSetChange_WriteModule)(nil),
		(*AptosWriteSetChange_WriteResource)(nil),
		(*AptosWriteSetChange_WriteTableItem)(nil),
	}
	file_coinbase_chainstorage_blockchain_aptos_proto_msgTypes[19].OneofWrappers = []interface{}{
		(*AptosWriteSet_ScriptWriteSet)(nil),
		(*AptosWriteSet_DirectWriteSet)(nil),
	}
	file_coinbase_chainstorage_blockchain_aptos_proto_msgTypes[24].OneofWrappers = []interface{}{
		(*AptosTransactionPayload_EntryFunctionPayload)(nil),
		(*AptosTransactionPayload_ScriptPayload)(nil),
		(*AptosTransactionPayload_ModuleBundlePayload)(nil),
		(*AptosTransactionPayload_WriteSetPayload)(nil),
		(*AptosTransactionPayload_MultisigPayload)(nil),
	}
	file_coinbase_chainstorage_blockchain_aptos_proto_msgTypes[39].OneofWrappers = []interface{}{
		(*AptosMultisigPayload_TransactionPayload)(nil),
	}
	file_coinbase_chainstorage_blockchain_aptos_proto_msgTypes[40].OneofWrappers = []interface{}{
		(*AptosMultisigTransactionPayload_EntryFunctionPayload)(nil),
	}
	file_coinbase_chainstorage_blockchain_aptos_proto_msgTypes[41].OneofWrappers = []interface{}{
		(*AptosSignature_Ed25519)(nil),
		(*AptosSignature_MultiEd25519)(nil),
		(*AptosSignature_MultiAgent)(nil),
		(*AptosSignature_FeePayer)(nil),
	}
	file_coinbase_chainstorage_blockchain_aptos_proto_msgTypes[46].OneofWrappers = []interface{}{
		(*AptosAccountSignature_Ed25519)(nil),
		(*AptosAccountSignature_MultiEd25519)(nil),
		(*AptosAccountSignature_FeePayer)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_coinbase_chainstorage_blockchain_aptos_proto_rawDesc,
			NumEnums:      8,
			NumMessages:   47,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_coinbase_chainstorage_blockchain_aptos_proto_goTypes,
		DependencyIndexes: file_coinbase_chainstorage_blockchain_aptos_proto_depIdxs,
		EnumInfos:         file_coinbase_chainstorage_blockchain_aptos_proto_enumTypes,
		MessageInfos:      file_coinbase_chainstorage_blockchain_aptos_proto_msgTypes,
	}.Build()
	File_coinbase_chainstorage_blockchain_aptos_proto = out.File
	file_coinbase_chainstorage_blockchain_aptos_proto_rawDesc = nil
	file_coinbase_chainstorage_blockchain_aptos_proto_goTypes = nil
	file_coinbase_chainstorage_blockchain_aptos_proto_depIdxs = nil
}
