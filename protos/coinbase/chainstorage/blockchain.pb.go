// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.24.4
// source: coinbase/chainstorage/blockchain.proto

package chainstorage

import (
	common "github.com/coinbase/chainstorage/protos/coinbase/c3/common"
	types "github.com/coinbase/chainstorage/protos/coinbase/crypto/rosetta/types"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Block struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Blockchain common.Blockchain `protobuf:"varint,1,opt,name=blockchain,proto3,enum=coinbase.c3.common.Blockchain" json:"blockchain,omitempty"`
	Network    common.Network    `protobuf:"varint,2,opt,name=network,proto3,enum=coinbase.c3.common.Network" json:"network,omitempty"`
	Metadata   *BlockMetadata    `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// Types that are assignable to Blobdata:
	//
	//	*Block_Ethereum
	//	*Block_Bitcoin
	//	*Block_Rosetta
	//	*Block_Solana
	Blobdata isBlock_Blobdata `protobuf_oneof:"blobdata"`
}

func (x *Block) Reset() {
	*x = Block{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Block) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Block) ProtoMessage() {}

func (x *Block) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Block.ProtoReflect.Descriptor instead.
func (*Block) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_proto_rawDescGZIP(), []int{0}
}

func (x *Block) GetBlockchain() common.Blockchain {
	if x != nil {
		return x.Blockchain
	}
	return common.Blockchain(0)
}

func (x *Block) GetNetwork() common.Network {
	if x != nil {
		return x.Network
	}
	return common.Network(0)
}

func (x *Block) GetMetadata() *BlockMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (m *Block) GetBlobdata() isBlock_Blobdata {
	if m != nil {
		return m.Blobdata
	}
	return nil
}

func (x *Block) GetEthereum() *EthereumBlobdata {
	if x, ok := x.GetBlobdata().(*Block_Ethereum); ok {
		return x.Ethereum
	}
	return nil
}

func (x *Block) GetBitcoin() *BitcoinBlobdata {
	if x, ok := x.GetBlobdata().(*Block_Bitcoin); ok {
		return x.Bitcoin
	}
	return nil
}

func (x *Block) GetRosetta() *RosettaBlobdata {
	if x, ok := x.GetBlobdata().(*Block_Rosetta); ok {
		return x.Rosetta
	}
	return nil
}

func (x *Block) GetSolana() *SolanaBlobdata {
	if x, ok := x.GetBlobdata().(*Block_Solana); ok {
		return x.Solana
	}
	return nil
}

type isBlock_Blobdata interface {
	isBlock_Blobdata()
}

type Block_Ethereum struct {
	Ethereum *EthereumBlobdata `protobuf:"bytes,100,opt,name=ethereum,proto3,oneof"`
}

type Block_Bitcoin struct {
	Bitcoin *BitcoinBlobdata `protobuf:"bytes,101,opt,name=bitcoin,proto3,oneof"`
}

type Block_Rosetta struct {
	Rosetta *RosettaBlobdata `protobuf:"bytes,102,opt,name=rosetta,proto3,oneof"`
}

type Block_Solana struct {
	Solana *SolanaBlobdata `protobuf:"bytes,103,opt,name=solana,proto3,oneof"`
}

func (*Block_Ethereum) isBlock_Blobdata() {}

func (*Block_Bitcoin) isBlock_Blobdata() {}

func (*Block_Rosetta) isBlock_Blobdata() {}

func (*Block_Solana) isBlock_Blobdata() {}

type BlockIdentifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash      string                 `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	Height    uint64                 `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
	Tag       uint32                 `protobuf:"varint,3,opt,name=tag,proto3" json:"tag,omitempty"`
	Skipped   bool                   `protobuf:"varint,4,opt,name=skipped,proto3" json:"skipped,omitempty"`
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *BlockIdentifier) Reset() {
	*x = BlockIdentifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockIdentifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockIdentifier) ProtoMessage() {}

func (x *BlockIdentifier) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockIdentifier.ProtoReflect.Descriptor instead.
func (*BlockIdentifier) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_proto_rawDescGZIP(), []int{1}
}

func (x *BlockIdentifier) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *BlockIdentifier) GetHeight() uint64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *BlockIdentifier) GetTag() uint32 {
	if x != nil {
		return x.Tag
	}
	return 0
}

func (x *BlockIdentifier) GetSkipped() bool {
	if x != nil {
		return x.Skipped
	}
	return false
}

func (x *BlockIdentifier) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

type BlockMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Tag is a way to version the blockchain dataset. See http://go/cs-design for more details.
	Tag uint32 `protobuf:"varint,1,opt,name=tag,proto3" json:"tag,omitempty"`
	// Hash of the current block.
	Hash string `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
	// Hash of the parent block.
	ParentHash string `protobuf:"bytes,3,opt,name=parent_hash,json=parentHash,proto3" json:"parent_hash,omitempty"`
	// Height of the current block.
	Height uint64 `protobuf:"varint,4,opt,name=height,proto3" json:"height,omitempty"`
	// Object key to the blob storage.
	ObjectKeyMain string `protobuf:"bytes,5,opt,name=object_key_main,json=objectKeyMain,proto3" json:"object_key_main,omitempty"`
	// Height of the parent block. For most blockchains, parent_height equals to height - 1.
	ParentHeight uint64 `protobuf:"varint,6,opt,name=parent_height,json=parentHeight,proto3" json:"parent_height,omitempty"`
	// Skipped is applicable to certain blockchains, e.g. solana, where the abandoned blocks may make into way into the canonical chain.
	Skipped bool `protobuf:"varint,7,opt,name=skipped,proto3" json:"skipped,omitempty"`
	// Block timestamp. Note that this attribute is only available in recent blocks.
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *BlockMetadata) Reset() {
	*x = BlockMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockMetadata) ProtoMessage() {}

func (x *BlockMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockMetadata.ProtoReflect.Descriptor instead.
func (*BlockMetadata) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_proto_rawDescGZIP(), []int{2}
}

func (x *BlockMetadata) GetTag() uint32 {
	if x != nil {
		return x.Tag
	}
	return 0
}

func (x *BlockMetadata) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *BlockMetadata) GetParentHash() string {
	if x != nil {
		return x.ParentHash
	}
	return ""
}

func (x *BlockMetadata) GetHeight() uint64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *BlockMetadata) GetObjectKeyMain() string {
	if x != nil {
		return x.ObjectKeyMain
	}
	return ""
}

func (x *BlockMetadata) GetParentHeight() uint64 {
	if x != nil {
		return x.ParentHeight
	}
	return 0
}

func (x *BlockMetadata) GetSkipped() bool {
	if x != nil {
		return x.Skipped
	}
	return false
}

func (x *BlockMetadata) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

type EthereumBlobdata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header              []byte   `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	TransactionReceipts [][]byte `protobuf:"bytes,2,rep,name=transaction_receipts,json=transactionReceipts,proto3" json:"transaction_receipts,omitempty"`
	TransactionTraces   [][]byte `protobuf:"bytes,3,rep,name=transaction_traces,json=transactionTraces,proto3" json:"transaction_traces,omitempty"`
	Uncles              [][]byte `protobuf:"bytes,4,rep,name=uncles,proto3" json:"uncles,omitempty"`
	// Types that are assignable to ExtraData:
	//
	//	*EthereumBlobdata_Polygon
	ExtraData isEthereumBlobdata_ExtraData `protobuf_oneof:"extra_data"`
}

func (x *EthereumBlobdata) Reset() {
	*x = EthereumBlobdata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EthereumBlobdata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EthereumBlobdata) ProtoMessage() {}

func (x *EthereumBlobdata) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EthereumBlobdata.ProtoReflect.Descriptor instead.
func (*EthereumBlobdata) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_proto_rawDescGZIP(), []int{3}
}

func (x *EthereumBlobdata) GetHeader() []byte {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *EthereumBlobdata) GetTransactionReceipts() [][]byte {
	if x != nil {
		return x.TransactionReceipts
	}
	return nil
}

func (x *EthereumBlobdata) GetTransactionTraces() [][]byte {
	if x != nil {
		return x.TransactionTraces
	}
	return nil
}

func (x *EthereumBlobdata) GetUncles() [][]byte {
	if x != nil {
		return x.Uncles
	}
	return nil
}

func (m *EthereumBlobdata) GetExtraData() isEthereumBlobdata_ExtraData {
	if m != nil {
		return m.ExtraData
	}
	return nil
}

func (x *EthereumBlobdata) GetPolygon() *PolygonExtraData {
	if x, ok := x.GetExtraData().(*EthereumBlobdata_Polygon); ok {
		return x.Polygon
	}
	return nil
}

type isEthereumBlobdata_ExtraData interface {
	isEthereumBlobdata_ExtraData()
}

type EthereumBlobdata_Polygon struct {
	Polygon *PolygonExtraData `protobuf:"bytes,100,opt,name=polygon,proto3,oneof"`
}

func (*EthereumBlobdata_Polygon) isEthereumBlobdata_ExtraData() {}

type PolygonExtraData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Author []byte `protobuf:"bytes,1,opt,name=author,proto3" json:"author,omitempty"`
}

func (x *PolygonExtraData) Reset() {
	*x = PolygonExtraData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolygonExtraData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolygonExtraData) ProtoMessage() {}

func (x *PolygonExtraData) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolygonExtraData.ProtoReflect.Descriptor instead.
func (*PolygonExtraData) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_proto_rawDescGZIP(), []int{4}
}

func (x *PolygonExtraData) GetAuthor() []byte {
	if x != nil {
		return x.Author
	}
	return nil
}

type RosettaBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Block *types.Block `protobuf:"bytes,1,opt,name=block,proto3" json:"block,omitempty"`
}

func (x *RosettaBlock) Reset() {
	*x = RosettaBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RosettaBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RosettaBlock) ProtoMessage() {}

func (x *RosettaBlock) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RosettaBlock.ProtoReflect.Descriptor instead.
func (*RosettaBlock) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_proto_rawDescGZIP(), []int{5}
}

func (x *RosettaBlock) GetBlock() *types.Block {
	if x != nil {
		return x.Block
	}
	return nil
}

type NativeBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Blockchain      common.Blockchain      `protobuf:"varint,1,opt,name=blockchain,proto3,enum=coinbase.c3.common.Blockchain" json:"blockchain,omitempty"`
	Network         common.Network         `protobuf:"varint,2,opt,name=network,proto3,enum=coinbase.c3.common.Network" json:"network,omitempty"`
	Tag             uint32                 `protobuf:"varint,3,opt,name=tag,proto3" json:"tag,omitempty"`
	Hash            string                 `protobuf:"bytes,4,opt,name=hash,proto3" json:"hash,omitempty"`
	ParentHash      string                 `protobuf:"bytes,5,opt,name=parent_hash,json=parentHash,proto3" json:"parent_hash,omitempty"`
	Height          uint64                 `protobuf:"varint,6,opt,name=height,proto3" json:"height,omitempty"`
	Timestamp       *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	NumTransactions uint64                 `protobuf:"varint,8,opt,name=num_transactions,json=numTransactions,proto3" json:"num_transactions,omitempty"`
	ParentHeight    uint64                 `protobuf:"varint,9,opt,name=parent_height,json=parentHeight,proto3" json:"parent_height,omitempty"`
	Skipped         bool                   `protobuf:"varint,10,opt,name=skipped,proto3" json:"skipped,omitempty"`
	// Types that are assignable to Block:
	//
	//	*NativeBlock_Ethereum
	//	*NativeBlock_Bitcoin
	//	*NativeBlock_Rosetta
	//	*NativeBlock_Solana
	Block isNativeBlock_Block `protobuf_oneof:"block"`
}

func (x *NativeBlock) Reset() {
	*x = NativeBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NativeBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NativeBlock) ProtoMessage() {}

func (x *NativeBlock) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NativeBlock.ProtoReflect.Descriptor instead.
func (*NativeBlock) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_proto_rawDescGZIP(), []int{6}
}

func (x *NativeBlock) GetBlockchain() common.Blockchain {
	if x != nil {
		return x.Blockchain
	}
	return common.Blockchain(0)
}

func (x *NativeBlock) GetNetwork() common.Network {
	if x != nil {
		return x.Network
	}
	return common.Network(0)
}

func (x *NativeBlock) GetTag() uint32 {
	if x != nil {
		return x.Tag
	}
	return 0
}

func (x *NativeBlock) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *NativeBlock) GetParentHash() string {
	if x != nil {
		return x.ParentHash
	}
	return ""
}

func (x *NativeBlock) GetHeight() uint64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *NativeBlock) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *NativeBlock) GetNumTransactions() uint64 {
	if x != nil {
		return x.NumTransactions
	}
	return 0
}

func (x *NativeBlock) GetParentHeight() uint64 {
	if x != nil {
		return x.ParentHeight
	}
	return 0
}

func (x *NativeBlock) GetSkipped() bool {
	if x != nil {
		return x.Skipped
	}
	return false
}

func (m *NativeBlock) GetBlock() isNativeBlock_Block {
	if m != nil {
		return m.Block
	}
	return nil
}

func (x *NativeBlock) GetEthereum() *EthereumBlock {
	if x, ok := x.GetBlock().(*NativeBlock_Ethereum); ok {
		return x.Ethereum
	}
	return nil
}

func (x *NativeBlock) GetBitcoin() *BitcoinBlock {
	if x, ok := x.GetBlock().(*NativeBlock_Bitcoin); ok {
		return x.Bitcoin
	}
	return nil
}

func (x *NativeBlock) GetRosetta() *types.Block {
	if x, ok := x.GetBlock().(*NativeBlock_Rosetta); ok {
		return x.Rosetta
	}
	return nil
}

func (x *NativeBlock) GetSolana() *SolanaBlock {
	if x, ok := x.GetBlock().(*NativeBlock_Solana); ok {
		return x.Solana
	}
	return nil
}

type isNativeBlock_Block interface {
	isNativeBlock_Block()
}

type NativeBlock_Ethereum struct {
	Ethereum *EthereumBlock `protobuf:"bytes,100,opt,name=ethereum,proto3,oneof"`
}

type NativeBlock_Bitcoin struct {
	Bitcoin *BitcoinBlock `protobuf:"bytes,101,opt,name=bitcoin,proto3,oneof"`
}

type NativeBlock_Rosetta struct {
	Rosetta *types.Block `protobuf:"bytes,102,opt,name=rosetta,proto3,oneof"`
}

type NativeBlock_Solana struct {
	Solana *SolanaBlock `protobuf:"bytes,103,opt,name=solana,proto3,oneof"`
}

func (*NativeBlock_Ethereum) isNativeBlock_Block() {}

func (*NativeBlock_Bitcoin) isNativeBlock_Block() {}

func (*NativeBlock_Rosetta) isNativeBlock_Block() {}

func (*NativeBlock_Solana) isNativeBlock_Block() {}

type EthereumBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header       *EthereumHeader        `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Transactions []*EthereumTransaction `protobuf:"bytes,2,rep,name=transactions,proto3" json:"transactions,omitempty"`
	Uncles       []*EthereumHeader      `protobuf:"bytes,3,rep,name=uncles,proto3" json:"uncles,omitempty"`
}

func (x *EthereumBlock) Reset() {
	*x = EthereumBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EthereumBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EthereumBlock) ProtoMessage() {}

func (x *EthereumBlock) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EthereumBlock.ProtoReflect.Descriptor instead.
func (*EthereumBlock) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_proto_rawDescGZIP(), []int{7}
}

func (x *EthereumBlock) GetHeader() *EthereumHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *EthereumBlock) GetTransactions() []*EthereumTransaction {
	if x != nil {
		return x.Transactions
	}
	return nil
}

func (x *EthereumBlock) GetUncles() []*EthereumHeader {
	if x != nil {
		return x.Uncles
	}
	return nil
}

type EthereumWithdrawal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index          uint64 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	ValidatorIndex uint64 `protobuf:"varint,2,opt,name=validator_index,json=validatorIndex,proto3" json:"validator_index,omitempty"`
	Address        string `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	Amount         uint64 `protobuf:"varint,4,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *EthereumWithdrawal) Reset() {
	*x = EthereumWithdrawal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EthereumWithdrawal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EthereumWithdrawal) ProtoMessage() {}

func (x *EthereumWithdrawal) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EthereumWithdrawal.ProtoReflect.Descriptor instead.
func (*EthereumWithdrawal) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_proto_rawDescGZIP(), []int{8}
}

func (x *EthereumWithdrawal) GetIndex() uint64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *EthereumWithdrawal) GetValidatorIndex() uint64 {
	if x != nil {
		return x.ValidatorIndex
	}
	return 0
}

func (x *EthereumWithdrawal) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *EthereumWithdrawal) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

type EthereumHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash             string                 `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	ParentHash       string                 `protobuf:"bytes,2,opt,name=parent_hash,json=parentHash,proto3" json:"parent_hash,omitempty"`
	Number           uint64                 `protobuf:"varint,3,opt,name=number,proto3" json:"number,omitempty"`
	Timestamp        *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Transactions     []string               `protobuf:"bytes,5,rep,name=transactions,proto3" json:"transactions,omitempty"`
	Nonce            string                 `protobuf:"bytes,6,opt,name=nonce,proto3" json:"nonce,omitempty"`
	Sha3Uncles       string                 `protobuf:"bytes,7,opt,name=sha3_uncles,json=sha3Uncles,proto3" json:"sha3_uncles,omitempty"`
	LogsBloom        string                 `protobuf:"bytes,8,opt,name=logs_bloom,json=logsBloom,proto3" json:"logs_bloom,omitempty"`
	TransactionsRoot string                 `protobuf:"bytes,9,opt,name=transactions_root,json=transactionsRoot,proto3" json:"transactions_root,omitempty"`
	StateRoot        string                 `protobuf:"bytes,10,opt,name=state_root,json=stateRoot,proto3" json:"state_root,omitempty"`
	ReceiptsRoot     string                 `protobuf:"bytes,11,opt,name=receipts_root,json=receiptsRoot,proto3" json:"receipts_root,omitempty"`
	Miner            string                 `protobuf:"bytes,12,opt,name=miner,proto3" json:"miner,omitempty"`
	Difficulty       uint64                 `protobuf:"varint,13,opt,name=difficulty,proto3" json:"difficulty,omitempty"`
	TotalDifficulty  string                 `protobuf:"bytes,14,opt,name=total_difficulty,json=totalDifficulty,proto3" json:"total_difficulty,omitempty"`
	ExtraData        string                 `protobuf:"bytes,15,opt,name=extra_data,json=extraData,proto3" json:"extra_data,omitempty"`
	Size             uint64                 `protobuf:"varint,16,opt,name=size,proto3" json:"size,omitempty"`
	GasLimit         uint64                 `protobuf:"varint,17,opt,name=gas_limit,json=gasLimit,proto3" json:"gas_limit,omitempty"`
	GasUsed          uint64                 `protobuf:"varint,18,opt,name=gas_used,json=gasUsed,proto3" json:"gas_used,omitempty"`
	Uncles           []string               `protobuf:"bytes,19,rep,name=uncles,proto3" json:"uncles,omitempty"`
	// Types that are assignable to OptionalBaseFeePerGas:
	//
	//	*EthereumHeader_BaseFeePerGas
	OptionalBaseFeePerGas isEthereumHeader_OptionalBaseFeePerGas `protobuf_oneof:"optional_base_fee_per_gas"`
	MixHash               string                                 `protobuf:"bytes,21,opt,name=mix_hash,json=mixHash,proto3" json:"mix_hash,omitempty"`
	Withdrawals           []*EthereumWithdrawal                  `protobuf:"bytes,22,rep,name=withdrawals,proto3" json:"withdrawals,omitempty"`
	WithdrawalsRoot       string                                 `protobuf:"bytes,23,opt,name=withdrawals_root,json=withdrawalsRoot,proto3" json:"withdrawals_root,omitempty"`
}

func (x *EthereumHeader) Reset() {
	*x = EthereumHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EthereumHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EthereumHeader) ProtoMessage() {}

func (x *EthereumHeader) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EthereumHeader.ProtoReflect.Descriptor instead.
func (*EthereumHeader) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_proto_rawDescGZIP(), []int{9}
}

func (x *EthereumHeader) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *EthereumHeader) GetParentHash() string {
	if x != nil {
		return x.ParentHash
	}
	return ""
}

func (x *EthereumHeader) GetNumber() uint64 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *EthereumHeader) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *EthereumHeader) GetTransactions() []string {
	if x != nil {
		return x.Transactions
	}
	return nil
}

func (x *EthereumHeader) GetNonce() string {
	if x != nil {
		return x.Nonce
	}
	return ""
}

func (x *EthereumHeader) GetSha3Uncles() string {
	if x != nil {
		return x.Sha3Uncles
	}
	return ""
}

func (x *EthereumHeader) GetLogsBloom() string {
	if x != nil {
		return x.LogsBloom
	}
	return ""
}

func (x *EthereumHeader) GetTransactionsRoot() string {
	if x != nil {
		return x.TransactionsRoot
	}
	return ""
}

func (x *EthereumHeader) GetStateRoot() string {
	if x != nil {
		return x.StateRoot
	}
	return ""
}

func (x *EthereumHeader) GetReceiptsRoot() string {
	if x != nil {
		return x.ReceiptsRoot
	}
	return ""
}

func (x *EthereumHeader) GetMiner() string {
	if x != nil {
		return x.Miner
	}
	return ""
}

func (x *EthereumHeader) GetDifficulty() uint64 {
	if x != nil {
		return x.Difficulty
	}
	return 0
}

func (x *EthereumHeader) GetTotalDifficulty() string {
	if x != nil {
		return x.TotalDifficulty
	}
	return ""
}

func (x *EthereumHeader) GetExtraData() string {
	if x != nil {
		return x.ExtraData
	}
	return ""
}

func (x *EthereumHeader) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *EthereumHeader) GetGasLimit() uint64 {
	if x != nil {
		return x.GasLimit
	}
	return 0
}

func (x *EthereumHeader) GetGasUsed() uint64 {
	if x != nil {
		return x.GasUsed
	}
	return 0
}

func (x *EthereumHeader) GetUncles() []string {
	if x != nil {
		return x.Uncles
	}
	return nil
}

func (m *EthereumHeader) GetOptionalBaseFeePerGas() isEthereumHeader_OptionalBaseFeePerGas {
	if m != nil {
		return m.OptionalBaseFeePerGas
	}
	return nil
}

func (x *EthereumHeader) GetBaseFeePerGas() uint64 {
	if x, ok := x.GetOptionalBaseFeePerGas().(*EthereumHeader_BaseFeePerGas); ok {
		return x.BaseFeePerGas
	}
	return 0
}

func (x *EthereumHeader) GetMixHash() string {
	if x != nil {
		return x.MixHash
	}
	return ""
}

func (x *EthereumHeader) GetWithdrawals() []*EthereumWithdrawal {
	if x != nil {
		return x.Withdrawals
	}
	return nil
}

func (x *EthereumHeader) GetWithdrawalsRoot() string {
	if x != nil {
		return x.WithdrawalsRoot
	}
	return ""
}

type isEthereumHeader_OptionalBaseFeePerGas interface {
	isEthereumHeader_OptionalBaseFeePerGas()
}

type EthereumHeader_BaseFeePerGas struct {
	BaseFeePerGas uint64 `protobuf:"varint,20,opt,name=base_fee_per_gas,json=baseFeePerGas,proto3,oneof"`
}

func (*EthereumHeader_BaseFeePerGas) isEthereumHeader_OptionalBaseFeePerGas() {}

type EthereumTransactionAccess struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address     string   `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	StorageKeys []string `protobuf:"bytes,2,rep,name=storage_keys,json=storageKeys,proto3" json:"storage_keys,omitempty"`
}

func (x *EthereumTransactionAccess) Reset() {
	*x = EthereumTransactionAccess{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EthereumTransactionAccess) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EthereumTransactionAccess) ProtoMessage() {}

func (x *EthereumTransactionAccess) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EthereumTransactionAccess.ProtoReflect.Descriptor instead.
func (*EthereumTransactionAccess) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_proto_rawDescGZIP(), []int{10}
}

func (x *EthereumTransactionAccess) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *EthereumTransactionAccess) GetStorageKeys() []string {
	if x != nil {
		return x.StorageKeys
	}
	return nil
}

type EthereumTransactionAccessList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessList []*EthereumTransactionAccess `protobuf:"bytes,1,rep,name=access_list,json=accessList,proto3" json:"access_list,omitempty"`
}

func (x *EthereumTransactionAccessList) Reset() {
	*x = EthereumTransactionAccessList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EthereumTransactionAccessList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EthereumTransactionAccessList) ProtoMessage() {}

func (x *EthereumTransactionAccessList) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EthereumTransactionAccessList.ProtoReflect.Descriptor instead.
func (*EthereumTransactionAccessList) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_proto_rawDescGZIP(), []int{11}
}

func (x *EthereumTransactionAccessList) GetAccessList() []*EthereumTransactionAccess {
	if x != nil {
		return x.AccessList
	}
	return nil
}

type EthereumTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockHash   string                      `protobuf:"bytes,1,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	BlockNumber uint64                      `protobuf:"varint,2,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	From        string                      `protobuf:"bytes,3,opt,name=from,proto3" json:"from,omitempty"`
	Gas         uint64                      `protobuf:"varint,4,opt,name=gas,proto3" json:"gas,omitempty"`
	GasPrice    uint64                      `protobuf:"varint,5,opt,name=gas_price,json=gasPrice,proto3" json:"gas_price,omitempty"`
	Hash        string                      `protobuf:"bytes,6,opt,name=hash,proto3" json:"hash,omitempty"`
	Input       string                      `protobuf:"bytes,7,opt,name=input,proto3" json:"input,omitempty"`
	Nonce       uint64                      `protobuf:"varint,8,opt,name=nonce,proto3" json:"nonce,omitempty"`
	To          string                      `protobuf:"bytes,9,opt,name=to,proto3" json:"to,omitempty"`
	Index       uint64                      `protobuf:"varint,10,opt,name=index,proto3" json:"index,omitempty"`
	Value       string                      `protobuf:"bytes,11,opt,name=value,proto3" json:"value,omitempty"`
	Receipt     *EthereumTransactionReceipt `protobuf:"bytes,12,opt,name=receipt,proto3" json:"receipt,omitempty"`
	// EthereumTransactionTrace trace = 13;
	TokenTransfers []*EthereumTokenTransfer `protobuf:"bytes,14,rep,name=token_transfers,json=tokenTransfers,proto3" json:"token_transfers,omitempty"`
	Type           uint64                   `protobuf:"varint,15,opt,name=type,proto3" json:"type,omitempty"`
	// Types that are assignable to OptionalMaxFeePerGas:
	//
	//	*EthereumTransaction_MaxFeePerGas
	OptionalMaxFeePerGas isEthereumTransaction_OptionalMaxFeePerGas `protobuf_oneof:"optional_max_fee_per_gas"`
	// Types that are assignable to OptionalMaxPriorityFeePerGas:
	//
	//	*EthereumTransaction_MaxPriorityFeePerGas
	OptionalMaxPriorityFeePerGas isEthereumTransaction_OptionalMaxPriorityFeePerGas `protobuf_oneof:"optional_max_priority_fee_per_gas"`
	// Types that are assignable to OptionalTransactionAccessList:
	//
	//	*EthereumTransaction_TransactionAccessList
	OptionalTransactionAccessList isEthereumTransaction_OptionalTransactionAccessList `protobuf_oneof:"optional_transaction_access_list"`
	FlattenedTraces               []*EthereumTransactionFlattenedTrace                `protobuf:"bytes,19,rep,name=flattened_traces,json=flattenedTraces,proto3" json:"flattened_traces,omitempty"`
	BlockTimestamp                *timestamppb.Timestamp                              `protobuf:"bytes,20,opt,name=block_timestamp,json=blockTimestamp,proto3" json:"block_timestamp,omitempty"`
	// Types that are assignable to OptionalPriorityFeePerGas:
	//
	//	*EthereumTransaction_PriorityFeePerGas
	OptionalPriorityFeePerGas isEthereumTransaction_OptionalPriorityFeePerGas `protobuf_oneof:"optional_priority_fee_per_gas"`
}

func (x *EthereumTransaction) Reset() {
	*x = EthereumTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EthereumTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EthereumTransaction) ProtoMessage() {}

func (x *EthereumTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EthereumTransaction.ProtoReflect.Descriptor instead.
func (*EthereumTransaction) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_proto_rawDescGZIP(), []int{12}
}

func (x *EthereumTransaction) GetBlockHash() string {
	if x != nil {
		return x.BlockHash
	}
	return ""
}

func (x *EthereumTransaction) GetBlockNumber() uint64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (x *EthereumTransaction) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *EthereumTransaction) GetGas() uint64 {
	if x != nil {
		return x.Gas
	}
	return 0
}

func (x *EthereumTransaction) GetGasPrice() uint64 {
	if x != nil {
		return x.GasPrice
	}
	return 0
}

func (x *EthereumTransaction) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *EthereumTransaction) GetInput() string {
	if x != nil {
		return x.Input
	}
	return ""
}

func (x *EthereumTransaction) GetNonce() uint64 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

func (x *EthereumTransaction) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *EthereumTransaction) GetIndex() uint64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *EthereumTransaction) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *EthereumTransaction) GetReceipt() *EthereumTransactionReceipt {
	if x != nil {
		return x.Receipt
	}
	return nil
}

func (x *EthereumTransaction) GetTokenTransfers() []*EthereumTokenTransfer {
	if x != nil {
		return x.TokenTransfers
	}
	return nil
}

func (x *EthereumTransaction) GetType() uint64 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (m *EthereumTransaction) GetOptionalMaxFeePerGas() isEthereumTransaction_OptionalMaxFeePerGas {
	if m != nil {
		return m.OptionalMaxFeePerGas
	}
	return nil
}

func (x *EthereumTransaction) GetMaxFeePerGas() uint64 {
	if x, ok := x.GetOptionalMaxFeePerGas().(*EthereumTransaction_MaxFeePerGas); ok {
		return x.MaxFeePerGas
	}
	return 0
}

func (m *EthereumTransaction) GetOptionalMaxPriorityFeePerGas() isEthereumTransaction_OptionalMaxPriorityFeePerGas {
	if m != nil {
		return m.OptionalMaxPriorityFeePerGas
	}
	return nil
}

func (x *EthereumTransaction) GetMaxPriorityFeePerGas() uint64 {
	if x, ok := x.GetOptionalMaxPriorityFeePerGas().(*EthereumTransaction_MaxPriorityFeePerGas); ok {
		return x.MaxPriorityFeePerGas
	}
	return 0
}

func (m *EthereumTransaction) GetOptionalTransactionAccessList() isEthereumTransaction_OptionalTransactionAccessList {
	if m != nil {
		return m.OptionalTransactionAccessList
	}
	return nil
}

func (x *EthereumTransaction) GetTransactionAccessList() *EthereumTransactionAccessList {
	if x, ok := x.GetOptionalTransactionAccessList().(*EthereumTransaction_TransactionAccessList); ok {
		return x.TransactionAccessList
	}
	return nil
}

func (x *EthereumTransaction) GetFlattenedTraces() []*EthereumTransactionFlattenedTrace {
	if x != nil {
		return x.FlattenedTraces
	}
	return nil
}

func (x *EthereumTransaction) GetBlockTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.BlockTimestamp
	}
	return nil
}

func (m *EthereumTransaction) GetOptionalPriorityFeePerGas() isEthereumTransaction_OptionalPriorityFeePerGas {
	if m != nil {
		return m.OptionalPriorityFeePerGas
	}
	return nil
}

func (x *EthereumTransaction) GetPriorityFeePerGas() uint64 {
	if x, ok := x.GetOptionalPriorityFeePerGas().(*EthereumTransaction_PriorityFeePerGas); ok {
		return x.PriorityFeePerGas
	}
	return 0
}

type isEthereumTransaction_OptionalMaxFeePerGas interface {
	isEthereumTransaction_OptionalMaxFeePerGas()
}

type EthereumTransaction_MaxFeePerGas struct {
	MaxFeePerGas uint64 `protobuf:"varint,16,opt,name=max_fee_per_gas,json=maxFeePerGas,proto3,oneof"`
}

func (*EthereumTransaction_MaxFeePerGas) isEthereumTransaction_OptionalMaxFeePerGas() {}

type isEthereumTransaction_OptionalMaxPriorityFeePerGas interface {
	isEthereumTransaction_OptionalMaxPriorityFeePerGas()
}

type EthereumTransaction_MaxPriorityFeePerGas struct {
	MaxPriorityFeePerGas uint64 `protobuf:"varint,17,opt,name=max_priority_fee_per_gas,json=maxPriorityFeePerGas,proto3,oneof"`
}

func (*EthereumTransaction_MaxPriorityFeePerGas) isEthereumTransaction_OptionalMaxPriorityFeePerGas() {
}

type isEthereumTransaction_OptionalTransactionAccessList interface {
	isEthereumTransaction_OptionalTransactionAccessList()
}

type EthereumTransaction_TransactionAccessList struct {
	TransactionAccessList *EthereumTransactionAccessList `protobuf:"bytes,18,opt,name=transaction_access_list,json=transactionAccessList,proto3,oneof"`
}

func (*EthereumTransaction_TransactionAccessList) isEthereumTransaction_OptionalTransactionAccessList() {
}

type isEthereumTransaction_OptionalPriorityFeePerGas interface {
	isEthereumTransaction_OptionalPriorityFeePerGas()
}

type EthereumTransaction_PriorityFeePerGas struct {
	PriorityFeePerGas uint64 `protobuf:"varint,21,opt,name=priority_fee_per_gas,json=priorityFeePerGas,proto3,oneof"`
}

func (*EthereumTransaction_PriorityFeePerGas) isEthereumTransaction_OptionalPriorityFeePerGas() {}

type EthereumTransactionReceipt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionHash   string              `protobuf:"bytes,1,opt,name=transaction_hash,json=transactionHash,proto3" json:"transaction_hash,omitempty"`
	TransactionIndex  uint64              `protobuf:"varint,2,opt,name=transaction_index,json=transactionIndex,proto3" json:"transaction_index,omitempty"`
	BlockHash         string              `protobuf:"bytes,3,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	BlockNumber       uint64              `protobuf:"varint,4,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	From              string              `protobuf:"bytes,5,opt,name=from,proto3" json:"from,omitempty"`
	To                string              `protobuf:"bytes,6,opt,name=to,proto3" json:"to,omitempty"`
	CumulativeGasUsed uint64              `protobuf:"varint,7,opt,name=cumulative_gas_used,json=cumulativeGasUsed,proto3" json:"cumulative_gas_used,omitempty"`
	GasUsed           uint64              `protobuf:"varint,8,opt,name=gas_used,json=gasUsed,proto3" json:"gas_used,omitempty"`
	ContractAddress   string              `protobuf:"bytes,9,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
	Logs              []*EthereumEventLog `protobuf:"bytes,10,rep,name=logs,proto3" json:"logs,omitempty"`
	LogsBloom         string              `protobuf:"bytes,11,opt,name=logs_bloom,json=logsBloom,proto3" json:"logs_bloom,omitempty"`
	Root              string              `protobuf:"bytes,12,opt,name=root,proto3" json:"root,omitempty"`
	// Types that are assignable to OptionalStatus:
	//
	//	*EthereumTransactionReceipt_Status
	OptionalStatus    isEthereumTransactionReceipt_OptionalStatus `protobuf_oneof:"optional_status"`
	Type              uint64                                      `protobuf:"varint,15,opt,name=type,proto3" json:"type,omitempty"`
	EffectiveGasPrice uint64                                      `protobuf:"varint,16,opt,name=effective_gas_price,json=effectiveGasPrice,proto3" json:"effective_gas_price,omitempty"`
	// Types that are assignable to OptionalL1FeeInfo:
	//
	//	*EthereumTransactionReceipt_L1FeeInfo_
	OptionalL1FeeInfo isEthereumTransactionReceipt_OptionalL1FeeInfo `protobuf_oneof:"optional_l1_fee_info"`
}

func (x *EthereumTransactionReceipt) Reset() {
	*x = EthereumTransactionReceipt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EthereumTransactionReceipt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EthereumTransactionReceipt) ProtoMessage() {}

func (x *EthereumTransactionReceipt) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EthereumTransactionReceipt.ProtoReflect.Descriptor instead.
func (*EthereumTransactionReceipt) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_proto_rawDescGZIP(), []int{13}
}

func (x *EthereumTransactionReceipt) GetTransactionHash() string {
	if x != nil {
		return x.TransactionHash
	}
	return ""
}

func (x *EthereumTransactionReceipt) GetTransactionIndex() uint64 {
	if x != nil {
		return x.TransactionIndex
	}
	return 0
}

func (x *EthereumTransactionReceipt) GetBlockHash() string {
	if x != nil {
		return x.BlockHash
	}
	return ""
}

func (x *EthereumTransactionReceipt) GetBlockNumber() uint64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (x *EthereumTransactionReceipt) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *EthereumTransactionReceipt) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *EthereumTransactionReceipt) GetCumulativeGasUsed() uint64 {
	if x != nil {
		return x.CumulativeGasUsed
	}
	return 0
}

func (x *EthereumTransactionReceipt) GetGasUsed() uint64 {
	if x != nil {
		return x.GasUsed
	}
	return 0
}

func (x *EthereumTransactionReceipt) GetContractAddress() string {
	if x != nil {
		return x.ContractAddress
	}
	return ""
}

func (x *EthereumTransactionReceipt) GetLogs() []*EthereumEventLog {
	if x != nil {
		return x.Logs
	}
	return nil
}

func (x *EthereumTransactionReceipt) GetLogsBloom() string {
	if x != nil {
		return x.LogsBloom
	}
	return ""
}

func (x *EthereumTransactionReceipt) GetRoot() string {
	if x != nil {
		return x.Root
	}
	return ""
}

func (m *EthereumTransactionReceipt) GetOptionalStatus() isEthereumTransactionReceipt_OptionalStatus {
	if m != nil {
		return m.OptionalStatus
	}
	return nil
}

func (x *EthereumTransactionReceipt) GetStatus() uint64 {
	if x, ok := x.GetOptionalStatus().(*EthereumTransactionReceipt_Status); ok {
		return x.Status
	}
	return 0
}

func (x *EthereumTransactionReceipt) GetType() uint64 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *EthereumTransactionReceipt) GetEffectiveGasPrice() uint64 {
	if x != nil {
		return x.EffectiveGasPrice
	}
	return 0
}

func (m *EthereumTransactionReceipt) GetOptionalL1FeeInfo() isEthereumTransactionReceipt_OptionalL1FeeInfo {
	if m != nil {
		return m.OptionalL1FeeInfo
	}
	return nil
}

func (x *EthereumTransactionReceipt) GetL1FeeInfo() *EthereumTransactionReceipt_L1FeeInfo {
	if x, ok := x.GetOptionalL1FeeInfo().(*EthereumTransactionReceipt_L1FeeInfo_); ok {
		return x.L1FeeInfo
	}
	return nil
}

type isEthereumTransactionReceipt_OptionalStatus interface {
	isEthereumTransactionReceipt_OptionalStatus()
}

type EthereumTransactionReceipt_Status struct {
	Status uint64 `protobuf:"varint,14,opt,name=status,proto3,oneof"`
}

func (*EthereumTransactionReceipt_Status) isEthereumTransactionReceipt_OptionalStatus() {}

type isEthereumTransactionReceipt_OptionalL1FeeInfo interface {
	isEthereumTransactionReceipt_OptionalL1FeeInfo()
}

type EthereumTransactionReceipt_L1FeeInfo_ struct {
	L1FeeInfo *EthereumTransactionReceipt_L1FeeInfo `protobuf:"bytes,17,opt,name=l1_fee_info,json=l1FeeInfo,proto3,oneof"`
}

func (*EthereumTransactionReceipt_L1FeeInfo_) isEthereumTransactionReceipt_OptionalL1FeeInfo() {}

type EthereumEventLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Removed          bool     `protobuf:"varint,1,opt,name=removed,proto3" json:"removed,omitempty"`
	LogIndex         uint64   `protobuf:"varint,2,opt,name=log_index,json=logIndex,proto3" json:"log_index,omitempty"`
	TransactionHash  string   `protobuf:"bytes,3,opt,name=transaction_hash,json=transactionHash,proto3" json:"transaction_hash,omitempty"`
	TransactionIndex uint64   `protobuf:"varint,4,opt,name=transaction_index,json=transactionIndex,proto3" json:"transaction_index,omitempty"`
	BlockHash        string   `protobuf:"bytes,5,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	BlockNumber      uint64   `protobuf:"varint,6,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	Address          string   `protobuf:"bytes,7,opt,name=address,proto3" json:"address,omitempty"`
	Data             string   `protobuf:"bytes,8,opt,name=data,proto3" json:"data,omitempty"`
	Topics           []string `protobuf:"bytes,9,rep,name=topics,proto3" json:"topics,omitempty"`
}

func (x *EthereumEventLog) Reset() {
	*x = EthereumEventLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EthereumEventLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EthereumEventLog) ProtoMessage() {}

func (x *EthereumEventLog) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EthereumEventLog.ProtoReflect.Descriptor instead.
func (*EthereumEventLog) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_proto_rawDescGZIP(), []int{14}
}

func (x *EthereumEventLog) GetRemoved() bool {
	if x != nil {
		return x.Removed
	}
	return false
}

func (x *EthereumEventLog) GetLogIndex() uint64 {
	if x != nil {
		return x.LogIndex
	}
	return 0
}

func (x *EthereumEventLog) GetTransactionHash() string {
	if x != nil {
		return x.TransactionHash
	}
	return ""
}

func (x *EthereumEventLog) GetTransactionIndex() uint64 {
	if x != nil {
		return x.TransactionIndex
	}
	return 0
}

func (x *EthereumEventLog) GetBlockHash() string {
	if x != nil {
		return x.BlockHash
	}
	return ""
}

func (x *EthereumEventLog) GetBlockNumber() uint64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (x *EthereumEventLog) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *EthereumEventLog) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *EthereumEventLog) GetTopics() []string {
	if x != nil {
		return x.Topics
	}
	return nil
}

type EthereumTransactionTrace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error   string                      `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	Type    string                      `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	From    string                      `protobuf:"bytes,3,opt,name=from,proto3" json:"from,omitempty"`
	To      string                      `protobuf:"bytes,4,opt,name=to,proto3" json:"to,omitempty"`
	Value   string                      `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"`
	Gas     uint64                      `protobuf:"varint,6,opt,name=gas,proto3" json:"gas,omitempty"`
	GasUsed uint64                      `protobuf:"varint,7,opt,name=gas_used,json=gasUsed,proto3" json:"gas_used,omitempty"`
	Input   string                      `protobuf:"bytes,8,opt,name=input,proto3" json:"input,omitempty"`
	Output  string                      `protobuf:"bytes,9,opt,name=output,proto3" json:"output,omitempty"`
	Calls   []*EthereumTransactionTrace `protobuf:"bytes,10,rep,name=calls,proto3" json:"calls,omitempty"`
}

func (x *EthereumTransactionTrace) Reset() {
	*x = EthereumTransactionTrace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EthereumTransactionTrace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EthereumTransactionTrace) ProtoMessage() {}

func (x *EthereumTransactionTrace) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EthereumTransactionTrace.ProtoReflect.Descriptor instead.
func (*EthereumTransactionTrace) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_proto_rawDescGZIP(), []int{15}
}

func (x *EthereumTransactionTrace) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *EthereumTransactionTrace) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *EthereumTransactionTrace) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *EthereumTransactionTrace) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *EthereumTransactionTrace) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *EthereumTransactionTrace) GetGas() uint64 {
	if x != nil {
		return x.Gas
	}
	return 0
}

func (x *EthereumTransactionTrace) GetGasUsed() uint64 {
	if x != nil {
		return x.GasUsed
	}
	return 0
}

func (x *EthereumTransactionTrace) GetInput() string {
	if x != nil {
		return x.Input
	}
	return ""
}

func (x *EthereumTransactionTrace) GetOutput() string {
	if x != nil {
		return x.Output
	}
	return ""
}

func (x *EthereumTransactionTrace) GetCalls() []*EthereumTransactionTrace {
	if x != nil {
		return x.Calls
	}
	return nil
}

type EthereumTransactionFlattenedTrace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error            string   `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	Type             string   `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	From             string   `protobuf:"bytes,3,opt,name=from,proto3" json:"from,omitempty"`
	To               string   `protobuf:"bytes,4,opt,name=to,proto3" json:"to,omitempty"`
	Value            string   `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"`
	Gas              uint64   `protobuf:"varint,6,opt,name=gas,proto3" json:"gas,omitempty"`
	GasUsed          uint64   `protobuf:"varint,7,opt,name=gas_used,json=gasUsed,proto3" json:"gas_used,omitempty"`
	Input            string   `protobuf:"bytes,8,opt,name=input,proto3" json:"input,omitempty"`
	Output           string   `protobuf:"bytes,9,opt,name=output,proto3" json:"output,omitempty"`
	Subtraces        uint64   `protobuf:"varint,10,opt,name=subtraces,proto3" json:"subtraces,omitempty"`
	TraceAddress     []uint64 `protobuf:"varint,11,rep,packed,name=trace_address,json=traceAddress,proto3" json:"trace_address,omitempty"`
	TraceType        string   `protobuf:"bytes,12,opt,name=trace_type,json=traceType,proto3" json:"trace_type,omitempty"`
	CallType         string   `protobuf:"bytes,13,opt,name=call_type,json=callType,proto3" json:"call_type,omitempty"`
	TraceId          string   `protobuf:"bytes,14,opt,name=trace_id,json=traceId,proto3" json:"trace_id,omitempty"`
	Status           uint64   `protobuf:"varint,15,opt,name=status,proto3" json:"status,omitempty"`
	BlockHash        string   `protobuf:"bytes,16,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	BlockNumber      uint64   `protobuf:"varint,17,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	TransactionHash  string   `protobuf:"bytes,18,opt,name=transaction_hash,json=transactionHash,proto3" json:"transaction_hash,omitempty"`
	TransactionIndex uint64   `protobuf:"varint,19,opt,name=transaction_index,json=transactionIndex,proto3" json:"transaction_index,omitempty"`
}

func (x *EthereumTransactionFlattenedTrace) Reset() {
	*x = EthereumTransactionFlattenedTrace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EthereumTransactionFlattenedTrace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EthereumTransactionFlattenedTrace) ProtoMessage() {}

func (x *EthereumTransactionFlattenedTrace) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EthereumTransactionFlattenedTrace.ProtoReflect.Descriptor instead.
func (*EthereumTransactionFlattenedTrace) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_proto_rawDescGZIP(), []int{16}
}

func (x *EthereumTransactionFlattenedTrace) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *EthereumTransactionFlattenedTrace) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *EthereumTransactionFlattenedTrace) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *EthereumTransactionFlattenedTrace) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *EthereumTransactionFlattenedTrace) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *EthereumTransactionFlattenedTrace) GetGas() uint64 {
	if x != nil {
		return x.Gas
	}
	return 0
}

func (x *EthereumTransactionFlattenedTrace) GetGasUsed() uint64 {
	if x != nil {
		return x.GasUsed
	}
	return 0
}

func (x *EthereumTransactionFlattenedTrace) GetInput() string {
	if x != nil {
		return x.Input
	}
	return ""
}

func (x *EthereumTransactionFlattenedTrace) GetOutput() string {
	if x != nil {
		return x.Output
	}
	return ""
}

func (x *EthereumTransactionFlattenedTrace) GetSubtraces() uint64 {
	if x != nil {
		return x.Subtraces
	}
	return 0
}

func (x *EthereumTransactionFlattenedTrace) GetTraceAddress() []uint64 {
	if x != nil {
		return x.TraceAddress
	}
	return nil
}

func (x *EthereumTransactionFlattenedTrace) GetTraceType() string {
	if x != nil {
		return x.TraceType
	}
	return ""
}

func (x *EthereumTransactionFlattenedTrace) GetCallType() string {
	if x != nil {
		return x.CallType
	}
	return ""
}

func (x *EthereumTransactionFlattenedTrace) GetTraceId() string {
	if x != nil {
		return x.TraceId
	}
	return ""
}

func (x *EthereumTransactionFlattenedTrace) GetStatus() uint64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *EthereumTransactionFlattenedTrace) GetBlockHash() string {
	if x != nil {
		return x.BlockHash
	}
	return ""
}

func (x *EthereumTransactionFlattenedTrace) GetBlockNumber() uint64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (x *EthereumTransactionFlattenedTrace) GetTransactionHash() string {
	if x != nil {
		return x.TransactionHash
	}
	return ""
}

func (x *EthereumTransactionFlattenedTrace) GetTransactionIndex() uint64 {
	if x != nil {
		return x.TransactionIndex
	}
	return 0
}

type EthereumTokenTransfer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TokenAddress     string `protobuf:"bytes,1,opt,name=token_address,json=tokenAddress,proto3" json:"token_address,omitempty"`
	FromAddress      string `protobuf:"bytes,2,opt,name=from_address,json=fromAddress,proto3" json:"from_address,omitempty"`
	ToAddress        string `protobuf:"bytes,3,opt,name=to_address,json=toAddress,proto3" json:"to_address,omitempty"`
	Value            string `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
	TransactionIndex uint64 `protobuf:"varint,5,opt,name=transaction_index,json=transactionIndex,proto3" json:"transaction_index,omitempty"`
	TransactionHash  string `protobuf:"bytes,6,opt,name=transaction_hash,json=transactionHash,proto3" json:"transaction_hash,omitempty"`
	LogIndex         uint64 `protobuf:"varint,7,opt,name=log_index,json=logIndex,proto3" json:"log_index,omitempty"`
	BlockHash        string `protobuf:"bytes,8,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	BlockNumber      uint64 `protobuf:"varint,9,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	// Types that are assignable to TokenTransfer:
	//
	//	*EthereumTokenTransfer_Erc20
	//	*EthereumTokenTransfer_Erc721
	TokenTransfer isEthereumTokenTransfer_TokenTransfer `protobuf_oneof:"token_transfer"`
}

func (x *EthereumTokenTransfer) Reset() {
	*x = EthereumTokenTransfer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EthereumTokenTransfer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EthereumTokenTransfer) ProtoMessage() {}

func (x *EthereumTokenTransfer) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EthereumTokenTransfer.ProtoReflect.Descriptor instead.
func (*EthereumTokenTransfer) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_proto_rawDescGZIP(), []int{17}
}

func (x *EthereumTokenTransfer) GetTokenAddress() string {
	if x != nil {
		return x.TokenAddress
	}
	return ""
}

func (x *EthereumTokenTransfer) GetFromAddress() string {
	if x != nil {
		return x.FromAddress
	}
	return ""
}

func (x *EthereumTokenTransfer) GetToAddress() string {
	if x != nil {
		return x.ToAddress
	}
	return ""
}

func (x *EthereumTokenTransfer) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *EthereumTokenTransfer) GetTransactionIndex() uint64 {
	if x != nil {
		return x.TransactionIndex
	}
	return 0
}

func (x *EthereumTokenTransfer) GetTransactionHash() string {
	if x != nil {
		return x.TransactionHash
	}
	return ""
}

func (x *EthereumTokenTransfer) GetLogIndex() uint64 {
	if x != nil {
		return x.LogIndex
	}
	return 0
}

func (x *EthereumTokenTransfer) GetBlockHash() string {
	if x != nil {
		return x.BlockHash
	}
	return ""
}

func (x *EthereumTokenTransfer) GetBlockNumber() uint64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (m *EthereumTokenTransfer) GetTokenTransfer() isEthereumTokenTransfer_TokenTransfer {
	if m != nil {
		return m.TokenTransfer
	}
	return nil
}

func (x *EthereumTokenTransfer) GetErc20() *ERC20TokenTransfer {
	if x, ok := x.GetTokenTransfer().(*EthereumTokenTransfer_Erc20); ok {
		return x.Erc20
	}
	return nil
}

func (x *EthereumTokenTransfer) GetErc721() *ERC721TokenTransfer {
	if x, ok := x.GetTokenTransfer().(*EthereumTokenTransfer_Erc721); ok {
		return x.Erc721
	}
	return nil
}

type isEthereumTokenTransfer_TokenTransfer interface {
	isEthereumTokenTransfer_TokenTransfer()
}

type EthereumTokenTransfer_Erc20 struct {
	Erc20 *ERC20TokenTransfer `protobuf:"bytes,100,opt,name=erc20,proto3,oneof"`
}

type EthereumTokenTransfer_Erc721 struct {
	Erc721 *ERC721TokenTransfer `protobuf:"bytes,101,opt,name=erc721,proto3,oneof"`
}

func (*EthereumTokenTransfer_Erc20) isEthereumTokenTransfer_TokenTransfer() {}

func (*EthereumTokenTransfer_Erc721) isEthereumTokenTransfer_TokenTransfer() {}

type ERC20TokenTransfer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromAddress string `protobuf:"bytes,1,opt,name=from_address,json=fromAddress,proto3" json:"from_address,omitempty"`
	ToAddress   string `protobuf:"bytes,2,opt,name=to_address,json=toAddress,proto3" json:"to_address,omitempty"`
	Value       string `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ERC20TokenTransfer) Reset() {
	*x = ERC20TokenTransfer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ERC20TokenTransfer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ERC20TokenTransfer) ProtoMessage() {}

func (x *ERC20TokenTransfer) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ERC20TokenTransfer.ProtoReflect.Descriptor instead.
func (*ERC20TokenTransfer) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_proto_rawDescGZIP(), []int{18}
}

func (x *ERC20TokenTransfer) GetFromAddress() string {
	if x != nil {
		return x.FromAddress
	}
	return ""
}

func (x *ERC20TokenTransfer) GetToAddress() string {
	if x != nil {
		return x.ToAddress
	}
	return ""
}

func (x *ERC20TokenTransfer) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type ERC721TokenTransfer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromAddress string `protobuf:"bytes,1,opt,name=from_address,json=fromAddress,proto3" json:"from_address,omitempty"`
	ToAddress   string `protobuf:"bytes,2,opt,name=to_address,json=toAddress,proto3" json:"to_address,omitempty"`
	TokenId     string `protobuf:"bytes,3,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty"`
}

func (x *ERC721TokenTransfer) Reset() {
	*x = ERC721TokenTransfer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ERC721TokenTransfer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ERC721TokenTransfer) ProtoMessage() {}

func (x *ERC721TokenTransfer) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ERC721TokenTransfer.ProtoReflect.Descriptor instead.
func (*ERC721TokenTransfer) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_proto_rawDescGZIP(), []int{19}
}

func (x *ERC721TokenTransfer) GetFromAddress() string {
	if x != nil {
		return x.FromAddress
	}
	return ""
}

func (x *ERC721TokenTransfer) GetToAddress() string {
	if x != nil {
		return x.ToAddress
	}
	return ""
}

func (x *ERC721TokenTransfer) GetTokenId() string {
	if x != nil {
		return x.TokenId
	}
	return ""
}

type BitcoinBlobdata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header            []byte           `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	InputTransactions []*RepeatedBytes `protobuf:"bytes,2,rep,name=input_transactions,json=inputTransactions,proto3" json:"input_transactions,omitempty"`
}

func (x *BitcoinBlobdata) Reset() {
	*x = BitcoinBlobdata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BitcoinBlobdata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BitcoinBlobdata) ProtoMessage() {}

func (x *BitcoinBlobdata) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BitcoinBlobdata.ProtoReflect.Descriptor instead.
func (*BitcoinBlobdata) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_proto_rawDescGZIP(), []int{20}
}

func (x *BitcoinBlobdata) GetHeader() []byte {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *BitcoinBlobdata) GetInputTransactions() []*RepeatedBytes {
	if x != nil {
		return x.InputTransactions
	}
	return nil
}

type RepeatedBytes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data [][]byte `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *RepeatedBytes) Reset() {
	*x = RepeatedBytes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepeatedBytes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepeatedBytes) ProtoMessage() {}

func (x *RepeatedBytes) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepeatedBytes.ProtoReflect.Descriptor instead.
func (*RepeatedBytes) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_proto_rawDescGZIP(), []int{21}
}

func (x *RepeatedBytes) GetData() [][]byte {
	if x != nil {
		return x.Data
	}
	return nil
}

// BitcoinHeader https://developer.bitcoin.org/reference/rpc/getblock.html
type BitcoinHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash string `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	// uint64 confirmations = 2; // confirmations is a transient state, so not exposing
	StrippedSize         uint64                 `protobuf:"varint,3,opt,name=stripped_size,json=strippedSize,proto3" json:"stripped_size,omitempty"`
	Size                 uint64                 `protobuf:"varint,4,opt,name=size,proto3" json:"size,omitempty"`
	Weight               uint64                 `protobuf:"varint,5,opt,name=weight,proto3" json:"weight,omitempty"`
	Height               uint64                 `protobuf:"varint,6,opt,name=height,proto3" json:"height,omitempty"`
	Version              uint64                 `protobuf:"varint,7,opt,name=version,proto3" json:"version,omitempty"`
	VersionHex           string                 `protobuf:"bytes,8,opt,name=version_hex,json=versionHex,proto3" json:"version_hex,omitempty"`
	MerkleRoot           string                 `protobuf:"bytes,9,opt,name=merkle_root,json=merkleRoot,proto3" json:"merkle_root,omitempty"`
	Time                 uint64                 `protobuf:"varint,10,opt,name=time,proto3" json:"time,omitempty"`
	MedianTime           uint64                 `protobuf:"varint,11,opt,name=median_time,json=medianTime,proto3" json:"median_time,omitempty"`
	Nonce                uint64                 `protobuf:"varint,12,opt,name=nonce,proto3" json:"nonce,omitempty"`
	Bits                 string                 `protobuf:"bytes,13,opt,name=bits,proto3" json:"bits,omitempty"`
	Difficulty           string                 `protobuf:"bytes,14,opt,name=difficulty,proto3" json:"difficulty,omitempty"`
	ChainWork            string                 `protobuf:"bytes,15,opt,name=chain_work,json=chainWork,proto3" json:"chain_work,omitempty"`
	NumberOfTransactions uint64                 `protobuf:"varint,16,opt,name=number_of_transactions,json=numberOfTransactions,proto3" json:"number_of_transactions,omitempty"`
	PreviousBlockHash    string                 `protobuf:"bytes,17,opt,name=previous_block_hash,json=previousBlockHash,proto3" json:"previous_block_hash,omitempty"`
	NextBlockHash        string                 `protobuf:"bytes,18,opt,name=next_block_hash,json=nextBlockHash,proto3" json:"next_block_hash,omitempty"`
	Timestamp            *timestamppb.Timestamp `protobuf:"bytes,19,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *BitcoinHeader) Reset() {
	*x = BitcoinHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BitcoinHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BitcoinHeader) ProtoMessage() {}

func (x *BitcoinHeader) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BitcoinHeader.ProtoReflect.Descriptor instead.
func (*BitcoinHeader) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_proto_rawDescGZIP(), []int{22}
}

func (x *BitcoinHeader) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *BitcoinHeader) GetStrippedSize() uint64 {
	if x != nil {
		return x.StrippedSize
	}
	return 0
}

func (x *BitcoinHeader) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *BitcoinHeader) GetWeight() uint64 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *BitcoinHeader) GetHeight() uint64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *BitcoinHeader) GetVersion() uint64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *BitcoinHeader) GetVersionHex() string {
	if x != nil {
		return x.VersionHex
	}
	return ""
}

func (x *BitcoinHeader) GetMerkleRoot() string {
	if x != nil {
		return x.MerkleRoot
	}
	return ""
}

func (x *BitcoinHeader) GetTime() uint64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *BitcoinHeader) GetMedianTime() uint64 {
	if x != nil {
		return x.MedianTime
	}
	return 0
}

func (x *BitcoinHeader) GetNonce() uint64 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

func (x *BitcoinHeader) GetBits() string {
	if x != nil {
		return x.Bits
	}
	return ""
}

func (x *BitcoinHeader) GetDifficulty() string {
	if x != nil {
		return x.Difficulty
	}
	return ""
}

func (x *BitcoinHeader) GetChainWork() string {
	if x != nil {
		return x.ChainWork
	}
	return ""
}

func (x *BitcoinHeader) GetNumberOfTransactions() uint64 {
	if x != nil {
		return x.NumberOfTransactions
	}
	return 0
}

func (x *BitcoinHeader) GetPreviousBlockHash() string {
	if x != nil {
		return x.PreviousBlockHash
	}
	return ""
}

func (x *BitcoinHeader) GetNextBlockHash() string {
	if x != nil {
		return x.NextBlockHash
	}
	return ""
}

func (x *BitcoinHeader) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

// BitcoinTransaction https://developer.bitcoin.org/reference/rpc/getrawtransaction.html
type BitcoinTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// bool in_active_chain = 1;
	Hex           string                      `protobuf:"bytes,2,opt,name=hex,proto3" json:"hex,omitempty"`
	TransactionId string                      `protobuf:"bytes,3,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	Hash          string                      `protobuf:"bytes,4,opt,name=hash,proto3" json:"hash,omitempty"`
	Size          uint64                      `protobuf:"varint,5,opt,name=size,proto3" json:"size,omitempty"`
	VirtualSize   uint64                      `protobuf:"varint,6,opt,name=virtual_size,json=virtualSize,proto3" json:"virtual_size,omitempty"`
	Weight        uint64                      `protobuf:"varint,7,opt,name=weight,proto3" json:"weight,omitempty"`
	Version       uint64                      `protobuf:"varint,8,opt,name=version,proto3" json:"version,omitempty"`
	LockTime      uint64                      `protobuf:"varint,9,opt,name=lock_time,json=lockTime,proto3" json:"lock_time,omitempty"`
	Inputs        []*BitcoinTransactionInput  `protobuf:"bytes,10,rep,name=inputs,proto3" json:"inputs,omitempty"`
	Outputs       []*BitcoinTransactionOutput `protobuf:"bytes,11,rep,name=outputs,proto3" json:"outputs,omitempty"`
	BlockHash     string                      `protobuf:"bytes,12,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	// uint64 confirmations = 13;
	BlockTime   uint64 `protobuf:"varint,14,opt,name=block_time,json=blockTime,proto3" json:"block_time,omitempty"`
	Time        uint64 `protobuf:"varint,15,opt,name=time,proto3" json:"time,omitempty"`
	IsCoinbase  bool   `protobuf:"varint,16,opt,name=is_coinbase,json=isCoinbase,proto3" json:"is_coinbase,omitempty"`
	Index       uint64 `protobuf:"varint,17,opt,name=index,proto3" json:"index,omitempty"`
	InputCount  uint64 `protobuf:"varint,18,opt,name=input_count,json=inputCount,proto3" json:"input_count,omitempty"`
	OutputCount uint64 `protobuf:"varint,19,opt,name=output_count,json=outputCount,proto3" json:"output_count,omitempty"`
	InputValue  uint64 `protobuf:"varint,20,opt,name=input_value,json=inputValue,proto3" json:"input_value,omitempty"`
	OutputValue uint64 `protobuf:"varint,21,opt,name=output_value,json=outputValue,proto3" json:"output_value,omitempty"`
	Fee         uint64 `protobuf:"varint,22,opt,name=fee,proto3" json:"fee,omitempty"`
}

func (x *BitcoinTransaction) Reset() {
	*x = BitcoinTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BitcoinTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BitcoinTransaction) ProtoMessage() {}

func (x *BitcoinTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BitcoinTransaction.ProtoReflect.Descriptor instead.
func (*BitcoinTransaction) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_proto_rawDescGZIP(), []int{23}
}

func (x *BitcoinTransaction) GetHex() string {
	if x != nil {
		return x.Hex
	}
	return ""
}

func (x *BitcoinTransaction) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

func (x *BitcoinTransaction) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *BitcoinTransaction) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *BitcoinTransaction) GetVirtualSize() uint64 {
	if x != nil {
		return x.VirtualSize
	}
	return 0
}

func (x *BitcoinTransaction) GetWeight() uint64 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *BitcoinTransaction) GetVersion() uint64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *BitcoinTransaction) GetLockTime() uint64 {
	if x != nil {
		return x.LockTime
	}
	return 0
}

func (x *BitcoinTransaction) GetInputs() []*BitcoinTransactionInput {
	if x != nil {
		return x.Inputs
	}
	return nil
}

func (x *BitcoinTransaction) GetOutputs() []*BitcoinTransactionOutput {
	if x != nil {
		return x.Outputs
	}
	return nil
}

func (x *BitcoinTransaction) GetBlockHash() string {
	if x != nil {
		return x.BlockHash
	}
	return ""
}

func (x *BitcoinTransaction) GetBlockTime() uint64 {
	if x != nil {
		return x.BlockTime
	}
	return 0
}

func (x *BitcoinTransaction) GetTime() uint64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *BitcoinTransaction) GetIsCoinbase() bool {
	if x != nil {
		return x.IsCoinbase
	}
	return false
}

func (x *BitcoinTransaction) GetIndex() uint64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *BitcoinTransaction) GetInputCount() uint64 {
	if x != nil {
		return x.InputCount
	}
	return 0
}

func (x *BitcoinTransaction) GetOutputCount() uint64 {
	if x != nil {
		return x.OutputCount
	}
	return 0
}

func (x *BitcoinTransaction) GetInputValue() uint64 {
	if x != nil {
		return x.InputValue
	}
	return 0
}

func (x *BitcoinTransaction) GetOutputValue() uint64 {
	if x != nil {
		return x.OutputValue
	}
	return 0
}

func (x *BitcoinTransaction) GetFee() uint64 {
	if x != nil {
		return x.Fee
	}
	return 0
}

type BitcoinTransactionInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Coinbase                  string                    `protobuf:"bytes,1,opt,name=coinbase,proto3" json:"coinbase,omitempty"`
	TransactionId             string                    `protobuf:"bytes,2,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	FromOutputIndex           uint64                    `protobuf:"varint,3,opt,name=from_output_index,json=fromOutputIndex,proto3" json:"from_output_index,omitempty"`
	ScriptSignature           *BitcoinScriptSignature   `protobuf:"bytes,4,opt,name=script_signature,json=scriptSignature,proto3" json:"script_signature,omitempty"`
	Sequence                  uint64                    `protobuf:"varint,5,opt,name=sequence,proto3" json:"sequence,omitempty"`
	TransactionInputWitnesses []string                  `protobuf:"bytes,6,rep,name=transaction_input_witnesses,json=transactionInputWitnesses,proto3" json:"transaction_input_witnesses,omitempty"`
	FromOutput                *BitcoinTransactionOutput `protobuf:"bytes,7,opt,name=from_output,json=fromOutput,proto3" json:"from_output,omitempty"`
	Index                     uint64                    `protobuf:"varint,8,opt,name=index,proto3" json:"index,omitempty"`
}

func (x *BitcoinTransactionInput) Reset() {
	*x = BitcoinTransactionInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BitcoinTransactionInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BitcoinTransactionInput) ProtoMessage() {}

func (x *BitcoinTransactionInput) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BitcoinTransactionInput.ProtoReflect.Descriptor instead.
func (*BitcoinTransactionInput) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_proto_rawDescGZIP(), []int{24}
}

func (x *BitcoinTransactionInput) GetCoinbase() string {
	if x != nil {
		return x.Coinbase
	}
	return ""
}

func (x *BitcoinTransactionInput) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

func (x *BitcoinTransactionInput) GetFromOutputIndex() uint64 {
	if x != nil {
		return x.FromOutputIndex
	}
	return 0
}

func (x *BitcoinTransactionInput) GetScriptSignature() *BitcoinScriptSignature {
	if x != nil {
		return x.ScriptSignature
	}
	return nil
}

func (x *BitcoinTransactionInput) GetSequence() uint64 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *BitcoinTransactionInput) GetTransactionInputWitnesses() []string {
	if x != nil {
		return x.TransactionInputWitnesses
	}
	return nil
}

func (x *BitcoinTransactionInput) GetFromOutput() *BitcoinTransactionOutput {
	if x != nil {
		return x.FromOutput
	}
	return nil
}

func (x *BitcoinTransactionInput) GetIndex() uint64 {
	if x != nil {
		return x.Index
	}
	return 0
}

type BitcoinScriptSignature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Assembly string `protobuf:"bytes,1,opt,name=assembly,proto3" json:"assembly,omitempty"`
	Hex      string `protobuf:"bytes,2,opt,name=hex,proto3" json:"hex,omitempty"`
}

func (x *BitcoinScriptSignature) Reset() {
	*x = BitcoinScriptSignature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BitcoinScriptSignature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BitcoinScriptSignature) ProtoMessage() {}

func (x *BitcoinScriptSignature) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BitcoinScriptSignature.ProtoReflect.Descriptor instead.
func (*BitcoinScriptSignature) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_proto_rawDescGZIP(), []int{25}
}

func (x *BitcoinScriptSignature) GetAssembly() string {
	if x != nil {
		return x.Assembly
	}
	return ""
}

func (x *BitcoinScriptSignature) GetHex() string {
	if x != nil {
		return x.Hex
	}
	return ""
}

type BitcoinTransactionOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// double value = 1;
	Index           uint64                  `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
	ScriptPublicKey *BitcoinScriptPublicKey `protobuf:"bytes,3,opt,name=script_public_key,json=scriptPublicKey,proto3" json:"script_public_key,omitempty"`
	Value           uint64                  `protobuf:"varint,4,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *BitcoinTransactionOutput) Reset() {
	*x = BitcoinTransactionOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BitcoinTransactionOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BitcoinTransactionOutput) ProtoMessage() {}

func (x *BitcoinTransactionOutput) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BitcoinTransactionOutput.ProtoReflect.Descriptor instead.
func (*BitcoinTransactionOutput) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_proto_rawDescGZIP(), []int{26}
}

func (x *BitcoinTransactionOutput) GetIndex() uint64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *BitcoinTransactionOutput) GetScriptPublicKey() *BitcoinScriptPublicKey {
	if x != nil {
		return x.ScriptPublicKey
	}
	return nil
}

func (x *BitcoinTransactionOutput) GetValue() uint64 {
	if x != nil {
		return x.Value
	}
	return 0
}

type BitcoinScriptPublicKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Assembly string `protobuf:"bytes,1,opt,name=assembly,proto3" json:"assembly,omitempty"`
	Hex      string `protobuf:"bytes,2,opt,name=hex,proto3" json:"hex,omitempty"`
	// uint64 required_signatures = 3; // deprecated: https://github.com/bitcoin/bitcoin/pull/20286
	Type string `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	// repeated string addresses = 5; // deprecated: https://github.com/bitcoin/bitcoin/pull/20286
	Address string `protobuf:"bytes,6,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *BitcoinScriptPublicKey) Reset() {
	*x = BitcoinScriptPublicKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BitcoinScriptPublicKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BitcoinScriptPublicKey) ProtoMessage() {}

func (x *BitcoinScriptPublicKey) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BitcoinScriptPublicKey.ProtoReflect.Descriptor instead.
func (*BitcoinScriptPublicKey) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_proto_rawDescGZIP(), []int{27}
}

func (x *BitcoinScriptPublicKey) GetAssembly() string {
	if x != nil {
		return x.Assembly
	}
	return ""
}

func (x *BitcoinScriptPublicKey) GetHex() string {
	if x != nil {
		return x.Hex
	}
	return ""
}

func (x *BitcoinScriptPublicKey) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *BitcoinScriptPublicKey) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type BitcoinBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header       *BitcoinHeader        `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Transactions []*BitcoinTransaction `protobuf:"bytes,2,rep,name=transactions,proto3" json:"transactions,omitempty"`
}

func (x *BitcoinBlock) Reset() {
	*x = BitcoinBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BitcoinBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BitcoinBlock) ProtoMessage() {}

func (x *BitcoinBlock) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BitcoinBlock.ProtoReflect.Descriptor instead.
func (*BitcoinBlock) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_proto_rawDescGZIP(), []int{28}
}

func (x *BitcoinBlock) GetHeader() *BitcoinHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *BitcoinBlock) GetTransactions() []*BitcoinTransaction {
	if x != nil {
		return x.Transactions
	}
	return nil
}

type RosettaBlobdata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header            []byte   `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	OtherTransactions [][]byte `protobuf:"bytes,2,rep,name=other_transactions,json=otherTransactions,proto3" json:"other_transactions,omitempty"`
}

func (x *RosettaBlobdata) Reset() {
	*x = RosettaBlobdata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RosettaBlobdata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RosettaBlobdata) ProtoMessage() {}

func (x *RosettaBlobdata) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RosettaBlobdata.ProtoReflect.Descriptor instead.
func (*RosettaBlobdata) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_proto_rawDescGZIP(), []int{29}
}

func (x *RosettaBlobdata) GetHeader() []byte {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *RosettaBlobdata) GetOtherTransactions() [][]byte {
	if x != nil {
		return x.OtherTransactions
	}
	return nil
}

type SolanaBlobdata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header []byte `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
}

func (x *SolanaBlobdata) Reset() {
	*x = SolanaBlobdata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SolanaBlobdata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SolanaBlobdata) ProtoMessage() {}

func (x *SolanaBlobdata) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SolanaBlobdata.ProtoReflect.Descriptor instead.
func (*SolanaBlobdata) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_proto_rawDescGZIP(), []int{30}
}

func (x *SolanaBlobdata) GetHeader() []byte {
	if x != nil {
		return x.Header
	}
	return nil
}

type SolanaBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header       *SolanaHeader        `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Transactions []*SolanaTransaction `protobuf:"bytes,2,rep,name=transactions,proto3" json:"transactions,omitempty"`
	Rewards      []*SolanaReward      `protobuf:"bytes,3,rep,name=rewards,proto3" json:"rewards,omitempty"`
}

func (x *SolanaBlock) Reset() {
	*x = SolanaBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SolanaBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SolanaBlock) ProtoMessage() {}

func (x *SolanaBlock) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SolanaBlock.ProtoReflect.Descriptor instead.
func (*SolanaBlock) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_proto_rawDescGZIP(), []int{31}
}

func (x *SolanaBlock) GetHeader() *SolanaHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *SolanaBlock) GetTransactions() []*SolanaTransaction {
	if x != nil {
		return x.Transactions
	}
	return nil
}

func (x *SolanaBlock) GetRewards() []*SolanaReward {
	if x != nil {
		return x.Rewards
	}
	return nil
}

type SolanaHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockHash         string                 `protobuf:"bytes,1,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	PreviousBlockHash string                 `protobuf:"bytes,2,opt,name=previous_block_hash,json=previousBlockHash,proto3" json:"previous_block_hash,omitempty"`
	Slot              uint64                 `protobuf:"varint,3,opt,name=slot,proto3" json:"slot,omitempty"`
	ParentSlot        uint64                 `protobuf:"varint,4,opt,name=parent_slot,json=parentSlot,proto3" json:"parent_slot,omitempty"`
	BlockTime         *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=block_time,json=blockTime,proto3" json:"block_time,omitempty"`
	BlockHeight       uint64                 `protobuf:"varint,6,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
}

func (x *SolanaHeader) Reset() {
	*x = SolanaHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SolanaHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SolanaHeader) ProtoMessage() {}

func (x *SolanaHeader) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SolanaHeader.ProtoReflect.Descriptor instead.
func (*SolanaHeader) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_proto_rawDescGZIP(), []int{32}
}

func (x *SolanaHeader) GetBlockHash() string {
	if x != nil {
		return x.BlockHash
	}
	return ""
}

func (x *SolanaHeader) GetPreviousBlockHash() string {
	if x != nil {
		return x.PreviousBlockHash
	}
	return ""
}

func (x *SolanaHeader) GetSlot() uint64 {
	if x != nil {
		return x.Slot
	}
	return 0
}

func (x *SolanaHeader) GetParentSlot() uint64 {
	if x != nil {
		return x.ParentSlot
	}
	return 0
}

func (x *SolanaHeader) GetBlockTime() *timestamppb.Timestamp {
	if x != nil {
		return x.BlockTime
	}
	return nil
}

func (x *SolanaHeader) GetBlockHeight() uint64 {
	if x != nil {
		return x.BlockHeight
	}
	return 0
}

type SolanaTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionId string                    `protobuf:"bytes,1,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	Payload       *SolanaTransactionPayload `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	Meta          *SolanaTransactionMeta    `protobuf:"bytes,3,opt,name=meta,proto3" json:"meta,omitempty"`
	// use int32 for `legacy` version
	Version int32 `protobuf:"varint,4,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *SolanaTransaction) Reset() {
	*x = SolanaTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SolanaTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SolanaTransaction) ProtoMessage() {}

func (x *SolanaTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SolanaTransaction.ProtoReflect.Descriptor instead.
func (*SolanaTransaction) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_proto_rawDescGZIP(), []int{33}
}

func (x *SolanaTransaction) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

func (x *SolanaTransaction) GetPayload() *SolanaTransactionPayload {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *SolanaTransaction) GetMeta() *SolanaTransactionMeta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *SolanaTransaction) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

type SolanaTransactionMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Err               string                    `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	Fee               uint64                    `protobuf:"varint,2,opt,name=fee,proto3" json:"fee,omitempty"`
	PreBalances       []uint64                  `protobuf:"varint,3,rep,packed,name=pre_balances,json=preBalances,proto3" json:"pre_balances,omitempty"`
	PostBalances      []uint64                  `protobuf:"varint,4,rep,packed,name=post_balances,json=postBalances,proto3" json:"post_balances,omitempty"`
	PreTokenBalances  []*SolanaTokenBalance     `protobuf:"bytes,5,rep,name=pre_token_balances,json=preTokenBalances,proto3" json:"pre_token_balances,omitempty"`
	PostTokenBalances []*SolanaTokenBalance     `protobuf:"bytes,6,rep,name=post_token_balances,json=postTokenBalances,proto3" json:"post_token_balances,omitempty"`
	InnerInstructions []*SolanaInnerInstruction `protobuf:"bytes,7,rep,name=inner_instructions,json=innerInstructions,proto3" json:"inner_instructions,omitempty"`
	LogMessages       []string                  `protobuf:"bytes,8,rep,name=log_messages,json=logMessages,proto3" json:"log_messages,omitempty"`
	Rewards           []*SolanaReward           `protobuf:"bytes,9,rep,name=rewards,proto3" json:"rewards,omitempty"`
}

func (x *SolanaTransactionMeta) Reset() {
	*x = SolanaTransactionMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SolanaTransactionMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SolanaTransactionMeta) ProtoMessage() {}

func (x *SolanaTransactionMeta) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SolanaTransactionMeta.ProtoReflect.Descriptor instead.
func (*SolanaTransactionMeta) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_proto_rawDescGZIP(), []int{34}
}

func (x *SolanaTransactionMeta) GetErr() string {
	if x != nil {
		return x.Err
	}
	return ""
}

func (x *SolanaTransactionMeta) GetFee() uint64 {
	if x != nil {
		return x.Fee
	}
	return 0
}

func (x *SolanaTransactionMeta) GetPreBalances() []uint64 {
	if x != nil {
		return x.PreBalances
	}
	return nil
}

func (x *SolanaTransactionMeta) GetPostBalances() []uint64 {
	if x != nil {
		return x.PostBalances
	}
	return nil
}

func (x *SolanaTransactionMeta) GetPreTokenBalances() []*SolanaTokenBalance {
	if x != nil {
		return x.PreTokenBalances
	}
	return nil
}

func (x *SolanaTransactionMeta) GetPostTokenBalances() []*SolanaTokenBalance {
	if x != nil {
		return x.PostTokenBalances
	}
	return nil
}

func (x *SolanaTransactionMeta) GetInnerInstructions() []*SolanaInnerInstruction {
	if x != nil {
		return x.InnerInstructions
	}
	return nil
}

func (x *SolanaTransactionMeta) GetLogMessages() []string {
	if x != nil {
		return x.LogMessages
	}
	return nil
}

func (x *SolanaTransactionMeta) GetRewards() []*SolanaReward {
	if x != nil {
		return x.Rewards
	}
	return nil
}

type SolanaTokenBalance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountIndex uint64             `protobuf:"varint,1,opt,name=account_index,json=accountIndex,proto3" json:"account_index,omitempty"`
	Mint         string             `protobuf:"bytes,2,opt,name=mint,proto3" json:"mint,omitempty"`
	TokenAmount  *SolanaTokenAmount `protobuf:"bytes,3,opt,name=token_amount,json=tokenAmount,proto3" json:"token_amount,omitempty"`
	Owner        string             `protobuf:"bytes,4,opt,name=owner,proto3" json:"owner,omitempty"`
}

func (x *SolanaTokenBalance) Reset() {
	*x = SolanaTokenBalance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SolanaTokenBalance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SolanaTokenBalance) ProtoMessage() {}

func (x *SolanaTokenBalance) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SolanaTokenBalance.ProtoReflect.Descriptor instead.
func (*SolanaTokenBalance) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_proto_rawDescGZIP(), []int{35}
}

func (x *SolanaTokenBalance) GetAccountIndex() uint64 {
	if x != nil {
		return x.AccountIndex
	}
	return 0
}

func (x *SolanaTokenBalance) GetMint() string {
	if x != nil {
		return x.Mint
	}
	return ""
}

func (x *SolanaTokenBalance) GetTokenAmount() *SolanaTokenAmount {
	if x != nil {
		return x.TokenAmount
	}
	return nil
}

func (x *SolanaTokenBalance) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

type SolanaTokenAmount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Amount         string `protobuf:"bytes,1,opt,name=amount,proto3" json:"amount,omitempty"`
	Decimals       uint64 `protobuf:"varint,2,opt,name=decimals,proto3" json:"decimals,omitempty"`
	UiAmountString string `protobuf:"bytes,3,opt,name=ui_amount_string,json=uiAmountString,proto3" json:"ui_amount_string,omitempty"`
}

func (x *SolanaTokenAmount) Reset() {
	*x = SolanaTokenAmount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SolanaTokenAmount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SolanaTokenAmount) ProtoMessage() {}

func (x *SolanaTokenAmount) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SolanaTokenAmount.ProtoReflect.Descriptor instead.
func (*SolanaTokenAmount) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_proto_rawDescGZIP(), []int{36}
}

func (x *SolanaTokenAmount) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *SolanaTokenAmount) GetDecimals() uint64 {
	if x != nil {
		return x.Decimals
	}
	return 0
}

func (x *SolanaTokenAmount) GetUiAmountString() string {
	if x != nil {
		return x.UiAmountString
	}
	return ""
}

type SolanaInnerInstruction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index        uint64               `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	Instructions []*SolanaInstruction `protobuf:"bytes,2,rep,name=instructions,proto3" json:"instructions,omitempty"`
}

func (x *SolanaInnerInstruction) Reset() {
	*x = SolanaInnerInstruction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SolanaInnerInstruction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SolanaInnerInstruction) ProtoMessage() {}

func (x *SolanaInnerInstruction) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SolanaInnerInstruction.ProtoReflect.Descriptor instead.
func (*SolanaInnerInstruction) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_proto_rawDescGZIP(), []int{37}
}

func (x *SolanaInnerInstruction) GetIndex() uint64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *SolanaInnerInstruction) GetInstructions() []*SolanaInstruction {
	if x != nil {
		return x.Instructions
	}
	return nil
}

type SolanaReward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pubkey      []byte `protobuf:"bytes,1,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	Lamports    int64  `protobuf:"varint,2,opt,name=lamports,proto3" json:"lamports,omitempty"`
	PostBalance uint64 `protobuf:"varint,3,opt,name=post_balance,json=postBalance,proto3" json:"post_balance,omitempty"`
	RewardType  string `protobuf:"bytes,4,opt,name=reward_type,json=rewardType,proto3" json:"reward_type,omitempty"`
	// Types that are assignable to OptionalCommission:
	//
	//	*SolanaReward_Commission
	OptionalCommission isSolanaReward_OptionalCommission `protobuf_oneof:"optional_commission"`
}

func (x *SolanaReward) Reset() {
	*x = SolanaReward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SolanaReward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SolanaReward) ProtoMessage() {}

func (x *SolanaReward) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SolanaReward.ProtoReflect.Descriptor instead.
func (*SolanaReward) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_proto_rawDescGZIP(), []int{38}
}

func (x *SolanaReward) GetPubkey() []byte {
	if x != nil {
		return x.Pubkey
	}
	return nil
}

func (x *SolanaReward) GetLamports() int64 {
	if x != nil {
		return x.Lamports
	}
	return 0
}

func (x *SolanaReward) GetPostBalance() uint64 {
	if x != nil {
		return x.PostBalance
	}
	return 0
}

func (x *SolanaReward) GetRewardType() string {
	if x != nil {
		return x.RewardType
	}
	return ""
}

func (m *SolanaReward) GetOptionalCommission() isSolanaReward_OptionalCommission {
	if m != nil {
		return m.OptionalCommission
	}
	return nil
}

func (x *SolanaReward) GetCommission() uint64 {
	if x, ok := x.GetOptionalCommission().(*SolanaReward_Commission); ok {
		return x.Commission
	}
	return 0
}

type isSolanaReward_OptionalCommission interface {
	isSolanaReward_OptionalCommission()
}

type SolanaReward_Commission struct {
	Commission uint64 `protobuf:"varint,5,opt,name=commission,proto3,oneof"`
}

func (*SolanaReward_Commission) isSolanaReward_OptionalCommission() {}

type SolanaTransactionPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Signatures []string       `protobuf:"bytes,1,rep,name=signatures,proto3" json:"signatures,omitempty"`
	Message    *SolanaMessage `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *SolanaTransactionPayload) Reset() {
	*x = SolanaTransactionPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SolanaTransactionPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SolanaTransactionPayload) ProtoMessage() {}

func (x *SolanaTransactionPayload) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SolanaTransactionPayload.ProtoReflect.Descriptor instead.
func (*SolanaTransactionPayload) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_proto_rawDescGZIP(), []int{39}
}

func (x *SolanaTransactionPayload) GetSignatures() []string {
	if x != nil {
		return x.Signatures
	}
	return nil
}

func (x *SolanaTransactionPayload) GetMessage() *SolanaMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

type SolanaMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *SolanaMessageHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// repeated string account_keys = 2 [deprecated = true];
	RecentBlockHash string               `protobuf:"bytes,3,opt,name=recent_block_hash,json=recentBlockHash,proto3" json:"recent_block_hash,omitempty"`
	Instructions    []*SolanaInstruction `protobuf:"bytes,4,rep,name=instructions,proto3" json:"instructions,omitempty"`
	Accounts        []*SolanaAccount     `protobuf:"bytes,5,rep,name=accounts,proto3" json:"accounts,omitempty"`
}

func (x *SolanaMessage) Reset() {
	*x = SolanaMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SolanaMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SolanaMessage) ProtoMessage() {}

func (x *SolanaMessage) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SolanaMessage.ProtoReflect.Descriptor instead.
func (*SolanaMessage) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_proto_rawDescGZIP(), []int{40}
}

func (x *SolanaMessage) GetHeader() *SolanaMessageHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *SolanaMessage) GetRecentBlockHash() string {
	if x != nil {
		return x.RecentBlockHash
	}
	return ""
}

func (x *SolanaMessage) GetInstructions() []*SolanaInstruction {
	if x != nil {
		return x.Instructions
	}
	return nil
}

func (x *SolanaMessage) GetAccounts() []*SolanaAccount {
	if x != nil {
		return x.Accounts
	}
	return nil
}

type SolanaMessageHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NumRequiredSignatures       uint64 `protobuf:"varint,1,opt,name=num_required_signatures,json=numRequiredSignatures,proto3" json:"num_required_signatures,omitempty"`
	NumReadonlySignedAccounts   uint64 `protobuf:"varint,2,opt,name=num_readonly_signed_accounts,json=numReadonlySignedAccounts,proto3" json:"num_readonly_signed_accounts,omitempty"`
	NumReadonlyUnsignedAccounts uint64 `protobuf:"varint,3,opt,name=num_readonly_unsigned_accounts,json=numReadonlyUnsignedAccounts,proto3" json:"num_readonly_unsigned_accounts,omitempty"`
}

func (x *SolanaMessageHeader) Reset() {
	*x = SolanaMessageHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SolanaMessageHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SolanaMessageHeader) ProtoMessage() {}

func (x *SolanaMessageHeader) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SolanaMessageHeader.ProtoReflect.Descriptor instead.
func (*SolanaMessageHeader) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_proto_rawDescGZIP(), []int{41}
}

func (x *SolanaMessageHeader) GetNumRequiredSignatures() uint64 {
	if x != nil {
		return x.NumRequiredSignatures
	}
	return 0
}

func (x *SolanaMessageHeader) GetNumReadonlySignedAccounts() uint64 {
	if x != nil {
		return x.NumReadonlySignedAccounts
	}
	return 0
}

func (x *SolanaMessageHeader) GetNumReadonlyUnsignedAccounts() uint64 {
	if x != nil {
		return x.NumReadonlyUnsignedAccounts
	}
	return 0
}

type SolanaInstruction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProgramIdIndex uint64   `protobuf:"varint,1,opt,name=program_id_index,json=programIdIndex,proto3" json:"program_id_index,omitempty"`
	Accounts       []uint64 `protobuf:"varint,2,rep,packed,name=accounts,proto3" json:"accounts,omitempty"`
	Data           []byte   `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	ProgramId      string   `protobuf:"bytes,4,opt,name=program_id,json=programId,proto3" json:"program_id,omitempty"`
	AccountKeys    []string `protobuf:"bytes,5,rep,name=account_keys,json=accountKeys,proto3" json:"account_keys,omitempty"`
}

func (x *SolanaInstruction) Reset() {
	*x = SolanaInstruction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SolanaInstruction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SolanaInstruction) ProtoMessage() {}

func (x *SolanaInstruction) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SolanaInstruction.ProtoReflect.Descriptor instead.
func (*SolanaInstruction) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_proto_rawDescGZIP(), []int{42}
}

func (x *SolanaInstruction) GetProgramIdIndex() uint64 {
	if x != nil {
		return x.ProgramIdIndex
	}
	return 0
}

func (x *SolanaInstruction) GetAccounts() []uint64 {
	if x != nil {
		return x.Accounts
	}
	return nil
}

func (x *SolanaInstruction) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *SolanaInstruction) GetProgramId() string {
	if x != nil {
		return x.ProgramId
	}
	return ""
}

func (x *SolanaInstruction) GetAccountKeys() []string {
	if x != nil {
		return x.AccountKeys
	}
	return nil
}

type SolanaAccount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublicKey string `protobuf:"bytes,1,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	Signer    bool   `protobuf:"varint,2,opt,name=signer,proto3" json:"signer,omitempty"`
	Writable  bool   `protobuf:"varint,3,opt,name=writable,proto3" json:"writable,omitempty"`
}

func (x *SolanaAccount) Reset() {
	*x = SolanaAccount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SolanaAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SolanaAccount) ProtoMessage() {}

func (x *SolanaAccount) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SolanaAccount.ProtoReflect.Descriptor instead.
func (*SolanaAccount) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_proto_rawDescGZIP(), []int{43}
}

func (x *SolanaAccount) GetPublicKey() string {
	if x != nil {
		return x.PublicKey
	}
	return ""
}

func (x *SolanaAccount) GetSigner() bool {
	if x != nil {
		return x.Signer
	}
	return false
}

func (x *SolanaAccount) GetWritable() bool {
	if x != nil {
		return x.Writable
	}
	return false
}

type EthereumTransactionReceipt_L1FeeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	L1GasUsed   uint64 `protobuf:"varint,1,opt,name=l1_gas_used,json=l1GasUsed,proto3" json:"l1_gas_used,omitempty"`
	L1GasPrice  uint64 `protobuf:"varint,2,opt,name=l1_gas_price,json=l1GasPrice,proto3" json:"l1_gas_price,omitempty"`
	L1Fee       uint64 `protobuf:"varint,3,opt,name=l1_fee,json=l1Fee,proto3" json:"l1_fee,omitempty"`
	L1FeeScalar string `protobuf:"bytes,4,opt,name=l1_fee_scalar,json=l1FeeScalar,proto3" json:"l1_fee_scalar,omitempty"`
}

func (x *EthereumTransactionReceipt_L1FeeInfo) Reset() {
	*x = EthereumTransactionReceipt_L1FeeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EthereumTransactionReceipt_L1FeeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EthereumTransactionReceipt_L1FeeInfo) ProtoMessage() {}

func (x *EthereumTransactionReceipt_L1FeeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EthereumTransactionReceipt_L1FeeInfo.ProtoReflect.Descriptor instead.
func (*EthereumTransactionReceipt_L1FeeInfo) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_proto_rawDescGZIP(), []int{13, 0}
}

func (x *EthereumTransactionReceipt_L1FeeInfo) GetL1GasUsed() uint64 {
	if x != nil {
		return x.L1GasUsed
	}
	return 0
}

func (x *EthereumTransactionReceipt_L1FeeInfo) GetL1GasPrice() uint64 {
	if x != nil {
		return x.L1GasPrice
	}
	return 0
}

func (x *EthereumTransactionReceipt_L1FeeInfo) GetL1Fee() uint64 {
	if x != nil {
		return x.L1Fee
	}
	return 0
}

func (x *EthereumTransactionReceipt_L1FeeInfo) GetL1FeeScalar() string {
	if x != nil {
		return x.L1FeeScalar
	}
	return ""
}

var File_coinbase_chainstorage_blockchain_proto protoreflect.FileDescriptor

var file_coinbase_chainstorage_blockchain_proto_rawDesc = []byte{
	0x0a, 0x26, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x15, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1f, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x63, 0x33, 0x2f, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x29, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x6f, 0x2f, 0x72, 0x6f, 0x73, 0x65, 0x74, 0x74, 0x61, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xdc, 0x03, 0x0a,
	0x05, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x3e, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x69,
	0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x33, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x52, 0x0a, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x35, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x63, 0x33, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x40, 0x0a,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x45, 0x0a, 0x08, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x18, 0x64, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x65,
	0x75, 0x6d, 0x42, 0x6c, 0x6f, 0x62, 0x64, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x08, 0x65, 0x74,
	0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x12, 0x42, 0x0a, 0x07, 0x62, 0x69, 0x74, 0x63, 0x6f, 0x69,
	0x6e, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e,
	0x42, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x42, 0x6c, 0x6f, 0x62, 0x64, 0x61, 0x74, 0x61, 0x48,
	0x00, 0x52, 0x07, 0x62, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x12, 0x42, 0x0a, 0x07, 0x72, 0x6f,
	0x73, 0x65, 0x74, 0x74, 0x61, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f,
	0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2e, 0x52, 0x6f, 0x73, 0x65, 0x74, 0x74, 0x61, 0x42, 0x6c, 0x6f, 0x62, 0x64,
	0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x07, 0x72, 0x6f, 0x73, 0x65, 0x74, 0x74, 0x61, 0x12, 0x3f,
	0x0a, 0x06, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x18, 0x67, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x42, 0x6c, 0x6f,
	0x62, 0x64, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x06, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x42,
	0x0a, 0x0a, 0x08, 0x62, 0x6c, 0x6f, 0x62, 0x64, 0x61, 0x74, 0x61, 0x22, 0xa3, 0x01, 0x0a, 0x0f,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12,
	0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68,
	0x61, 0x73, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x74,
	0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x73, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x22, 0x8f, 0x02, 0x0a, 0x0d, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6b, 0x65, 0x79,
	0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x4b, 0x65, 0x79, 0x4d, 0x61, 0x69, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x73, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x22, 0xf7, 0x01, 0x0a, 0x10, 0x45, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d,
	0x42, 0x6c, 0x6f, 0x62, 0x64, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x12, 0x31, 0x0a, 0x14, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x13,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x70, 0x74, 0x73, 0x12, 0x2d, 0x0a, 0x12, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0c, 0x52,
	0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x63,
	0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x6e, 0x63, 0x6c, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0c, 0x52, 0x06, 0x75, 0x6e, 0x63, 0x6c, 0x65, 0x73, 0x12, 0x43, 0x0a, 0x07, 0x70, 0x6f,
	0x6c, 0x79, 0x67, 0x6f, 0x6e, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f,
	0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2e, 0x50, 0x6f, 0x6c, 0x79, 0x67, 0x6f, 0x6e, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x07, 0x70, 0x6f, 0x6c, 0x79, 0x67, 0x6f, 0x6e, 0x42,
	0x0c, 0x0a, 0x0a, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x22, 0x2a, 0x0a,
	0x10, 0x50, 0x6f, 0x6c, 0x79, 0x67, 0x6f, 0x6e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x22, 0x4a, 0x0a, 0x0c, 0x52, 0x6f, 0x73,
	0x65, 0x74, 0x74, 0x61, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x3a, 0x0a, 0x05, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x72, 0x6f, 0x73, 0x65, 0x74,
	0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x05,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x95, 0x05, 0x0a, 0x0b, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x3e, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x69, 0x6e,
	0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x33, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x52, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x35, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x63, 0x33, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x10, 0x0a, 0x03,
	0x74, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x12,
	0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61,
	0x73, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x61, 0x73,
	0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x48,
	0x61, 0x73, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x29, 0x0a, 0x10, 0x6e, 0x75, 0x6d, 0x5f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0f, 0x6e, 0x75, 0x6d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x23, 0x0a, 0x0d, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x48,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x12,
	0x42, 0x0a, 0x08, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x18, 0x64, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x65,
	0x75, 0x6d, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x08, 0x65, 0x74, 0x68, 0x65, 0x72,
	0x65, 0x75, 0x6d, 0x12, 0x3f, 0x0a, 0x07, 0x62, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x65,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x42, 0x69, 0x74,
	0x63, 0x6f, 0x69, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x07, 0x62, 0x69, 0x74,
	0x63, 0x6f, 0x69, 0x6e, 0x12, 0x40, 0x0a, 0x07, 0x72, 0x6f, 0x73, 0x65, 0x74, 0x74, 0x61, 0x18,
	0x66, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65,
	0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x72, 0x6f, 0x73, 0x65, 0x74, 0x74, 0x61, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x07, 0x72,
	0x6f, 0x73, 0x65, 0x74, 0x74, 0x61, 0x12, 0x3c, 0x0a, 0x06, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61,
	0x18, 0x67, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x53,
	0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x06, 0x73, 0x6f,
	0x6c, 0x61, 0x6e, 0x61, 0x42, 0x07, 0x0a, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0xdd, 0x01,
	0x0a, 0x0d, 0x45, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12,
	0x3d, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x4e,
	0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x45, 0x74, 0x68,
	0x65, 0x72, 0x65, 0x75, 0x6d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3d,
	0x0a, 0x06, 0x75, 0x6e, 0x63, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x75, 0x6e, 0x63, 0x6c, 0x65, 0x73, 0x22, 0x85, 0x01,
	0x0a, 0x12, 0x45, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72,
	0x61, 0x77, 0x61, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x27, 0x0a, 0x0f, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xc1, 0x06, 0x0a, 0x0e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x65,
	0x75, 0x6d, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x1f, 0x0a, 0x0b,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x16, 0x0a,
	0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x22, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x68, 0x61,
	0x33, 0x5f, 0x75, 0x6e, 0x63, 0x6c, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x73, 0x68, 0x61, 0x33, 0x55, 0x6e, 0x63, 0x6c, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x6f,
	0x67, 0x73, 0x5f, 0x62, 0x6c, 0x6f, 0x6f, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x6c, 0x6f, 0x67, 0x73, 0x42, 0x6c, 0x6f, 0x6f, 0x6d, 0x12, 0x2b, 0x0a, 0x11, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f,
	0x72, 0x6f, 0x6f, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74,
	0x73, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x70, 0x74, 0x73, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x69,
	0x6e, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x69, 0x6e, 0x65, 0x72,
	0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79,
	0x12, 0x29, 0x0a, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63,
	0x75, 0x6c, 0x74, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x65, 0x78, 0x74, 0x72, 0x61, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x67, 0x61, 0x73, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x08, 0x67, 0x61, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x67,
	0x61, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x67,
	0x61, 0x73, 0x55, 0x73, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x6e, 0x63, 0x6c, 0x65, 0x73,
	0x18, 0x13, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x75, 0x6e, 0x63, 0x6c, 0x65, 0x73, 0x12, 0x29,
	0x0a, 0x10, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x67,
	0x61, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x0d, 0x62, 0x61, 0x73, 0x65,
	0x46, 0x65, 0x65, 0x50, 0x65, 0x72, 0x47, 0x61, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x69, 0x78,
	0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x69, 0x78,
	0x48, 0x61, 0x73, 0x68, 0x12, 0x4b, 0x0a, 0x0b, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x61, 0x6c, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6f, 0x69, 0x6e,
	0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72,
	0x61, 0x77, 0x61, 0x6c, 0x52, 0x0b, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c,
	0x73, 0x12, 0x29, 0x0a, 0x10, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x73,
	0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x77, 0x69, 0x74,
	0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x73, 0x52, 0x6f, 0x6f, 0x74, 0x42, 0x1b, 0x0a, 0x19,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x66, 0x65,
	0x65, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x67, 0x61, 0x73, 0x22, 0x58, 0x0a, 0x19, 0x45, 0x74, 0x68,
	0x65, 0x72, 0x65, 0x75, 0x6d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4b,
	0x65, 0x79, 0x73, 0x22, 0x72, 0x0a, 0x1d, 0x45, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x51, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x6f, 0x69, 0x6e,
	0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x0a, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x84, 0x08, 0x0a, 0x13, 0x45, 0x74, 0x68, 0x65,
	0x72, 0x65, 0x75, 0x6d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1d, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x21,
	0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x10, 0x0a, 0x03, 0x67, 0x61, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x03, 0x67, 0x61, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x73, 0x5f, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x67, 0x61, 0x73, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6e,
	0x6f, 0x6e, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x74, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x4b, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x31, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x65,
	0x75, 0x6d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63,
	0x65, 0x69, 0x70, 0x74, 0x52, 0x07, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x12, 0x55, 0x0a,
	0x0f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73,
	0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x45,
	0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x52, 0x0e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x6d, 0x61, 0x78, 0x5f,
	0x66, 0x65, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x67, 0x61, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x04, 0x48, 0x00, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x46, 0x65, 0x65, 0x50, 0x65, 0x72, 0x47, 0x61,
	0x73, 0x12, 0x38, 0x0a, 0x18, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x67, 0x61, 0x73, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x04, 0x48, 0x01, 0x52, 0x14, 0x6d, 0x61, 0x78, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x46, 0x65, 0x65, 0x50, 0x65, 0x72, 0x47, 0x61, 0x73, 0x12, 0x6e, 0x0a, 0x17, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x63,
	0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x69,
	0x73, 0x74, 0x48, 0x02, 0x52, 0x15, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x63, 0x0a, 0x10, 0x66,
	0x6c, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x65, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x73, 0x18,
	0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65,
	0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x45, 0x74,
	0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x46, 0x6c, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x65, 0x64, 0x54, 0x72, 0x61, 0x63, 0x65, 0x52,
	0x0f, 0x66, 0x6c, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x65, 0x64, 0x54, 0x72, 0x61, 0x63, 0x65, 0x73,
	0x12, 0x43, 0x0a, 0x0f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x31, 0x0a, 0x14, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x67, 0x61, 0x73, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x04, 0x48, 0x03, 0x52, 0x11, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x46,
	0x65, 0x65, 0x50, 0x65, 0x72, 0x47, 0x61, 0x73, 0x42, 0x1a, 0x0a, 0x18, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x70, 0x65, 0x72,
	0x5f, 0x67, 0x61, 0x73, 0x42, 0x23, 0x0a, 0x21, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x66, 0x65,
	0x65, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x67, 0x61, 0x73, 0x42, 0x22, 0x0a, 0x20, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x42, 0x1f, 0x0a,
	0x1d, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x67, 0x61, 0x73, 0x22, 0xb9,
	0x06, 0x0a, 0x1a, 0x45, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x12, 0x29, 0x0a,
	0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x68, 0x61, 0x73,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x12, 0x2b, 0x0a, 0x11, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68,
	0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x48, 0x61, 0x73, 0x68, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x74,
	0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x2e, 0x0a, 0x13, 0x63,
	0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x67, 0x61, 0x73, 0x5f, 0x75, 0x73,
	0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x47, 0x61, 0x73, 0x55, 0x73, 0x65, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x67,
	0x61, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x67,
	0x61, 0x73, 0x55, 0x73, 0x65, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x3b, 0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x67, 0x52, 0x04, 0x6c, 0x6f, 0x67, 0x73, 0x12, 0x1d,
	0x0a, 0x0a, 0x6c, 0x6f, 0x67, 0x73, 0x5f, 0x62, 0x6c, 0x6f, 0x6f, 0x6d, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x6c, 0x6f, 0x67, 0x73, 0x42, 0x6c, 0x6f, 0x6f, 0x6d, 0x12, 0x12, 0x0a,
	0x04, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x6f, 0x6f,
	0x74, 0x12, 0x18, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x04, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x2e, 0x0a, 0x13, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x67, 0x61, 0x73,
	0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x65, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x47, 0x61, 0x73, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x5d, 0x0a, 0x0b, 0x6c, 0x31, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x45, 0x74, 0x68,
	0x65, 0x72, 0x65, 0x75, 0x6d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x2e, 0x4c, 0x31, 0x46, 0x65, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x48, 0x01, 0x52, 0x09, 0x6c, 0x31, 0x46, 0x65, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x88,
	0x01, 0x0a, 0x09, 0x4c, 0x31, 0x46, 0x65, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x0a, 0x0b,
	0x6c, 0x31, 0x5f, 0x67, 0x61, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x6c, 0x31, 0x47, 0x61, 0x73, 0x55, 0x73, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0c,
	0x6c, 0x31, 0x5f, 0x67, 0x61, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0a, 0x6c, 0x31, 0x47, 0x61, 0x73, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x15,
	0x0a, 0x06, 0x6c, 0x31, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05,
	0x6c, 0x31, 0x46, 0x65, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x6c, 0x31, 0x5f, 0x66, 0x65, 0x65, 0x5f,
	0x73, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x31,
	0x46, 0x65, 0x65, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x42, 0x11, 0x0a, 0x0f, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x16, 0x0a, 0x14,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x6c, 0x31, 0x5f, 0x66, 0x65, 0x65, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x4a, 0x04, 0x08, 0x0d, 0x10, 0x0e, 0x22, 0xa9, 0x02, 0x0a, 0x10, 0x45,
	0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x67, 0x12,
	0x18, 0x0a, 0x07, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x67,
	0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6c, 0x6f,
	0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x73,
	0x68, 0x12, 0x2b, 0x0a, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1d,
	0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x21, 0x0a,
	0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x16,
	0x0a, 0x06, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06,
	0x74, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x22, 0xa0, 0x02, 0x0a, 0x18, 0x45, 0x74, 0x68, 0x65, 0x72,
	0x65, 0x75, 0x6d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72,
	0x61, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x72, 0x6f,
	0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x74,
	0x6f, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x67, 0x61, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x67, 0x61, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x61, 0x73,
	0x5f, 0x75, 0x73, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x67, 0x61, 0x73,
	0x55, 0x73, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x12, 0x45, 0x0a, 0x05, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x65,
	0x75, 0x6d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61,
	0x63, 0x65, 0x52, 0x05, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x22, 0xae, 0x04, 0x0a, 0x21, 0x45, 0x74,
	0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x46, 0x6c, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x65, 0x64, 0x54, 0x72, 0x61, 0x63, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f,
	0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a,
	0x02, 0x74, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x67, 0x61, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x03, 0x67, 0x61, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x61, 0x73, 0x5f, 0x75, 0x73, 0x65,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x67, 0x61, 0x73, 0x55, 0x73, 0x65, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x73, 0x75, 0x62, 0x74, 0x72, 0x61, 0x63, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x73, 0x75, 0x62, 0x74, 0x72, 0x61, 0x63, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d,
	0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0b, 0x20,
	0x03, 0x28, 0x04, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x63, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x72, 0x61, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x74, 0x72, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12,
	0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x12, 0x2b, 0x0a,
	0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x13, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0xe6, 0x03, 0x0a, 0x15, 0x45,
	0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x72, 0x6f,
	0x6d, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x66, 0x72, 0x6f, 0x6d, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a,
	0x74, 0x6f, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x74, 0x6f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x2b, 0x0a, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x29,
	0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x68, 0x61,
	0x73, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x67,
	0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6c, 0x6f,
	0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f,
	0x68, 0x61, 0x73, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x41, 0x0a, 0x05, 0x65, 0x72, 0x63, 0x32,
	0x30, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e,
	0x45, 0x52, 0x43, 0x32, 0x30, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x63, 0x32, 0x30, 0x12, 0x44, 0x0a, 0x06, 0x65,
	0x72, 0x63, 0x37, 0x32, 0x31, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f,
	0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2e, 0x45, 0x52, 0x43, 0x37, 0x32, 0x31, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x48, 0x00, 0x52, 0x06, 0x65, 0x72, 0x63, 0x37, 0x32,
	0x31, 0x42, 0x10, 0x0a, 0x0e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x22, 0x6c, 0x0a, 0x12, 0x45, 0x52, 0x43, 0x32, 0x30, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x72, 0x6f,
	0x6d, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x66, 0x72, 0x6f, 0x6d, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a,
	0x74, 0x6f, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x74, 0x6f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x72, 0x0a, 0x13, 0x45, 0x52, 0x43, 0x37, 0x32, 0x31, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x72, 0x6f, 0x6d,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x66, 0x72, 0x6f, 0x6d, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x74,
	0x6f, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x74, 0x6f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x49, 0x64, 0x22, 0x7e, 0x0a, 0x0f, 0x42, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e,
	0x42, 0x6c, 0x6f, 0x62, 0x64, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x12, 0x53, 0x0a, 0x12, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63,
	0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x52, 0x11, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x23, 0x0a, 0x0d, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xce, 0x04, 0x0a, 0x0d, 0x42,
	0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04,
	0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68,
	0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x72, 0x69, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x70, 0x70, 0x65,
	0x64, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x68,
	0x65, 0x78, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x48, 0x65, 0x78, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x5f, 0x72,
	0x6f, 0x6f, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x72, 0x6b, 0x6c,
	0x65, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f,
	0x6e, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x62, 0x69, 0x74, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x62, 0x69, 0x74, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c,
	0x74, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63,
	0x75, 0x6c, 0x74, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x77, 0x6f,
	0x72, 0x6b, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x57,
	0x6f, 0x72, 0x6b, 0x12, 0x34, 0x0a, 0x16, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66,
	0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x14, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x72, 0x65,
	0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78,
	0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73,
	0x68, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x9d, 0x05, 0x0a, 0x12,
	0x42, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x68, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x68, 0x65, 0x78, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x68,
	0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x73,
	0x69, 0x7a, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x76, 0x69, 0x72, 0x74, 0x75,
	0x61, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x63, 0x6b,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6c, 0x6f, 0x63,
	0x6b, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x46, 0x0a, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18,
	0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65,
	0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x42, 0x69,
	0x74, 0x63, 0x6f, 0x69, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x12, 0x49, 0x0a,
	0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f,
	0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x42, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52,
	0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73,
	0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x69, 0x73, 0x43, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x11, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x65, 0x65,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x66, 0x65, 0x65, 0x22, 0xa6, 0x03, 0x0a, 0x17,
	0x42, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x69, 0x6e, 0x62,
	0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x69, 0x6e, 0x62,
	0x61, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x66, 0x72,
	0x6f, 0x6d, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x66, 0x72, 0x6f, 0x6d, 0x4f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x58, 0x0a, 0x10, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x42, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e,
	0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52,
	0x0f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x3e, 0x0a, 0x1b,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x5f, 0x77, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x19, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x57, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x50, 0x0a, 0x0b,
	0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x42, 0x69, 0x74, 0x63, 0x6f, 0x69,
	0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x52, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x22, 0x46, 0x0a, 0x16, 0x42, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x53,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x61, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x61, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x68, 0x65,
	0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x68, 0x65, 0x78, 0x22, 0xa1, 0x01, 0x0a,
	0x18, 0x42, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x59, 0x0a, 0x11, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x6f, 0x69,
	0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x2e, 0x42, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x52, 0x0f, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0x74, 0x0a, 0x16, 0x42, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x53, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x73,
	0x73, 0x65, 0x6d, 0x62, 0x6c, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x73,
	0x73, 0x65, 0x6d, 0x62, 0x6c, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x68, 0x65, 0x78, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x68, 0x65, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x9b, 0x01, 0x0a, 0x0c, 0x42, 0x69, 0x74, 0x63, 0x6f,
	0x69, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x3c, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e,
	0x42, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x4d, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6f,
	0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2e, 0x42, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x22, 0x58, 0x0a, 0x0f, 0x52, 0x6f, 0x73, 0x65, 0x74, 0x74, 0x61, 0x42,
	0x6c, 0x6f, 0x62, 0x64, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12,
	0x2d, 0x0a, 0x12, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x11, 0x6f, 0x74, 0x68,
	0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x28,
	0x0a, 0x0e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x42, 0x6c, 0x6f, 0x62, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x22, 0xd7, 0x01, 0x0a, 0x0b, 0x53, 0x6f, 0x6c,
	0x61, 0x6e, 0x61, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x3b, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x4c, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f,
	0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x3d, 0x0a, 0x07, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x6f, 0x6c,
	0x61, 0x6e, 0x61, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x07, 0x72, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x73, 0x22, 0xf0, 0x01, 0x0a, 0x0c, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61,
	0x73, 0x68, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61,
	0x73, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0xe1, 0x01, 0x0a, 0x11, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x49, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x6f, 0x6c, 0x61,
	0x6e, 0x61, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x40, 0x0a,
	0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6f,
	0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12,
	0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xf7, 0x03, 0x0a, 0x15, 0x53, 0x6f,
	0x6c, 0x61, 0x6e, 0x61, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x65, 0x74, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x65, 0x72, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x65, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x03, 0x66, 0x65, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x5f, 0x62,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0b, 0x70,
	0x72, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x6f,
	0x73, 0x74, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x04, 0x52, 0x0c, 0x70, 0x6f, 0x73, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12,
	0x57, 0x0a, 0x12, 0x70, 0x72, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x62, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6f,
	0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x10, 0x70, 0x72, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x59, 0x0a, 0x13, 0x70, 0x6f, 0x73, 0x74,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65,
	0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x6f,
	0x6c, 0x61, 0x6e, 0x61, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x52, 0x11, 0x70, 0x6f, 0x73, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x12, 0x5c, 0x0a, 0x12, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x49, 0x6e,
	0x6e, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11,
	0x69, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x6f, 0x67, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x6f, 0x67, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x12, 0x3d, 0x0a, 0x07, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18,
	0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65,
	0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x6f,
	0x6c, 0x61, 0x6e, 0x61, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x07, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x73, 0x22, 0xb0, 0x01, 0x0a, 0x12, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x12, 0x0a, 0x04, 0x6d, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d,
	0x69, 0x6e, 0x74, 0x12, 0x4b, 0x0a, 0x0c, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x69, 0x6e,
	0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x0b, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x22, 0x71, 0x0a, 0x11, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x73, 0x12,
	0x28, 0x0a, 0x10, 0x75, 0x69, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x75, 0x69, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x22, 0x7c, 0x0a, 0x16, 0x53, 0x6f, 0x6c,
	0x61, 0x6e, 0x61, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x4c, 0x0a, 0x0c, 0x69, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x49, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xbf, 0x01, 0x0a, 0x0c, 0x53, 0x6f, 0x6c, 0x61,
	0x6e, 0x61, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x75, 0x62, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79,
	0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x6c, 0x61, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x21, 0x0a, 0x0c,
	0x70, 0x6f, 0x73, 0x74, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0b, 0x70, 0x6f, 0x73, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x20, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x42, 0x15, 0x0a, 0x13, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x7a, 0x0a, 0x18, 0x53, 0x6f, 0x6c,
	0x61, 0x6e, 0x61, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x53,
	0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x8f, 0x02, 0x0a, 0x0d, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x42, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e,
	0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x11, 0x72,
	0x65, 0x63, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x4c, 0x0a, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x40, 0x0a, 0x08, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e,
	0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x08, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x22, 0xd3, 0x01, 0x0a, 0x13, 0x53, 0x6f, 0x6c, 0x61,
	0x6e, 0x61, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12,
	0x36, 0x0a, 0x17, 0x6e, 0x75, 0x6d, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x15, 0x6e, 0x75, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x3f, 0x0a, 0x1c, 0x6e, 0x75, 0x6d, 0x5f, 0x72,
	0x65, 0x61, 0x64, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x19, 0x6e,
	0x75, 0x6d, 0x52, 0x65, 0x61, 0x64, 0x6f, 0x6e, 0x6c, 0x79, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x43, 0x0a, 0x1e, 0x6e, 0x75, 0x6d, 0x5f,
	0x72, 0x65, 0x61, 0x64, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x75, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65,
	0x64, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x1b, 0x6e, 0x75, 0x6d, 0x52, 0x65, 0x61, 0x64, 0x6f, 0x6e, 0x6c, 0x79, 0x55, 0x6e, 0x73,
	0x69, 0x67, 0x6e, 0x65, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x22, 0xaf, 0x01,
	0x0a, 0x11, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x69,
	0x64, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x70,
	0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x49, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1a, 0x0a,
	0x08, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x04, 0x52,
	0x08, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x73, 0x22,
	0x62, 0x0a, 0x0d, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x77, 0x72, 0x69, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x77, 0x72, 0x69, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x42, 0x3f, 0x5a, 0x3d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x63,
	0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_coinbase_chainstorage_blockchain_proto_rawDescOnce sync.Once
	file_coinbase_chainstorage_blockchain_proto_rawDescData = file_coinbase_chainstorage_blockchain_proto_rawDesc
)

func file_coinbase_chainstorage_blockchain_proto_rawDescGZIP() []byte {
	file_coinbase_chainstorage_blockchain_proto_rawDescOnce.Do(func() {
		file_coinbase_chainstorage_blockchain_proto_rawDescData = protoimpl.X.CompressGZIP(file_coinbase_chainstorage_blockchain_proto_rawDescData)
	})
	return file_coinbase_chainstorage_blockchain_proto_rawDescData
}

var file_coinbase_chainstorage_blockchain_proto_msgTypes = make([]protoimpl.MessageInfo, 45)
var file_coinbase_chainstorage_blockchain_proto_goTypes = []interface{}{
	(*Block)(nil),                                // 0: coinbase.chainstorage.Block
	(*BlockIdentifier)(nil),                      // 1: coinbase.chainstorage.BlockIdentifier
	(*BlockMetadata)(nil),                        // 2: coinbase.chainstorage.BlockMetadata
	(*EthereumBlobdata)(nil),                     // 3: coinbase.chainstorage.EthereumBlobdata
	(*PolygonExtraData)(nil),                     // 4: coinbase.chainstorage.PolygonExtraData
	(*RosettaBlock)(nil),                         // 5: coinbase.chainstorage.RosettaBlock
	(*NativeBlock)(nil),                          // 6: coinbase.chainstorage.NativeBlock
	(*EthereumBlock)(nil),                        // 7: coinbase.chainstorage.EthereumBlock
	(*EthereumWithdrawal)(nil),                   // 8: coinbase.chainstorage.EthereumWithdrawal
	(*EthereumHeader)(nil),                       // 9: coinbase.chainstorage.EthereumHeader
	(*EthereumTransactionAccess)(nil),            // 10: coinbase.chainstorage.EthereumTransactionAccess
	(*EthereumTransactionAccessList)(nil),        // 11: coinbase.chainstorage.EthereumTransactionAccessList
	(*EthereumTransaction)(nil),                  // 12: coinbase.chainstorage.EthereumTransaction
	(*EthereumTransactionReceipt)(nil),           // 13: coinbase.chainstorage.EthereumTransactionReceipt
	(*EthereumEventLog)(nil),                     // 14: coinbase.chainstorage.EthereumEventLog
	(*EthereumTransactionTrace)(nil),             // 15: coinbase.chainstorage.EthereumTransactionTrace
	(*EthereumTransactionFlattenedTrace)(nil),    // 16: coinbase.chainstorage.EthereumTransactionFlattenedTrace
	(*EthereumTokenTransfer)(nil),                // 17: coinbase.chainstorage.EthereumTokenTransfer
	(*ERC20TokenTransfer)(nil),                   // 18: coinbase.chainstorage.ERC20TokenTransfer
	(*ERC721TokenTransfer)(nil),                  // 19: coinbase.chainstorage.ERC721TokenTransfer
	(*BitcoinBlobdata)(nil),                      // 20: coinbase.chainstorage.BitcoinBlobdata
	(*RepeatedBytes)(nil),                        // 21: coinbase.chainstorage.RepeatedBytes
	(*BitcoinHeader)(nil),                        // 22: coinbase.chainstorage.BitcoinHeader
	(*BitcoinTransaction)(nil),                   // 23: coinbase.chainstorage.BitcoinTransaction
	(*BitcoinTransactionInput)(nil),              // 24: coinbase.chainstorage.BitcoinTransactionInput
	(*BitcoinScriptSignature)(nil),               // 25: coinbase.chainstorage.BitcoinScriptSignature
	(*BitcoinTransactionOutput)(nil),             // 26: coinbase.chainstorage.BitcoinTransactionOutput
	(*BitcoinScriptPublicKey)(nil),               // 27: coinbase.chainstorage.BitcoinScriptPublicKey
	(*BitcoinBlock)(nil),                         // 28: coinbase.chainstorage.BitcoinBlock
	(*RosettaBlobdata)(nil),                      // 29: coinbase.chainstorage.RosettaBlobdata
	(*SolanaBlobdata)(nil),                       // 30: coinbase.chainstorage.SolanaBlobdata
	(*SolanaBlock)(nil),                          // 31: coinbase.chainstorage.SolanaBlock
	(*SolanaHeader)(nil),                         // 32: coinbase.chainstorage.SolanaHeader
	(*SolanaTransaction)(nil),                    // 33: coinbase.chainstorage.SolanaTransaction
	(*SolanaTransactionMeta)(nil),                // 34: coinbase.chainstorage.SolanaTransactionMeta
	(*SolanaTokenBalance)(nil),                   // 35: coinbase.chainstorage.SolanaTokenBalance
	(*SolanaTokenAmount)(nil),                    // 36: coinbase.chainstorage.SolanaTokenAmount
	(*SolanaInnerInstruction)(nil),               // 37: coinbase.chainstorage.SolanaInnerInstruction
	(*SolanaReward)(nil),                         // 38: coinbase.chainstorage.SolanaReward
	(*SolanaTransactionPayload)(nil),             // 39: coinbase.chainstorage.SolanaTransactionPayload
	(*SolanaMessage)(nil),                        // 40: coinbase.chainstorage.SolanaMessage
	(*SolanaMessageHeader)(nil),                  // 41: coinbase.chainstorage.SolanaMessageHeader
	(*SolanaInstruction)(nil),                    // 42: coinbase.chainstorage.SolanaInstruction
	(*SolanaAccount)(nil),                        // 43: coinbase.chainstorage.SolanaAccount
	(*EthereumTransactionReceipt_L1FeeInfo)(nil), // 44: coinbase.chainstorage.EthereumTransactionReceipt.L1FeeInfo
	(common.Blockchain)(0),                       // 45: coinbase.c3.common.Blockchain
	(common.Network)(0),                          // 46: coinbase.c3.common.Network
	(*timestamppb.Timestamp)(nil),                // 47: google.protobuf.Timestamp
	(*types.Block)(nil),                          // 48: coinbase.crypto.rosetta.types.Block
}
var file_coinbase_chainstorage_blockchain_proto_depIdxs = []int32{
	45, // 0: coinbase.chainstorage.Block.blockchain:type_name -> coinbase.c3.common.Blockchain
	46, // 1: coinbase.chainstorage.Block.network:type_name -> coinbase.c3.common.Network
	2,  // 2: coinbase.chainstorage.Block.metadata:type_name -> coinbase.chainstorage.BlockMetadata
	3,  // 3: coinbase.chainstorage.Block.ethereum:type_name -> coinbase.chainstorage.EthereumBlobdata
	20, // 4: coinbase.chainstorage.Block.bitcoin:type_name -> coinbase.chainstorage.BitcoinBlobdata
	29, // 5: coinbase.chainstorage.Block.rosetta:type_name -> coinbase.chainstorage.RosettaBlobdata
	30, // 6: coinbase.chainstorage.Block.solana:type_name -> coinbase.chainstorage.SolanaBlobdata
	47, // 7: coinbase.chainstorage.BlockIdentifier.timestamp:type_name -> google.protobuf.Timestamp
	47, // 8: coinbase.chainstorage.BlockMetadata.timestamp:type_name -> google.protobuf.Timestamp
	4,  // 9: coinbase.chainstorage.EthereumBlobdata.polygon:type_name -> coinbase.chainstorage.PolygonExtraData
	48, // 10: coinbase.chainstorage.RosettaBlock.block:type_name -> coinbase.crypto.rosetta.types.Block
	45, // 11: coinbase.chainstorage.NativeBlock.blockchain:type_name -> coinbase.c3.common.Blockchain
	46, // 12: coinbase.chainstorage.NativeBlock.network:type_name -> coinbase.c3.common.Network
	47, // 13: coinbase.chainstorage.NativeBlock.timestamp:type_name -> google.protobuf.Timestamp
	7,  // 14: coinbase.chainstorage.NativeBlock.ethereum:type_name -> coinbase.chainstorage.EthereumBlock
	28, // 15: coinbase.chainstorage.NativeBlock.bitcoin:type_name -> coinbase.chainstorage.BitcoinBlock
	48, // 16: coinbase.chainstorage.NativeBlock.rosetta:type_name -> coinbase.crypto.rosetta.types.Block
	31, // 17: coinbase.chainstorage.NativeBlock.solana:type_name -> coinbase.chainstorage.SolanaBlock
	9,  // 18: coinbase.chainstorage.EthereumBlock.header:type_name -> coinbase.chainstorage.EthereumHeader
	12, // 19: coinbase.chainstorage.EthereumBlock.transactions:type_name -> coinbase.chainstorage.EthereumTransaction
	9,  // 20: coinbase.chainstorage.EthereumBlock.uncles:type_name -> coinbase.chainstorage.EthereumHeader
	47, // 21: coinbase.chainstorage.EthereumHeader.timestamp:type_name -> google.protobuf.Timestamp
	8,  // 22: coinbase.chainstorage.EthereumHeader.withdrawals:type_name -> coinbase.chainstorage.EthereumWithdrawal
	10, // 23: coinbase.chainstorage.EthereumTransactionAccessList.access_list:type_name -> coinbase.chainstorage.EthereumTransactionAccess
	13, // 24: coinbase.chainstorage.EthereumTransaction.receipt:type_name -> coinbase.chainstorage.EthereumTransactionReceipt
	17, // 25: coinbase.chainstorage.EthereumTransaction.token_transfers:type_name -> coinbase.chainstorage.EthereumTokenTransfer
	11, // 26: coinbase.chainstorage.EthereumTransaction.transaction_access_list:type_name -> coinbase.chainstorage.EthereumTransactionAccessList
	16, // 27: coinbase.chainstorage.EthereumTransaction.flattened_traces:type_name -> coinbase.chainstorage.EthereumTransactionFlattenedTrace
	47, // 28: coinbase.chainstorage.EthereumTransaction.block_timestamp:type_name -> google.protobuf.Timestamp
	14, // 29: coinbase.chainstorage.EthereumTransactionReceipt.logs:type_name -> coinbase.chainstorage.EthereumEventLog
	44, // 30: coinbase.chainstorage.EthereumTransactionReceipt.l1_fee_info:type_name -> coinbase.chainstorage.EthereumTransactionReceipt.L1FeeInfo
	15, // 31: coinbase.chainstorage.EthereumTransactionTrace.calls:type_name -> coinbase.chainstorage.EthereumTransactionTrace
	18, // 32: coinbase.chainstorage.EthereumTokenTransfer.erc20:type_name -> coinbase.chainstorage.ERC20TokenTransfer
	19, // 33: coinbase.chainstorage.EthereumTokenTransfer.erc721:type_name -> coinbase.chainstorage.ERC721TokenTransfer
	21, // 34: coinbase.chainstorage.BitcoinBlobdata.input_transactions:type_name -> coinbase.chainstorage.RepeatedBytes
	47, // 35: coinbase.chainstorage.BitcoinHeader.timestamp:type_name -> google.protobuf.Timestamp
	24, // 36: coinbase.chainstorage.BitcoinTransaction.inputs:type_name -> coinbase.chainstorage.BitcoinTransactionInput
	26, // 37: coinbase.chainstorage.BitcoinTransaction.outputs:type_name -> coinbase.chainstorage.BitcoinTransactionOutput
	25, // 38: coinbase.chainstorage.BitcoinTransactionInput.script_signature:type_name -> coinbase.chainstorage.BitcoinScriptSignature
	26, // 39: coinbase.chainstorage.BitcoinTransactionInput.from_output:type_name -> coinbase.chainstorage.BitcoinTransactionOutput
	27, // 40: coinbase.chainstorage.BitcoinTransactionOutput.script_public_key:type_name -> coinbase.chainstorage.BitcoinScriptPublicKey
	22, // 41: coinbase.chainstorage.BitcoinBlock.header:type_name -> coinbase.chainstorage.BitcoinHeader
	23, // 42: coinbase.chainstorage.BitcoinBlock.transactions:type_name -> coinbase.chainstorage.BitcoinTransaction
	32, // 43: coinbase.chainstorage.SolanaBlock.header:type_name -> coinbase.chainstorage.SolanaHeader
	33, // 44: coinbase.chainstorage.SolanaBlock.transactions:type_name -> coinbase.chainstorage.SolanaTransaction
	38, // 45: coinbase.chainstorage.SolanaBlock.rewards:type_name -> coinbase.chainstorage.SolanaReward
	47, // 46: coinbase.chainstorage.SolanaHeader.block_time:type_name -> google.protobuf.Timestamp
	39, // 47: coinbase.chainstorage.SolanaTransaction.payload:type_name -> coinbase.chainstorage.SolanaTransactionPayload
	34, // 48: coinbase.chainstorage.SolanaTransaction.meta:type_name -> coinbase.chainstorage.SolanaTransactionMeta
	35, // 49: coinbase.chainstorage.SolanaTransactionMeta.pre_token_balances:type_name -> coinbase.chainstorage.SolanaTokenBalance
	35, // 50: coinbase.chainstorage.SolanaTransactionMeta.post_token_balances:type_name -> coinbase.chainstorage.SolanaTokenBalance
	37, // 51: coinbase.chainstorage.SolanaTransactionMeta.inner_instructions:type_name -> coinbase.chainstorage.SolanaInnerInstruction
	38, // 52: coinbase.chainstorage.SolanaTransactionMeta.rewards:type_name -> coinbase.chainstorage.SolanaReward
	36, // 53: coinbase.chainstorage.SolanaTokenBalance.token_amount:type_name -> coinbase.chainstorage.SolanaTokenAmount
	42, // 54: coinbase.chainstorage.SolanaInnerInstruction.instructions:type_name -> coinbase.chainstorage.SolanaInstruction
	40, // 55: coinbase.chainstorage.SolanaTransactionPayload.message:type_name -> coinbase.chainstorage.SolanaMessage
	41, // 56: coinbase.chainstorage.SolanaMessage.header:type_name -> coinbase.chainstorage.SolanaMessageHeader
	42, // 57: coinbase.chainstorage.SolanaMessage.instructions:type_name -> coinbase.chainstorage.SolanaInstruction
	43, // 58: coinbase.chainstorage.SolanaMessage.accounts:type_name -> coinbase.chainstorage.SolanaAccount
	59, // [59:59] is the sub-list for method output_type
	59, // [59:59] is the sub-list for method input_type
	59, // [59:59] is the sub-list for extension type_name
	59, // [59:59] is the sub-list for extension extendee
	0,  // [0:59] is the sub-list for field type_name
}

func init() { file_coinbase_chainstorage_blockchain_proto_init() }
func file_coinbase_chainstorage_blockchain_proto_init() {
	if File_coinbase_chainstorage_blockchain_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_coinbase_chainstorage_blockchain_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Block); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockIdentifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EthereumBlobdata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolygonExtraData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RosettaBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NativeBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EthereumBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EthereumWithdrawal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EthereumHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EthereumTransactionAccess); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EthereumTransactionAccessList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EthereumTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EthereumTransactionReceipt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EthereumEventLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EthereumTransactionTrace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EthereumTransactionFlattenedTrace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EthereumTokenTransfer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ERC20TokenTransfer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ERC721TokenTransfer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BitcoinBlobdata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepeatedBytes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BitcoinHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BitcoinTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BitcoinTransactionInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BitcoinScriptSignature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BitcoinTransactionOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BitcoinScriptPublicKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BitcoinBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RosettaBlobdata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SolanaBlobdata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SolanaBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SolanaHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SolanaTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SolanaTransactionMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SolanaTokenBalance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SolanaTokenAmount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SolanaInnerInstruction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SolanaReward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SolanaTransactionPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SolanaMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SolanaMessageHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SolanaInstruction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SolanaAccount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EthereumTransactionReceipt_L1FeeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_coinbase_chainstorage_blockchain_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*Block_Ethereum)(nil),
		(*Block_Bitcoin)(nil),
		(*Block_Rosetta)(nil),
		(*Block_Solana)(nil),
	}
	file_coinbase_chainstorage_blockchain_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*EthereumBlobdata_Polygon)(nil),
	}
	file_coinbase_chainstorage_blockchain_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*NativeBlock_Ethereum)(nil),
		(*NativeBlock_Bitcoin)(nil),
		(*NativeBlock_Rosetta)(nil),
		(*NativeBlock_Solana)(nil),
	}
	file_coinbase_chainstorage_blockchain_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*EthereumHeader_BaseFeePerGas)(nil),
	}
	file_coinbase_chainstorage_blockchain_proto_msgTypes[12].OneofWrappers = []interface{}{
		(*EthereumTransaction_MaxFeePerGas)(nil),
		(*EthereumTransaction_MaxPriorityFeePerGas)(nil),
		(*EthereumTransaction_TransactionAccessList)(nil),
		(*EthereumTransaction_PriorityFeePerGas)(nil),
	}
	file_coinbase_chainstorage_blockchain_proto_msgTypes[13].OneofWrappers = []interface{}{
		(*EthereumTransactionReceipt_Status)(nil),
		(*EthereumTransactionReceipt_L1FeeInfo_)(nil),
	}
	file_coinbase_chainstorage_blockchain_proto_msgTypes[17].OneofWrappers = []interface{}{
		(*EthereumTokenTransfer_Erc20)(nil),
		(*EthereumTokenTransfer_Erc721)(nil),
	}
	file_coinbase_chainstorage_blockchain_proto_msgTypes[38].OneofWrappers = []interface{}{
		(*SolanaReward_Commission)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_coinbase_chainstorage_blockchain_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   45,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_coinbase_chainstorage_blockchain_proto_goTypes,
		DependencyIndexes: file_coinbase_chainstorage_blockchain_proto_depIdxs,
		MessageInfos:      file_coinbase_chainstorage_blockchain_proto_msgTypes,
	}.Build()
	File_coinbase_chainstorage_blockchain_proto = out.File
	file_coinbase_chainstorage_blockchain_proto_rawDesc = nil
	file_coinbase_chainstorage_blockchain_proto_goTypes = nil
	file_coinbase_chainstorage_blockchain_proto_depIdxs = nil
}
