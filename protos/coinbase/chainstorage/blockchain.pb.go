// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        v4.25.3
// source: coinbase/chainstorage/blockchain.proto

package chainstorage

import (
	common "github.com/coinbase/chainstorage/protos/coinbase/c3/common"
	types "github.com/coinbase/chainstorage/protos/coinbase/crypto/rosetta/types"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SideChain int32

const (
	// This is default value and set for main chains
	SideChain_SIDECHAIN_NONE                    SideChain = 0
	SideChain_SIDECHAIN_ETHEREUM_MAINNET_BEACON SideChain = 1
	SideChain_SIDECHAIN_ETHEREUM_HOLESKY_BEACON SideChain = 2
)

// Enum value maps for SideChain.
var (
	SideChain_name = map[int32]string{
		0: "SIDECHAIN_NONE",
		1: "SIDECHAIN_ETHEREUM_MAINNET_BEACON",
		2: "SIDECHAIN_ETHEREUM_HOLESKY_BEACON",
	}
	SideChain_value = map[string]int32{
		"SIDECHAIN_NONE":                    0,
		"SIDECHAIN_ETHEREUM_MAINNET_BEACON": 1,
		"SIDECHAIN_ETHEREUM_HOLESKY_BEACON": 2,
	}
)

func (x SideChain) Enum() *SideChain {
	p := new(SideChain)
	*p = x
	return p
}

func (x SideChain) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SideChain) Descriptor() protoreflect.EnumDescriptor {
	return file_coinbase_chainstorage_blockchain_proto_enumTypes[0].Descriptor()
}

func (SideChain) Type() protoreflect.EnumType {
	return &file_coinbase_chainstorage_blockchain_proto_enumTypes[0]
}

func (x SideChain) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SideChain.Descriptor instead.
func (SideChain) EnumDescriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_proto_rawDescGZIP(), []int{0}
}

type Block struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Blockchain          common.Blockchain    `protobuf:"varint,1,opt,name=blockchain,proto3,enum=coinbase.c3.common.Blockchain" json:"blockchain,omitempty"`
	Network             common.Network       `protobuf:"varint,2,opt,name=network,proto3,enum=coinbase.c3.common.Network" json:"network,omitempty"`
	Metadata            *BlockMetadata       `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty"`
	TransactionMetadata *TransactionMetadata `protobuf:"bytes,4,opt,name=transaction_metadata,json=transactionMetadata,proto3" json:"transaction_metadata,omitempty"`
	SideChain           SideChain            `protobuf:"varint,5,opt,name=side_chain,json=sideChain,proto3,enum=coinbase.chainstorage.SideChain" json:"side_chain,omitempty"`
	// Types that are assignable to Blobdata:
	//
	//	*Block_Ethereum
	//	*Block_Bitcoin
	//	*Block_Rosetta
	//	*Block_Solana
	//	*Block_Aptos
	Blobdata isBlock_Blobdata `protobuf_oneof:"blobdata"`
}

func (x *Block) Reset() {
	*x = Block{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Block) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Block) ProtoMessage() {}

func (x *Block) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Block.ProtoReflect.Descriptor instead.
func (*Block) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_proto_rawDescGZIP(), []int{0}
}

func (x *Block) GetBlockchain() common.Blockchain {
	if x != nil {
		return x.Blockchain
	}
	return common.Blockchain(0)
}

func (x *Block) GetNetwork() common.Network {
	if x != nil {
		return x.Network
	}
	return common.Network(0)
}

func (x *Block) GetMetadata() *BlockMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Block) GetTransactionMetadata() *TransactionMetadata {
	if x != nil {
		return x.TransactionMetadata
	}
	return nil
}

func (x *Block) GetSideChain() SideChain {
	if x != nil {
		return x.SideChain
	}
	return SideChain_SIDECHAIN_NONE
}

func (m *Block) GetBlobdata() isBlock_Blobdata {
	if m != nil {
		return m.Blobdata
	}
	return nil
}

func (x *Block) GetEthereum() *EthereumBlobdata {
	if x, ok := x.GetBlobdata().(*Block_Ethereum); ok {
		return x.Ethereum
	}
	return nil
}

func (x *Block) GetBitcoin() *BitcoinBlobdata {
	if x, ok := x.GetBlobdata().(*Block_Bitcoin); ok {
		return x.Bitcoin
	}
	return nil
}

func (x *Block) GetRosetta() *RosettaBlobdata {
	if x, ok := x.GetBlobdata().(*Block_Rosetta); ok {
		return x.Rosetta
	}
	return nil
}

func (x *Block) GetSolana() *SolanaBlobdata {
	if x, ok := x.GetBlobdata().(*Block_Solana); ok {
		return x.Solana
	}
	return nil
}

func (x *Block) GetAptos() *AptosBlobdata {
	if x, ok := x.GetBlobdata().(*Block_Aptos); ok {
		return x.Aptos
	}
	return nil
}

type isBlock_Blobdata interface {
	isBlock_Blobdata()
}

type Block_Ethereum struct {
	Ethereum *EthereumBlobdata `protobuf:"bytes,100,opt,name=ethereum,proto3,oneof"`
}

type Block_Bitcoin struct {
	Bitcoin *BitcoinBlobdata `protobuf:"bytes,101,opt,name=bitcoin,proto3,oneof"`
}

type Block_Rosetta struct {
	Rosetta *RosettaBlobdata `protobuf:"bytes,102,opt,name=rosetta,proto3,oneof"`
}

type Block_Solana struct {
	Solana *SolanaBlobdata `protobuf:"bytes,103,opt,name=solana,proto3,oneof"`
}

type Block_Aptos struct {
	Aptos *AptosBlobdata `protobuf:"bytes,104,opt,name=aptos,proto3,oneof"`
}

func (*Block_Ethereum) isBlock_Blobdata() {}

func (*Block_Bitcoin) isBlock_Blobdata() {}

func (*Block_Rosetta) isBlock_Blobdata() {}

func (*Block_Solana) isBlock_Blobdata() {}

func (*Block_Aptos) isBlock_Blobdata() {}

type BlockIdentifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash      string                 `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	Height    uint64                 `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
	Tag       uint32                 `protobuf:"varint,3,opt,name=tag,proto3" json:"tag,omitempty"`
	Skipped   bool                   `protobuf:"varint,4,opt,name=skipped,proto3" json:"skipped,omitempty"`
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *BlockIdentifier) Reset() {
	*x = BlockIdentifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockIdentifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockIdentifier) ProtoMessage() {}

func (x *BlockIdentifier) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockIdentifier.ProtoReflect.Descriptor instead.
func (*BlockIdentifier) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_proto_rawDescGZIP(), []int{1}
}

func (x *BlockIdentifier) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *BlockIdentifier) GetHeight() uint64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *BlockIdentifier) GetTag() uint32 {
	if x != nil {
		return x.Tag
	}
	return 0
}

func (x *BlockIdentifier) GetSkipped() bool {
	if x != nil {
		return x.Skipped
	}
	return false
}

func (x *BlockIdentifier) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

type BlockMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Tag is a way to version the blockchain dataset. See http://go/cs-design for more details.
	Tag uint32 `protobuf:"varint,1,opt,name=tag,proto3" json:"tag,omitempty"`
	// Hash of the current block.
	Hash string `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
	// Hash of the parent block.
	ParentHash string `protobuf:"bytes,3,opt,name=parent_hash,json=parentHash,proto3" json:"parent_hash,omitempty"`
	// Height of the current block.
	Height uint64 `protobuf:"varint,4,opt,name=height,proto3" json:"height,omitempty"`
	// Object key to the blob storage.
	ObjectKeyMain string `protobuf:"bytes,5,opt,name=object_key_main,json=objectKeyMain,proto3" json:"object_key_main,omitempty"`
	// Height of the parent block. For most blockchains, parent_height equals to height - 1.
	ParentHeight uint64 `protobuf:"varint,6,opt,name=parent_height,json=parentHeight,proto3" json:"parent_height,omitempty"`
	// Skipped is applicable to certain blockchains, e.g. solana, where the abandoned blocks may make into way into the canonical chain.
	Skipped bool `protobuf:"varint,7,opt,name=skipped,proto3" json:"skipped,omitempty"`
	// Block timestamp. Note that this attribute is only available in recent blocks.
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *BlockMetadata) Reset() {
	*x = BlockMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockMetadata) ProtoMessage() {}

func (x *BlockMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockMetadata.ProtoReflect.Descriptor instead.
func (*BlockMetadata) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_proto_rawDescGZIP(), []int{2}
}

func (x *BlockMetadata) GetTag() uint32 {
	if x != nil {
		return x.Tag
	}
	return 0
}

func (x *BlockMetadata) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *BlockMetadata) GetParentHash() string {
	if x != nil {
		return x.ParentHash
	}
	return ""
}

func (x *BlockMetadata) GetHeight() uint64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *BlockMetadata) GetObjectKeyMain() string {
	if x != nil {
		return x.ObjectKeyMain
	}
	return ""
}

func (x *BlockMetadata) GetParentHeight() uint64 {
	if x != nil {
		return x.ParentHeight
	}
	return 0
}

func (x *BlockMetadata) GetSkipped() bool {
	if x != nil {
		return x.Skipped
	}
	return false
}

func (x *BlockMetadata) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

type TransactionMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Transactions []string `protobuf:"bytes,1,rep,name=transactions,proto3" json:"transactions,omitempty"`
}

func (x *TransactionMetadata) Reset() {
	*x = TransactionMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionMetadata) ProtoMessage() {}

func (x *TransactionMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionMetadata.ProtoReflect.Descriptor instead.
func (*TransactionMetadata) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_proto_rawDescGZIP(), []int{3}
}

func (x *TransactionMetadata) GetTransactions() []string {
	if x != nil {
		return x.Transactions
	}
	return nil
}

type RosettaBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Block *types.Block `protobuf:"bytes,1,opt,name=block,proto3" json:"block,omitempty"`
}

func (x *RosettaBlock) Reset() {
	*x = RosettaBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RosettaBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RosettaBlock) ProtoMessage() {}

func (x *RosettaBlock) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RosettaBlock.ProtoReflect.Descriptor instead.
func (*RosettaBlock) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_proto_rawDescGZIP(), []int{4}
}

func (x *RosettaBlock) GetBlock() *types.Block {
	if x != nil {
		return x.Block
	}
	return nil
}

type NativeBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Blockchain      common.Blockchain      `protobuf:"varint,1,opt,name=blockchain,proto3,enum=coinbase.c3.common.Blockchain" json:"blockchain,omitempty"`
	Network         common.Network         `protobuf:"varint,2,opt,name=network,proto3,enum=coinbase.c3.common.Network" json:"network,omitempty"`
	Tag             uint32                 `protobuf:"varint,3,opt,name=tag,proto3" json:"tag,omitempty"`
	Hash            string                 `protobuf:"bytes,4,opt,name=hash,proto3" json:"hash,omitempty"`
	ParentHash      string                 `protobuf:"bytes,5,opt,name=parent_hash,json=parentHash,proto3" json:"parent_hash,omitempty"`
	Height          uint64                 `protobuf:"varint,6,opt,name=height,proto3" json:"height,omitempty"`
	Timestamp       *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	NumTransactions uint64                 `protobuf:"varint,8,opt,name=num_transactions,json=numTransactions,proto3" json:"num_transactions,omitempty"`
	ParentHeight    uint64                 `protobuf:"varint,9,opt,name=parent_height,json=parentHeight,proto3" json:"parent_height,omitempty"`
	Skipped         bool                   `protobuf:"varint,10,opt,name=skipped,proto3" json:"skipped,omitempty"`
	SideChain       SideChain              `protobuf:"varint,11,opt,name=side_chain,json=sideChain,proto3,enum=coinbase.chainstorage.SideChain" json:"side_chain,omitempty"`
	// Types that are assignable to Block:
	//
	//	*NativeBlock_Ethereum
	//	*NativeBlock_Bitcoin
	//	*NativeBlock_Rosetta
	//	*NativeBlock_Solana
	//	*NativeBlock_Aptos
	//	*NativeBlock_SolanaV2
	Block isNativeBlock_Block `protobuf_oneof:"block"`
}

func (x *NativeBlock) Reset() {
	*x = NativeBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NativeBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NativeBlock) ProtoMessage() {}

func (x *NativeBlock) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NativeBlock.ProtoReflect.Descriptor instead.
func (*NativeBlock) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_proto_rawDescGZIP(), []int{5}
}

func (x *NativeBlock) GetBlockchain() common.Blockchain {
	if x != nil {
		return x.Blockchain
	}
	return common.Blockchain(0)
}

func (x *NativeBlock) GetNetwork() common.Network {
	if x != nil {
		return x.Network
	}
	return common.Network(0)
}

func (x *NativeBlock) GetTag() uint32 {
	if x != nil {
		return x.Tag
	}
	return 0
}

func (x *NativeBlock) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *NativeBlock) GetParentHash() string {
	if x != nil {
		return x.ParentHash
	}
	return ""
}

func (x *NativeBlock) GetHeight() uint64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *NativeBlock) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *NativeBlock) GetNumTransactions() uint64 {
	if x != nil {
		return x.NumTransactions
	}
	return 0
}

func (x *NativeBlock) GetParentHeight() uint64 {
	if x != nil {
		return x.ParentHeight
	}
	return 0
}

func (x *NativeBlock) GetSkipped() bool {
	if x != nil {
		return x.Skipped
	}
	return false
}

func (x *NativeBlock) GetSideChain() SideChain {
	if x != nil {
		return x.SideChain
	}
	return SideChain_SIDECHAIN_NONE
}

func (m *NativeBlock) GetBlock() isNativeBlock_Block {
	if m != nil {
		return m.Block
	}
	return nil
}

func (x *NativeBlock) GetEthereum() *EthereumBlock {
	if x, ok := x.GetBlock().(*NativeBlock_Ethereum); ok {
		return x.Ethereum
	}
	return nil
}

func (x *NativeBlock) GetBitcoin() *BitcoinBlock {
	if x, ok := x.GetBlock().(*NativeBlock_Bitcoin); ok {
		return x.Bitcoin
	}
	return nil
}

func (x *NativeBlock) GetRosetta() *types.Block {
	if x, ok := x.GetBlock().(*NativeBlock_Rosetta); ok {
		return x.Rosetta
	}
	return nil
}

func (x *NativeBlock) GetSolana() *SolanaBlock {
	if x, ok := x.GetBlock().(*NativeBlock_Solana); ok {
		return x.Solana
	}
	return nil
}

func (x *NativeBlock) GetAptos() *AptosBlock {
	if x, ok := x.GetBlock().(*NativeBlock_Aptos); ok {
		return x.Aptos
	}
	return nil
}

func (x *NativeBlock) GetSolanaV2() *SolanaBlockV2 {
	if x, ok := x.GetBlock().(*NativeBlock_SolanaV2); ok {
		return x.SolanaV2
	}
	return nil
}

type isNativeBlock_Block interface {
	isNativeBlock_Block()
}

type NativeBlock_Ethereum struct {
	Ethereum *EthereumBlock `protobuf:"bytes,100,opt,name=ethereum,proto3,oneof"`
}

type NativeBlock_Bitcoin struct {
	Bitcoin *BitcoinBlock `protobuf:"bytes,101,opt,name=bitcoin,proto3,oneof"`
}

type NativeBlock_Rosetta struct {
	Rosetta *types.Block `protobuf:"bytes,102,opt,name=rosetta,proto3,oneof"`
}

type NativeBlock_Solana struct {
	Solana *SolanaBlock `protobuf:"bytes,103,opt,name=solana,proto3,oneof"`
}

type NativeBlock_Aptos struct {
	Aptos *AptosBlock `protobuf:"bytes,104,opt,name=aptos,proto3,oneof"`
}

type NativeBlock_SolanaV2 struct {
	SolanaV2 *SolanaBlockV2 `protobuf:"bytes,105,opt,name=solana_v2,json=solanaV2,proto3,oneof"`
}

func (*NativeBlock_Ethereum) isNativeBlock_Block() {}

func (*NativeBlock_Bitcoin) isNativeBlock_Block() {}

func (*NativeBlock_Rosetta) isNativeBlock_Block() {}

func (*NativeBlock_Solana) isNativeBlock_Block() {}

func (*NativeBlock_Aptos) isNativeBlock_Block() {}

func (*NativeBlock_SolanaV2) isNativeBlock_Block() {}

type NativeTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Blockchain      common.Blockchain      `protobuf:"varint,1,opt,name=blockchain,proto3,enum=coinbase.c3.common.Blockchain" json:"blockchain,omitempty"`
	Network         common.Network         `protobuf:"varint,2,opt,name=network,proto3,enum=coinbase.c3.common.Network" json:"network,omitempty"`
	Tag             uint32                 `protobuf:"varint,3,opt,name=tag,proto3" json:"tag,omitempty"`
	TransactionHash string                 `protobuf:"bytes,4,opt,name=transaction_hash,json=transactionHash,proto3" json:"transaction_hash,omitempty"`
	BlockHeight     uint64                 `protobuf:"varint,5,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	BlockHash       string                 `protobuf:"bytes,6,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	BlockTimestamp  *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=block_timestamp,json=blockTimestamp,proto3" json:"block_timestamp,omitempty"`
	// Types that are assignable to Transaction:
	//
	//	*NativeTransaction_Ethereum
	//	*NativeTransaction_Bitcoin
	//	*NativeTransaction_Rosetta
	//	*NativeTransaction_Solana
	//	*NativeTransaction_Aptos
	Transaction isNativeTransaction_Transaction `protobuf_oneof:"transaction"`
}

func (x *NativeTransaction) Reset() {
	*x = NativeTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NativeTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NativeTransaction) ProtoMessage() {}

func (x *NativeTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NativeTransaction.ProtoReflect.Descriptor instead.
func (*NativeTransaction) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_proto_rawDescGZIP(), []int{6}
}

func (x *NativeTransaction) GetBlockchain() common.Blockchain {
	if x != nil {
		return x.Blockchain
	}
	return common.Blockchain(0)
}

func (x *NativeTransaction) GetNetwork() common.Network {
	if x != nil {
		return x.Network
	}
	return common.Network(0)
}

func (x *NativeTransaction) GetTag() uint32 {
	if x != nil {
		return x.Tag
	}
	return 0
}

func (x *NativeTransaction) GetTransactionHash() string {
	if x != nil {
		return x.TransactionHash
	}
	return ""
}

func (x *NativeTransaction) GetBlockHeight() uint64 {
	if x != nil {
		return x.BlockHeight
	}
	return 0
}

func (x *NativeTransaction) GetBlockHash() string {
	if x != nil {
		return x.BlockHash
	}
	return ""
}

func (x *NativeTransaction) GetBlockTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.BlockTimestamp
	}
	return nil
}

func (m *NativeTransaction) GetTransaction() isNativeTransaction_Transaction {
	if m != nil {
		return m.Transaction
	}
	return nil
}

func (x *NativeTransaction) GetEthereum() *EthereumTransaction {
	if x, ok := x.GetTransaction().(*NativeTransaction_Ethereum); ok {
		return x.Ethereum
	}
	return nil
}

func (x *NativeTransaction) GetBitcoin() *BitcoinTransaction {
	if x, ok := x.GetTransaction().(*NativeTransaction_Bitcoin); ok {
		return x.Bitcoin
	}
	return nil
}

func (x *NativeTransaction) GetRosetta() *types.Transaction {
	if x, ok := x.GetTransaction().(*NativeTransaction_Rosetta); ok {
		return x.Rosetta
	}
	return nil
}

func (x *NativeTransaction) GetSolana() *SolanaTransaction {
	if x, ok := x.GetTransaction().(*NativeTransaction_Solana); ok {
		return x.Solana
	}
	return nil
}

func (x *NativeTransaction) GetAptos() *AptosTransaction {
	if x, ok := x.GetTransaction().(*NativeTransaction_Aptos); ok {
		return x.Aptos
	}
	return nil
}

type isNativeTransaction_Transaction interface {
	isNativeTransaction_Transaction()
}

type NativeTransaction_Ethereum struct {
	Ethereum *EthereumTransaction `protobuf:"bytes,100,opt,name=ethereum,proto3,oneof"`
}

type NativeTransaction_Bitcoin struct {
	Bitcoin *BitcoinTransaction `protobuf:"bytes,101,opt,name=bitcoin,proto3,oneof"`
}

type NativeTransaction_Rosetta struct {
	Rosetta *types.Transaction `protobuf:"bytes,102,opt,name=rosetta,proto3,oneof"`
}

type NativeTransaction_Solana struct {
	Solana *SolanaTransaction `protobuf:"bytes,103,opt,name=solana,proto3,oneof"`
}

type NativeTransaction_Aptos struct {
	Aptos *AptosTransaction `protobuf:"bytes,104,opt,name=aptos,proto3,oneof"`
}

func (*NativeTransaction_Ethereum) isNativeTransaction_Transaction() {}

func (*NativeTransaction_Bitcoin) isNativeTransaction_Transaction() {}

func (*NativeTransaction_Rosetta) isNativeTransaction_Transaction() {}

func (*NativeTransaction_Solana) isNativeTransaction_Transaction() {}

func (*NativeTransaction_Aptos) isNativeTransaction_Transaction() {}

type GetAccountProofResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Response:
	//
	//	*GetAccountProofResponse_Ethereum
	Response isGetAccountProofResponse_Response `protobuf_oneof:"response"`
}

func (x *GetAccountProofResponse) Reset() {
	*x = GetAccountProofResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAccountProofResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAccountProofResponse) ProtoMessage() {}

func (x *GetAccountProofResponse) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAccountProofResponse.ProtoReflect.Descriptor instead.
func (*GetAccountProofResponse) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_proto_rawDescGZIP(), []int{7}
}

func (m *GetAccountProofResponse) GetResponse() isGetAccountProofResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *GetAccountProofResponse) GetEthereum() *EthereumAccountStateProof {
	if x, ok := x.GetResponse().(*GetAccountProofResponse_Ethereum); ok {
		return x.Ethereum
	}
	return nil
}

type isGetAccountProofResponse_Response interface {
	isGetAccountProofResponse_Response()
}

type GetAccountProofResponse_Ethereum struct {
	Ethereum *EthereumAccountStateProof `protobuf:"bytes,100,opt,name=ethereum,proto3,oneof"`
}

func (*GetAccountProofResponse_Ethereum) isGetAccountProofResponse_Response() {}

type ValidateAccountStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountReq   *InternalGetVerifiedAccountStateRequest `protobuf:"bytes,1,opt,name=account_req,json=accountReq,proto3" json:"account_req,omitempty"`
	Block        *NativeBlock                            `protobuf:"bytes,2,opt,name=block,proto3" json:"block,omitempty"`
	AccountProof *GetAccountProofResponse                `protobuf:"bytes,3,opt,name=account_proof,json=accountProof,proto3" json:"account_proof,omitempty"`
}

func (x *ValidateAccountStateRequest) Reset() {
	*x = ValidateAccountStateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidateAccountStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateAccountStateRequest) ProtoMessage() {}

func (x *ValidateAccountStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateAccountStateRequest.ProtoReflect.Descriptor instead.
func (*ValidateAccountStateRequest) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_proto_rawDescGZIP(), []int{8}
}

func (x *ValidateAccountStateRequest) GetAccountReq() *InternalGetVerifiedAccountStateRequest {
	if x != nil {
		return x.AccountReq
	}
	return nil
}

func (x *ValidateAccountStateRequest) GetBlock() *NativeBlock {
	if x != nil {
		return x.Block
	}
	return nil
}

func (x *ValidateAccountStateRequest) GetAccountProof() *GetAccountProofResponse {
	if x != nil {
		return x.AccountProof
	}
	return nil
}

type InternalGetVerifiedAccountStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Account string `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	Tag     uint32 `protobuf:"varint,2,opt,name=tag,proto3" json:"tag,omitempty"`
	Height  uint64 `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty"`
	Hash    string `protobuf:"bytes,4,opt,name=hash,proto3" json:"hash,omitempty"`
	// Types that are assignable to ExtraInput:
	//
	//	*InternalGetVerifiedAccountStateRequest_Ethereum
	ExtraInput isInternalGetVerifiedAccountStateRequest_ExtraInput `protobuf_oneof:"extra_input"`
}

func (x *InternalGetVerifiedAccountStateRequest) Reset() {
	*x = InternalGetVerifiedAccountStateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InternalGetVerifiedAccountStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InternalGetVerifiedAccountStateRequest) ProtoMessage() {}

func (x *InternalGetVerifiedAccountStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InternalGetVerifiedAccountStateRequest.ProtoReflect.Descriptor instead.
func (*InternalGetVerifiedAccountStateRequest) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_proto_rawDescGZIP(), []int{9}
}

func (x *InternalGetVerifiedAccountStateRequest) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *InternalGetVerifiedAccountStateRequest) GetTag() uint32 {
	if x != nil {
		return x.Tag
	}
	return 0
}

func (x *InternalGetVerifiedAccountStateRequest) GetHeight() uint64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *InternalGetVerifiedAccountStateRequest) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (m *InternalGetVerifiedAccountStateRequest) GetExtraInput() isInternalGetVerifiedAccountStateRequest_ExtraInput {
	if m != nil {
		return m.ExtraInput
	}
	return nil
}

func (x *InternalGetVerifiedAccountStateRequest) GetEthereum() *EthereumExtraInput {
	if x, ok := x.GetExtraInput().(*InternalGetVerifiedAccountStateRequest_Ethereum); ok {
		return x.Ethereum
	}
	return nil
}

type isInternalGetVerifiedAccountStateRequest_ExtraInput interface {
	isInternalGetVerifiedAccountStateRequest_ExtraInput()
}

type InternalGetVerifiedAccountStateRequest_Ethereum struct {
	Ethereum *EthereumExtraInput `protobuf:"bytes,100,opt,name=ethereum,proto3,oneof"`
}

func (*InternalGetVerifiedAccountStateRequest_Ethereum) isInternalGetVerifiedAccountStateRequest_ExtraInput() {
}

type ValidateAccountStateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Balance string `protobuf:"bytes,1,opt,name=balance,proto3" json:"balance,omitempty"`
	// Types that are assignable to Response:
	//
	//	*ValidateAccountStateResponse_Ethereum
	Response isValidateAccountStateResponse_Response `protobuf_oneof:"response"`
}

func (x *ValidateAccountStateResponse) Reset() {
	*x = ValidateAccountStateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidateAccountStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateAccountStateResponse) ProtoMessage() {}

func (x *ValidateAccountStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateAccountStateResponse.ProtoReflect.Descriptor instead.
func (*ValidateAccountStateResponse) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_proto_rawDescGZIP(), []int{10}
}

func (x *ValidateAccountStateResponse) GetBalance() string {
	if x != nil {
		return x.Balance
	}
	return ""
}

func (m *ValidateAccountStateResponse) GetResponse() isValidateAccountStateResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *ValidateAccountStateResponse) GetEthereum() *EthereumAccountStateResponse {
	if x, ok := x.GetResponse().(*ValidateAccountStateResponse_Ethereum); ok {
		return x.Ethereum
	}
	return nil
}

type isValidateAccountStateResponse_Response interface {
	isValidateAccountStateResponse_Response()
}

type ValidateAccountStateResponse_Ethereum struct {
	Ethereum *EthereumAccountStateResponse `protobuf:"bytes,100,opt,name=ethereum,proto3,oneof"`
}

func (*ValidateAccountStateResponse_Ethereum) isValidateAccountStateResponse_Response() {}

type ValidateRosettaBlockRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NativeBlock *NativeBlock `protobuf:"bytes,1,opt,name=native_block,json=nativeBlock,proto3" json:"native_block,omitempty"`
}

func (x *ValidateRosettaBlockRequest) Reset() {
	*x = ValidateRosettaBlockRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidateRosettaBlockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateRosettaBlockRequest) ProtoMessage() {}

func (x *ValidateRosettaBlockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateRosettaBlockRequest.ProtoReflect.Descriptor instead.
func (*ValidateRosettaBlockRequest) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_proto_rawDescGZIP(), []int{11}
}

func (x *ValidateRosettaBlockRequest) GetNativeBlock() *NativeBlock {
	if x != nil {
		return x.NativeBlock
	}
	return nil
}

var File_coinbase_chainstorage_blockchain_proto protoreflect.FileDescriptor

var file_coinbase_chainstorage_blockchain_proto_rawDesc = []byte{
	0x0a, 0x26, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x15, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1f, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x63, 0x33, 0x2f, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x29, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x6f, 0x2f, 0x72, 0x6f, 0x73, 0x65, 0x74, 0x74, 0x61, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2f, 0x63, 0x6f,
	0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2f, 0x72, 0x6f,
	0x73, 0x65, 0x74, 0x74, 0x61, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x63,
	0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f,
	0x62, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2c, 0x63,
	0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f,
	0x61, 0x70, 0x74, 0x6f, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2d, 0x63, 0x6f, 0x69,
	0x6e, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x73, 0x6f,
	0x6c, 0x61, 0x6e, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x63, 0x6f, 0x69, 0x6e,
	0x62, 0x61, 0x73, 0x65, 0x2f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x72, 0x6f, 0x73,
	0x65, 0x74, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2f, 0x63, 0x6f, 0x69, 0x6e,
	0x62, 0x61, 0x73, 0x65, 0x2f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x65, 0x74, 0x68,
	0x65, 0x72, 0x65, 0x75, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xba, 0x05, 0x0a, 0x05,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x3e, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x69, 0x6e,
	0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x33, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x52, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x35, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x63, 0x33, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x40, 0x0a, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x5d,
	0x0a, 0x14, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63,
	0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x13, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x3f, 0x0a,
	0x0a, 0x73, 0x69, 0x64, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x69, 0x64, 0x65, 0x43, 0x68,
	0x61, 0x69, 0x6e, 0x52, 0x09, 0x73, 0x69, 0x64, 0x65, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x45,
	0x0a, 0x08, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75,
	0x6d, 0x42, 0x6c, 0x6f, 0x62, 0x64, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x08, 0x65, 0x74, 0x68,
	0x65, 0x72, 0x65, 0x75, 0x6d, 0x12, 0x42, 0x0a, 0x07, 0x62, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e,
	0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x42,
	0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x42, 0x6c, 0x6f, 0x62, 0x64, 0x61, 0x74, 0x61, 0x48, 0x00,
	0x52, 0x07, 0x62, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x12, 0x42, 0x0a, 0x07, 0x72, 0x6f, 0x73,
	0x65, 0x74, 0x74, 0x61, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x69,
	0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x2e, 0x52, 0x6f, 0x73, 0x65, 0x74, 0x74, 0x61, 0x42, 0x6c, 0x6f, 0x62, 0x64, 0x61,
	0x74, 0x61, 0x48, 0x00, 0x52, 0x07, 0x72, 0x6f, 0x73, 0x65, 0x74, 0x74, 0x61, 0x12, 0x3f, 0x0a,
	0x06, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x18, 0x67, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x42, 0x6c, 0x6f, 0x62,
	0x64, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x06, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x12, 0x3c,
	0x0a, 0x05, 0x61, 0x70, 0x74, 0x6f, 0x73, 0x18, 0x68, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x41, 0x70, 0x74, 0x6f, 0x73, 0x42, 0x6c, 0x6f, 0x62, 0x64,
	0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x05, 0x61, 0x70, 0x74, 0x6f, 0x73, 0x42, 0x0a, 0x0a, 0x08,
	0x62, 0x6c, 0x6f, 0x62, 0x64, 0x61, 0x74, 0x61, 0x22, 0xa3, 0x01, 0x0a, 0x0f, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04,
	0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68,
	0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x6b,
	0x69, 0x70, 0x70, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x6b, 0x69,
	0x70, 0x70, 0x65, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x8f,
	0x02, 0x0a, 0x0d, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x74,
	0x61, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12,
	0x26, 0x0a, 0x0f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x6d, 0x61,
	0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x4b, 0x65, 0x79, 0x4d, 0x61, 0x69, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73,
	0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x22, 0x39, 0x0a, 0x13, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x4a, 0x0a, 0x0c, 0x52,
	0x6f, 0x73, 0x65, 0x74, 0x74, 0x61, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x3a, 0x0a, 0x05, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x69,
	0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x72, 0x6f, 0x73,
	0x65, 0x74, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x52, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0xd6, 0x06, 0x0a, 0x0b, 0x4e, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x3e, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x63, 0x6f,
	0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x33, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x52, 0x0a, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x35, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x63, 0x33, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x10,
	0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x74, 0x61, 0x67,
	0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x68, 0x61, 0x73, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x68,
	0x61, 0x73, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x38, 0x0a,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x29, 0x0a, 0x10, 0x6e, 0x75, 0x6d, 0x5f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0f, 0x6e, 0x75, 0x6d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x6b, 0x69, 0x70, 0x70,
	0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x6b, 0x69, 0x70, 0x70, 0x65,
	0x64, 0x12, 0x3f, 0x0a, 0x0a, 0x73, 0x69, 0x64, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65,
	0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x69,
	0x64, 0x65, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x52, 0x09, 0x73, 0x69, 0x64, 0x65, 0x43, 0x68, 0x61,
	0x69, 0x6e, 0x12, 0x42, 0x0a, 0x08, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x18, 0x64,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x45, 0x74, 0x68,
	0x65, 0x72, 0x65, 0x75, 0x6d, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x08, 0x65, 0x74,
	0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x12, 0x3f, 0x0a, 0x07, 0x62, 0x69, 0x74, 0x63, 0x6f, 0x69,
	0x6e, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e,
	0x42, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x07,
	0x62, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x12, 0x40, 0x0a, 0x07, 0x72, 0x6f, 0x73, 0x65, 0x74,
	0x74, 0x61, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x72, 0x6f, 0x73, 0x65, 0x74,
	0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x00,
	0x52, 0x07, 0x72, 0x6f, 0x73, 0x65, 0x74, 0x74, 0x61, 0x12, 0x3c, 0x0a, 0x06, 0x73, 0x6f, 0x6c,
	0x61, 0x6e, 0x61, 0x18, 0x67, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x69, 0x6e,
	0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x00, 0x52,
	0x06, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x12, 0x39, 0x0a, 0x05, 0x61, 0x70, 0x74, 0x6f, 0x73,
	0x18, 0x68, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x41,
	0x70, 0x74, 0x6f, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x05, 0x61, 0x70, 0x74,
	0x6f, 0x73, 0x12, 0x43, 0x0a, 0x09, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x5f, 0x76, 0x32, 0x18,
	0x69, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65,
	0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x6f,
	0x6c, 0x61, 0x6e, 0x61, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x56, 0x32, 0x48, 0x00, 0x52, 0x08, 0x73,
	0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x56, 0x32, 0x42, 0x07, 0x0a, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x22, 0xbb, 0x05, 0x0a, 0x11, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x69,
	0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x33, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x52, 0x0a, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x35, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x63, 0x33, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x10, 0x0a,
	0x03, 0x74, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12,
	0x29, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x68,
	0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x43, 0x0a, 0x0f,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x48, 0x0a, 0x08, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x18, 0x64, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x45, 0x74, 0x68, 0x65,
	0x72, 0x65, 0x75, 0x6d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x00, 0x52, 0x08, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x12, 0x45, 0x0a, 0x07, 0x62,
	0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63,
	0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x42, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x07, 0x62, 0x69, 0x74, 0x63, 0x6f,
	0x69, 0x6e, 0x12, 0x46, 0x0a, 0x07, 0x72, 0x6f, 0x73, 0x65, 0x74, 0x74, 0x61, 0x18, 0x66, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x72, 0x6f, 0x73, 0x65, 0x74, 0x74, 0x61, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x00, 0x52, 0x07, 0x72, 0x6f, 0x73, 0x65, 0x74, 0x74, 0x61, 0x12, 0x42, 0x0a, 0x06, 0x73, 0x6f,
	0x6c, 0x61, 0x6e, 0x61, 0x18, 0x67, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x69,
	0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x06, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x12, 0x3f,
	0x0a, 0x05, 0x61, 0x70, 0x74, 0x6f, 0x73, 0x18, 0x68, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x41, 0x70, 0x74, 0x6f, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x05, 0x61, 0x70, 0x74, 0x6f, 0x73, 0x42,
	0x0d, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x75,
	0x0a, 0x17, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x6f,
	0x66, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x08, 0x65, 0x74, 0x68,
	0x65, 0x72, 0x65, 0x75, 0x6d, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x6f,
	0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x48, 0x00, 0x52,
	0x08, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x8c, 0x02, 0x0a, 0x1b, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5e, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x72, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x63, 0x6f, 0x69,
	0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x47, 0x65, 0x74, 0x56, 0x65,
	0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x38, 0x0a, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x4e, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x12,
	0x53, 0x0a, 0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x6f, 0x66,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x47,
	0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50,
	0x72, 0x6f, 0x6f, 0x66, 0x22, 0xd8, 0x01, 0x0a, 0x26, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x47, 0x65, 0x74, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x68,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x68, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x47, 0x0a, 0x08, 0x65, 0x74, 0x68, 0x65, 0x72,
	0x65, 0x75, 0x6d, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6f, 0x69, 0x6e,
	0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x45, 0x78, 0x74, 0x72, 0x61, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x48, 0x00, 0x52, 0x08, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d,
	0x42, 0x0d, 0x0a, 0x0b, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x22,
	0x97, 0x01, 0x0a, 0x1c, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x51, 0x0a, 0x08, 0x65, 0x74,
	0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x63,
	0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x48, 0x00, 0x52, 0x08, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x42, 0x0a, 0x0a,
	0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x64, 0x0a, 0x1b, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x73, 0x65, 0x74, 0x74, 0x61, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x45, 0x0a, 0x0c, 0x6e, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x52, 0x0b, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2a,
	0x6d, 0x0a, 0x09, 0x53, 0x69, 0x64, 0x65, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x12, 0x0a, 0x0e,
	0x53, 0x49, 0x44, 0x45, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00,
	0x12, 0x25, 0x0a, 0x21, 0x53, 0x49, 0x44, 0x45, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x5f, 0x45, 0x54,
	0x48, 0x45, 0x52, 0x45, 0x55, 0x4d, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x4e, 0x45, 0x54, 0x5f, 0x42,
	0x45, 0x41, 0x43, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x25, 0x0a, 0x21, 0x53, 0x49, 0x44, 0x45, 0x43,
	0x48, 0x41, 0x49, 0x4e, 0x5f, 0x45, 0x54, 0x48, 0x45, 0x52, 0x45, 0x55, 0x4d, 0x5f, 0x48, 0x4f,
	0x4c, 0x45, 0x53, 0x4b, 0x59, 0x5f, 0x42, 0x45, 0x41, 0x43, 0x4f, 0x4e, 0x10, 0x02, 0x42, 0x3f,
	0x5a, 0x3d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x69,
	0x6e, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61,
	0x73, 0x65, 0x2f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_coinbase_chainstorage_blockchain_proto_rawDescOnce sync.Once
	file_coinbase_chainstorage_blockchain_proto_rawDescData = file_coinbase_chainstorage_blockchain_proto_rawDesc
)

func file_coinbase_chainstorage_blockchain_proto_rawDescGZIP() []byte {
	file_coinbase_chainstorage_blockchain_proto_rawDescOnce.Do(func() {
		file_coinbase_chainstorage_blockchain_proto_rawDescData = protoimpl.X.CompressGZIP(file_coinbase_chainstorage_blockchain_proto_rawDescData)
	})
	return file_coinbase_chainstorage_blockchain_proto_rawDescData
}

var file_coinbase_chainstorage_blockchain_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_coinbase_chainstorage_blockchain_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_coinbase_chainstorage_blockchain_proto_goTypes = []interface{}{
	(SideChain)(0),                                 // 0: coinbase.chainstorage.SideChain
	(*Block)(nil),                                  // 1: coinbase.chainstorage.Block
	(*BlockIdentifier)(nil),                        // 2: coinbase.chainstorage.BlockIdentifier
	(*BlockMetadata)(nil),                          // 3: coinbase.chainstorage.BlockMetadata
	(*TransactionMetadata)(nil),                    // 4: coinbase.chainstorage.TransactionMetadata
	(*RosettaBlock)(nil),                           // 5: coinbase.chainstorage.RosettaBlock
	(*NativeBlock)(nil),                            // 6: coinbase.chainstorage.NativeBlock
	(*NativeTransaction)(nil),                      // 7: coinbase.chainstorage.NativeTransaction
	(*GetAccountProofResponse)(nil),                // 8: coinbase.chainstorage.GetAccountProofResponse
	(*ValidateAccountStateRequest)(nil),            // 9: coinbase.chainstorage.ValidateAccountStateRequest
	(*InternalGetVerifiedAccountStateRequest)(nil), // 10: coinbase.chainstorage.InternalGetVerifiedAccountStateRequest
	(*ValidateAccountStateResponse)(nil),           // 11: coinbase.chainstorage.ValidateAccountStateResponse
	(*ValidateRosettaBlockRequest)(nil),            // 12: coinbase.chainstorage.ValidateRosettaBlockRequest
	(common.Blockchain)(0),                         // 13: coinbase.c3.common.Blockchain
	(common.Network)(0),                            // 14: coinbase.c3.common.Network
	(*EthereumBlobdata)(nil),                       // 15: coinbase.chainstorage.EthereumBlobdata
	(*BitcoinBlobdata)(nil),                        // 16: coinbase.chainstorage.BitcoinBlobdata
	(*RosettaBlobdata)(nil),                        // 17: coinbase.chainstorage.RosettaBlobdata
	(*SolanaBlobdata)(nil),                         // 18: coinbase.chainstorage.SolanaBlobdata
	(*AptosBlobdata)(nil),                          // 19: coinbase.chainstorage.AptosBlobdata
	(*timestamppb.Timestamp)(nil),                  // 20: google.protobuf.Timestamp
	(*types.Block)(nil),                            // 21: coinbase.crypto.rosetta.types.Block
	(*EthereumBlock)(nil),                          // 22: coinbase.chainstorage.EthereumBlock
	(*BitcoinBlock)(nil),                           // 23: coinbase.chainstorage.BitcoinBlock
	(*SolanaBlock)(nil),                            // 24: coinbase.chainstorage.SolanaBlock
	(*AptosBlock)(nil),                             // 25: coinbase.chainstorage.AptosBlock
	(*SolanaBlockV2)(nil),                          // 26: coinbase.chainstorage.SolanaBlockV2
	(*EthereumTransaction)(nil),                    // 27: coinbase.chainstorage.EthereumTransaction
	(*BitcoinTransaction)(nil),                     // 28: coinbase.chainstorage.BitcoinTransaction
	(*types.Transaction)(nil),                      // 29: coinbase.crypto.rosetta.types.Transaction
	(*SolanaTransaction)(nil),                      // 30: coinbase.chainstorage.SolanaTransaction
	(*AptosTransaction)(nil),                       // 31: coinbase.chainstorage.AptosTransaction
	(*EthereumAccountStateProof)(nil),              // 32: coinbase.chainstorage.EthereumAccountStateProof
	(*EthereumExtraInput)(nil),                     // 33: coinbase.chainstorage.EthereumExtraInput
	(*EthereumAccountStateResponse)(nil),           // 34: coinbase.chainstorage.EthereumAccountStateResponse
}
var file_coinbase_chainstorage_blockchain_proto_depIdxs = []int32{
	13, // 0: coinbase.chainstorage.Block.blockchain:type_name -> coinbase.c3.common.Blockchain
	14, // 1: coinbase.chainstorage.Block.network:type_name -> coinbase.c3.common.Network
	3,  // 2: coinbase.chainstorage.Block.metadata:type_name -> coinbase.chainstorage.BlockMetadata
	4,  // 3: coinbase.chainstorage.Block.transaction_metadata:type_name -> coinbase.chainstorage.TransactionMetadata
	0,  // 4: coinbase.chainstorage.Block.side_chain:type_name -> coinbase.chainstorage.SideChain
	15, // 5: coinbase.chainstorage.Block.ethereum:type_name -> coinbase.chainstorage.EthereumBlobdata
	16, // 6: coinbase.chainstorage.Block.bitcoin:type_name -> coinbase.chainstorage.BitcoinBlobdata
	17, // 7: coinbase.chainstorage.Block.rosetta:type_name -> coinbase.chainstorage.RosettaBlobdata
	18, // 8: coinbase.chainstorage.Block.solana:type_name -> coinbase.chainstorage.SolanaBlobdata
	19, // 9: coinbase.chainstorage.Block.aptos:type_name -> coinbase.chainstorage.AptosBlobdata
	20, // 10: coinbase.chainstorage.BlockIdentifier.timestamp:type_name -> google.protobuf.Timestamp
	20, // 11: coinbase.chainstorage.BlockMetadata.timestamp:type_name -> google.protobuf.Timestamp
	21, // 12: coinbase.chainstorage.RosettaBlock.block:type_name -> coinbase.crypto.rosetta.types.Block
	13, // 13: coinbase.chainstorage.NativeBlock.blockchain:type_name -> coinbase.c3.common.Blockchain
	14, // 14: coinbase.chainstorage.NativeBlock.network:type_name -> coinbase.c3.common.Network
	20, // 15: coinbase.chainstorage.NativeBlock.timestamp:type_name -> google.protobuf.Timestamp
	0,  // 16: coinbase.chainstorage.NativeBlock.side_chain:type_name -> coinbase.chainstorage.SideChain
	22, // 17: coinbase.chainstorage.NativeBlock.ethereum:type_name -> coinbase.chainstorage.EthereumBlock
	23, // 18: coinbase.chainstorage.NativeBlock.bitcoin:type_name -> coinbase.chainstorage.BitcoinBlock
	21, // 19: coinbase.chainstorage.NativeBlock.rosetta:type_name -> coinbase.crypto.rosetta.types.Block
	24, // 20: coinbase.chainstorage.NativeBlock.solana:type_name -> coinbase.chainstorage.SolanaBlock
	25, // 21: coinbase.chainstorage.NativeBlock.aptos:type_name -> coinbase.chainstorage.AptosBlock
	26, // 22: coinbase.chainstorage.NativeBlock.solana_v2:type_name -> coinbase.chainstorage.SolanaBlockV2
	13, // 23: coinbase.chainstorage.NativeTransaction.blockchain:type_name -> coinbase.c3.common.Blockchain
	14, // 24: coinbase.chainstorage.NativeTransaction.network:type_name -> coinbase.c3.common.Network
	20, // 25: coinbase.chainstorage.NativeTransaction.block_timestamp:type_name -> google.protobuf.Timestamp
	27, // 26: coinbase.chainstorage.NativeTransaction.ethereum:type_name -> coinbase.chainstorage.EthereumTransaction
	28, // 27: coinbase.chainstorage.NativeTransaction.bitcoin:type_name -> coinbase.chainstorage.BitcoinTransaction
	29, // 28: coinbase.chainstorage.NativeTransaction.rosetta:type_name -> coinbase.crypto.rosetta.types.Transaction
	30, // 29: coinbase.chainstorage.NativeTransaction.solana:type_name -> coinbase.chainstorage.SolanaTransaction
	31, // 30: coinbase.chainstorage.NativeTransaction.aptos:type_name -> coinbase.chainstorage.AptosTransaction
	32, // 31: coinbase.chainstorage.GetAccountProofResponse.ethereum:type_name -> coinbase.chainstorage.EthereumAccountStateProof
	10, // 32: coinbase.chainstorage.ValidateAccountStateRequest.account_req:type_name -> coinbase.chainstorage.InternalGetVerifiedAccountStateRequest
	6,  // 33: coinbase.chainstorage.ValidateAccountStateRequest.block:type_name -> coinbase.chainstorage.NativeBlock
	8,  // 34: coinbase.chainstorage.ValidateAccountStateRequest.account_proof:type_name -> coinbase.chainstorage.GetAccountProofResponse
	33, // 35: coinbase.chainstorage.InternalGetVerifiedAccountStateRequest.ethereum:type_name -> coinbase.chainstorage.EthereumExtraInput
	34, // 36: coinbase.chainstorage.ValidateAccountStateResponse.ethereum:type_name -> coinbase.chainstorage.EthereumAccountStateResponse
	6,  // 37: coinbase.chainstorage.ValidateRosettaBlockRequest.native_block:type_name -> coinbase.chainstorage.NativeBlock
	38, // [38:38] is the sub-list for method output_type
	38, // [38:38] is the sub-list for method input_type
	38, // [38:38] is the sub-list for extension type_name
	38, // [38:38] is the sub-list for extension extendee
	0,  // [0:38] is the sub-list for field type_name
}

func init() { file_coinbase_chainstorage_blockchain_proto_init() }
func file_coinbase_chainstorage_blockchain_proto_init() {
	if File_coinbase_chainstorage_blockchain_proto != nil {
		return
	}
	file_coinbase_chainstorage_blockchain_bitcoin_proto_init()
	file_coinbase_chainstorage_blockchain_aptos_proto_init()
	file_coinbase_chainstorage_blockchain_solana_proto_init()
	file_coinbase_chainstorage_blockchain_rosetta_proto_init()
	file_coinbase_chainstorage_blockchain_ethereum_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_coinbase_chainstorage_blockchain_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Block); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockIdentifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RosettaBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NativeBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NativeTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAccountProofResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidateAccountStateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InternalGetVerifiedAccountStateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidateAccountStateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidateRosettaBlockRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_coinbase_chainstorage_blockchain_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*Block_Ethereum)(nil),
		(*Block_Bitcoin)(nil),
		(*Block_Rosetta)(nil),
		(*Block_Solana)(nil),
		(*Block_Aptos)(nil),
	}
	file_coinbase_chainstorage_blockchain_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*NativeBlock_Ethereum)(nil),
		(*NativeBlock_Bitcoin)(nil),
		(*NativeBlock_Rosetta)(nil),
		(*NativeBlock_Solana)(nil),
		(*NativeBlock_Aptos)(nil),
		(*NativeBlock_SolanaV2)(nil),
	}
	file_coinbase_chainstorage_blockchain_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*NativeTransaction_Ethereum)(nil),
		(*NativeTransaction_Bitcoin)(nil),
		(*NativeTransaction_Rosetta)(nil),
		(*NativeTransaction_Solana)(nil),
		(*NativeTransaction_Aptos)(nil),
	}
	file_coinbase_chainstorage_blockchain_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*GetAccountProofResponse_Ethereum)(nil),
	}
	file_coinbase_chainstorage_blockchain_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*InternalGetVerifiedAccountStateRequest_Ethereum)(nil),
	}
	file_coinbase_chainstorage_blockchain_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*ValidateAccountStateResponse_Ethereum)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_coinbase_chainstorage_blockchain_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_coinbase_chainstorage_blockchain_proto_goTypes,
		DependencyIndexes: file_coinbase_chainstorage_blockchain_proto_depIdxs,
		EnumInfos:         file_coinbase_chainstorage_blockchain_proto_enumTypes,
		MessageInfos:      file_coinbase_chainstorage_blockchain_proto_msgTypes,
	}.Build()
	File_coinbase_chainstorage_blockchain_proto = out.File
	file_coinbase_chainstorage_blockchain_proto_rawDesc = nil
	file_coinbase_chainstorage_blockchain_proto_goTypes = nil
	file_coinbase_chainstorage_blockchain_proto_depIdxs = nil
}
