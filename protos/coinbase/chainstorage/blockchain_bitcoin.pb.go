// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        v4.25.3
// source: coinbase/chainstorage/blockchain_bitcoin.proto

package chainstorage

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type BitcoinBlobdata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header            []byte           `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	InputTransactions []*RepeatedBytes `protobuf:"bytes,2,rep,name=input_transactions,json=inputTransactions,proto3" json:"input_transactions,omitempty"`
}

func (x *BitcoinBlobdata) Reset() {
	*x = BitcoinBlobdata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_bitcoin_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BitcoinBlobdata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BitcoinBlobdata) ProtoMessage() {}

func (x *BitcoinBlobdata) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_bitcoin_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BitcoinBlobdata.ProtoReflect.Descriptor instead.
func (*BitcoinBlobdata) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_bitcoin_proto_rawDescGZIP(), []int{0}
}

func (x *BitcoinBlobdata) GetHeader() []byte {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *BitcoinBlobdata) GetInputTransactions() []*RepeatedBytes {
	if x != nil {
		return x.InputTransactions
	}
	return nil
}

type RepeatedBytes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data [][]byte `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *RepeatedBytes) Reset() {
	*x = RepeatedBytes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_bitcoin_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepeatedBytes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepeatedBytes) ProtoMessage() {}

func (x *RepeatedBytes) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_bitcoin_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepeatedBytes.ProtoReflect.Descriptor instead.
func (*RepeatedBytes) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_bitcoin_proto_rawDescGZIP(), []int{1}
}

func (x *RepeatedBytes) GetData() [][]byte {
	if x != nil {
		return x.Data
	}
	return nil
}

// BitcoinHeader https://developer.bitcoin.org/reference/rpc/getblock.html
type BitcoinHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash string `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	// uint64 confirmations = 2; // confirmations is a transient state, so not exposing
	StrippedSize         uint64                 `protobuf:"varint,3,opt,name=stripped_size,json=strippedSize,proto3" json:"stripped_size,omitempty"`
	Size                 uint64                 `protobuf:"varint,4,opt,name=size,proto3" json:"size,omitempty"`
	Weight               uint64                 `protobuf:"varint,5,opt,name=weight,proto3" json:"weight,omitempty"`
	Height               uint64                 `protobuf:"varint,6,opt,name=height,proto3" json:"height,omitempty"`
	Version              uint64                 `protobuf:"varint,7,opt,name=version,proto3" json:"version,omitempty"`
	VersionHex           string                 `protobuf:"bytes,8,opt,name=version_hex,json=versionHex,proto3" json:"version_hex,omitempty"`
	MerkleRoot           string                 `protobuf:"bytes,9,opt,name=merkle_root,json=merkleRoot,proto3" json:"merkle_root,omitempty"`
	Time                 uint64                 `protobuf:"varint,10,opt,name=time,proto3" json:"time,omitempty"`
	MedianTime           uint64                 `protobuf:"varint,11,opt,name=median_time,json=medianTime,proto3" json:"median_time,omitempty"`
	Nonce                uint64                 `protobuf:"varint,12,opt,name=nonce,proto3" json:"nonce,omitempty"`
	Bits                 string                 `protobuf:"bytes,13,opt,name=bits,proto3" json:"bits,omitempty"`
	Difficulty           string                 `protobuf:"bytes,14,opt,name=difficulty,proto3" json:"difficulty,omitempty"`
	ChainWork            string                 `protobuf:"bytes,15,opt,name=chain_work,json=chainWork,proto3" json:"chain_work,omitempty"`
	NumberOfTransactions uint64                 `protobuf:"varint,16,opt,name=number_of_transactions,json=numberOfTransactions,proto3" json:"number_of_transactions,omitempty"`
	PreviousBlockHash    string                 `protobuf:"bytes,17,opt,name=previous_block_hash,json=previousBlockHash,proto3" json:"previous_block_hash,omitempty"`
	NextBlockHash        string                 `protobuf:"bytes,18,opt,name=next_block_hash,json=nextBlockHash,proto3" json:"next_block_hash,omitempty"`
	Timestamp            *timestamppb.Timestamp `protobuf:"bytes,19,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *BitcoinHeader) Reset() {
	*x = BitcoinHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_bitcoin_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BitcoinHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BitcoinHeader) ProtoMessage() {}

func (x *BitcoinHeader) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_bitcoin_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BitcoinHeader.ProtoReflect.Descriptor instead.
func (*BitcoinHeader) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_bitcoin_proto_rawDescGZIP(), []int{2}
}

func (x *BitcoinHeader) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *BitcoinHeader) GetStrippedSize() uint64 {
	if x != nil {
		return x.StrippedSize
	}
	return 0
}

func (x *BitcoinHeader) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *BitcoinHeader) GetWeight() uint64 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *BitcoinHeader) GetHeight() uint64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *BitcoinHeader) GetVersion() uint64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *BitcoinHeader) GetVersionHex() string {
	if x != nil {
		return x.VersionHex
	}
	return ""
}

func (x *BitcoinHeader) GetMerkleRoot() string {
	if x != nil {
		return x.MerkleRoot
	}
	return ""
}

func (x *BitcoinHeader) GetTime() uint64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *BitcoinHeader) GetMedianTime() uint64 {
	if x != nil {
		return x.MedianTime
	}
	return 0
}

func (x *BitcoinHeader) GetNonce() uint64 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

func (x *BitcoinHeader) GetBits() string {
	if x != nil {
		return x.Bits
	}
	return ""
}

func (x *BitcoinHeader) GetDifficulty() string {
	if x != nil {
		return x.Difficulty
	}
	return ""
}

func (x *BitcoinHeader) GetChainWork() string {
	if x != nil {
		return x.ChainWork
	}
	return ""
}

func (x *BitcoinHeader) GetNumberOfTransactions() uint64 {
	if x != nil {
		return x.NumberOfTransactions
	}
	return 0
}

func (x *BitcoinHeader) GetPreviousBlockHash() string {
	if x != nil {
		return x.PreviousBlockHash
	}
	return ""
}

func (x *BitcoinHeader) GetNextBlockHash() string {
	if x != nil {
		return x.NextBlockHash
	}
	return ""
}

func (x *BitcoinHeader) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

// BitcoinTransaction https://developer.bitcoin.org/reference/rpc/getrawtransaction.html
type BitcoinTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// bool in_active_chain = 1;
	Hex string `protobuf:"bytes,2,opt,name=hex,proto3" json:"hex,omitempty"`
	// transaction_id should be the identifier for a transaction.
	TransactionId string `protobuf:"bytes,3,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	// The transaction hash (differs from txid for witness transactions)
	Hash        string                      `protobuf:"bytes,4,opt,name=hash,proto3" json:"hash,omitempty"`
	Size        uint64                      `protobuf:"varint,5,opt,name=size,proto3" json:"size,omitempty"`
	VirtualSize uint64                      `protobuf:"varint,6,opt,name=virtual_size,json=virtualSize,proto3" json:"virtual_size,omitempty"`
	Weight      uint64                      `protobuf:"varint,7,opt,name=weight,proto3" json:"weight,omitempty"`
	Version     uint64                      `protobuf:"varint,8,opt,name=version,proto3" json:"version,omitempty"`
	LockTime    uint64                      `protobuf:"varint,9,opt,name=lock_time,json=lockTime,proto3" json:"lock_time,omitempty"`
	Inputs      []*BitcoinTransactionInput  `protobuf:"bytes,10,rep,name=inputs,proto3" json:"inputs,omitempty"`
	Outputs     []*BitcoinTransactionOutput `protobuf:"bytes,11,rep,name=outputs,proto3" json:"outputs,omitempty"`
	BlockHash   string                      `protobuf:"bytes,12,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	// uint64 confirmations = 13;
	BlockTime   uint64 `protobuf:"varint,14,opt,name=block_time,json=blockTime,proto3" json:"block_time,omitempty"`
	Time        uint64 `protobuf:"varint,15,opt,name=time,proto3" json:"time,omitempty"`
	IsCoinbase  bool   `protobuf:"varint,16,opt,name=is_coinbase,json=isCoinbase,proto3" json:"is_coinbase,omitempty"`
	Index       uint64 `protobuf:"varint,17,opt,name=index,proto3" json:"index,omitempty"`
	InputCount  uint64 `protobuf:"varint,18,opt,name=input_count,json=inputCount,proto3" json:"input_count,omitempty"`
	OutputCount uint64 `protobuf:"varint,19,opt,name=output_count,json=outputCount,proto3" json:"output_count,omitempty"`
	InputValue  uint64 `protobuf:"varint,20,opt,name=input_value,json=inputValue,proto3" json:"input_value,omitempty"`
	OutputValue uint64 `protobuf:"varint,21,opt,name=output_value,json=outputValue,proto3" json:"output_value,omitempty"`
	Fee         uint64 `protobuf:"varint,22,opt,name=fee,proto3" json:"fee,omitempty"`
}

func (x *BitcoinTransaction) Reset() {
	*x = BitcoinTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_bitcoin_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BitcoinTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BitcoinTransaction) ProtoMessage() {}

func (x *BitcoinTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_bitcoin_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BitcoinTransaction.ProtoReflect.Descriptor instead.
func (*BitcoinTransaction) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_bitcoin_proto_rawDescGZIP(), []int{3}
}

func (x *BitcoinTransaction) GetHex() string {
	if x != nil {
		return x.Hex
	}
	return ""
}

func (x *BitcoinTransaction) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

func (x *BitcoinTransaction) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *BitcoinTransaction) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *BitcoinTransaction) GetVirtualSize() uint64 {
	if x != nil {
		return x.VirtualSize
	}
	return 0
}

func (x *BitcoinTransaction) GetWeight() uint64 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *BitcoinTransaction) GetVersion() uint64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *BitcoinTransaction) GetLockTime() uint64 {
	if x != nil {
		return x.LockTime
	}
	return 0
}

func (x *BitcoinTransaction) GetInputs() []*BitcoinTransactionInput {
	if x != nil {
		return x.Inputs
	}
	return nil
}

func (x *BitcoinTransaction) GetOutputs() []*BitcoinTransactionOutput {
	if x != nil {
		return x.Outputs
	}
	return nil
}

func (x *BitcoinTransaction) GetBlockHash() string {
	if x != nil {
		return x.BlockHash
	}
	return ""
}

func (x *BitcoinTransaction) GetBlockTime() uint64 {
	if x != nil {
		return x.BlockTime
	}
	return 0
}

func (x *BitcoinTransaction) GetTime() uint64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *BitcoinTransaction) GetIsCoinbase() bool {
	if x != nil {
		return x.IsCoinbase
	}
	return false
}

func (x *BitcoinTransaction) GetIndex() uint64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *BitcoinTransaction) GetInputCount() uint64 {
	if x != nil {
		return x.InputCount
	}
	return 0
}

func (x *BitcoinTransaction) GetOutputCount() uint64 {
	if x != nil {
		return x.OutputCount
	}
	return 0
}

func (x *BitcoinTransaction) GetInputValue() uint64 {
	if x != nil {
		return x.InputValue
	}
	return 0
}

func (x *BitcoinTransaction) GetOutputValue() uint64 {
	if x != nil {
		return x.OutputValue
	}
	return 0
}

func (x *BitcoinTransaction) GetFee() uint64 {
	if x != nil {
		return x.Fee
	}
	return 0
}

type BitcoinTransactionInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Coinbase                  string                    `protobuf:"bytes,1,opt,name=coinbase,proto3" json:"coinbase,omitempty"`
	TransactionId             string                    `protobuf:"bytes,2,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	FromOutputIndex           uint64                    `protobuf:"varint,3,opt,name=from_output_index,json=fromOutputIndex,proto3" json:"from_output_index,omitempty"`
	ScriptSignature           *BitcoinScriptSignature   `protobuf:"bytes,4,opt,name=script_signature,json=scriptSignature,proto3" json:"script_signature,omitempty"`
	Sequence                  uint64                    `protobuf:"varint,5,opt,name=sequence,proto3" json:"sequence,omitempty"`
	TransactionInputWitnesses []string                  `protobuf:"bytes,6,rep,name=transaction_input_witnesses,json=transactionInputWitnesses,proto3" json:"transaction_input_witnesses,omitempty"`
	FromOutput                *BitcoinTransactionOutput `protobuf:"bytes,7,opt,name=from_output,json=fromOutput,proto3" json:"from_output,omitempty"`
	Index                     uint64                    `protobuf:"varint,8,opt,name=index,proto3" json:"index,omitempty"`
}

func (x *BitcoinTransactionInput) Reset() {
	*x = BitcoinTransactionInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_bitcoin_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BitcoinTransactionInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BitcoinTransactionInput) ProtoMessage() {}

func (x *BitcoinTransactionInput) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_bitcoin_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BitcoinTransactionInput.ProtoReflect.Descriptor instead.
func (*BitcoinTransactionInput) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_bitcoin_proto_rawDescGZIP(), []int{4}
}

func (x *BitcoinTransactionInput) GetCoinbase() string {
	if x != nil {
		return x.Coinbase
	}
	return ""
}

func (x *BitcoinTransactionInput) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

func (x *BitcoinTransactionInput) GetFromOutputIndex() uint64 {
	if x != nil {
		return x.FromOutputIndex
	}
	return 0
}

func (x *BitcoinTransactionInput) GetScriptSignature() *BitcoinScriptSignature {
	if x != nil {
		return x.ScriptSignature
	}
	return nil
}

func (x *BitcoinTransactionInput) GetSequence() uint64 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *BitcoinTransactionInput) GetTransactionInputWitnesses() []string {
	if x != nil {
		return x.TransactionInputWitnesses
	}
	return nil
}

func (x *BitcoinTransactionInput) GetFromOutput() *BitcoinTransactionOutput {
	if x != nil {
		return x.FromOutput
	}
	return nil
}

func (x *BitcoinTransactionInput) GetIndex() uint64 {
	if x != nil {
		return x.Index
	}
	return 0
}

type BitcoinScriptSignature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Assembly string `protobuf:"bytes,1,opt,name=assembly,proto3" json:"assembly,omitempty"`
	Hex      string `protobuf:"bytes,2,opt,name=hex,proto3" json:"hex,omitempty"`
}

func (x *BitcoinScriptSignature) Reset() {
	*x = BitcoinScriptSignature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_bitcoin_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BitcoinScriptSignature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BitcoinScriptSignature) ProtoMessage() {}

func (x *BitcoinScriptSignature) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_bitcoin_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BitcoinScriptSignature.ProtoReflect.Descriptor instead.
func (*BitcoinScriptSignature) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_bitcoin_proto_rawDescGZIP(), []int{5}
}

func (x *BitcoinScriptSignature) GetAssembly() string {
	if x != nil {
		return x.Assembly
	}
	return ""
}

func (x *BitcoinScriptSignature) GetHex() string {
	if x != nil {
		return x.Hex
	}
	return ""
}

type BitcoinTransactionOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// double value = 1;
	Index           uint64                  `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
	ScriptPublicKey *BitcoinScriptPublicKey `protobuf:"bytes,3,opt,name=script_public_key,json=scriptPublicKey,proto3" json:"script_public_key,omitempty"`
	Value           uint64                  `protobuf:"varint,4,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *BitcoinTransactionOutput) Reset() {
	*x = BitcoinTransactionOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_bitcoin_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BitcoinTransactionOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BitcoinTransactionOutput) ProtoMessage() {}

func (x *BitcoinTransactionOutput) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_bitcoin_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BitcoinTransactionOutput.ProtoReflect.Descriptor instead.
func (*BitcoinTransactionOutput) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_bitcoin_proto_rawDescGZIP(), []int{6}
}

func (x *BitcoinTransactionOutput) GetIndex() uint64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *BitcoinTransactionOutput) GetScriptPublicKey() *BitcoinScriptPublicKey {
	if x != nil {
		return x.ScriptPublicKey
	}
	return nil
}

func (x *BitcoinTransactionOutput) GetValue() uint64 {
	if x != nil {
		return x.Value
	}
	return 0
}

type BitcoinScriptPublicKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Assembly string `protobuf:"bytes,1,opt,name=assembly,proto3" json:"assembly,omitempty"`
	Hex      string `protobuf:"bytes,2,opt,name=hex,proto3" json:"hex,omitempty"`
	// uint64 required_signatures = 3; // deprecated: https://github.com/bitcoin/bitcoin/pull/20286
	Type string `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	// repeated string addresses = 5; // deprecated: https://github.com/bitcoin/bitcoin/pull/20286
	Address string `protobuf:"bytes,6,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *BitcoinScriptPublicKey) Reset() {
	*x = BitcoinScriptPublicKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_bitcoin_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BitcoinScriptPublicKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BitcoinScriptPublicKey) ProtoMessage() {}

func (x *BitcoinScriptPublicKey) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_bitcoin_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BitcoinScriptPublicKey.ProtoReflect.Descriptor instead.
func (*BitcoinScriptPublicKey) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_bitcoin_proto_rawDescGZIP(), []int{7}
}

func (x *BitcoinScriptPublicKey) GetAssembly() string {
	if x != nil {
		return x.Assembly
	}
	return ""
}

func (x *BitcoinScriptPublicKey) GetHex() string {
	if x != nil {
		return x.Hex
	}
	return ""
}

func (x *BitcoinScriptPublicKey) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *BitcoinScriptPublicKey) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type BitcoinBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header       *BitcoinHeader        `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Transactions []*BitcoinTransaction `protobuf:"bytes,2,rep,name=transactions,proto3" json:"transactions,omitempty"`
}

func (x *BitcoinBlock) Reset() {
	*x = BitcoinBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_bitcoin_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BitcoinBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BitcoinBlock) ProtoMessage() {}

func (x *BitcoinBlock) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_bitcoin_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BitcoinBlock.ProtoReflect.Descriptor instead.
func (*BitcoinBlock) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_bitcoin_proto_rawDescGZIP(), []int{8}
}

func (x *BitcoinBlock) GetHeader() *BitcoinHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *BitcoinBlock) GetTransactions() []*BitcoinTransaction {
	if x != nil {
		return x.Transactions
	}
	return nil
}

var File_coinbase_chainstorage_blockchain_bitcoin_proto protoreflect.FileDescriptor

var file_coinbase_chainstorage_blockchain_bitcoin_proto_rawDesc = []byte{
	0x0a, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x5f, 0x62, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x15, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x7e, 0x0a, 0x0f, 0x42, 0x69, 0x74, 0x63,
	0x6f, 0x69, 0x6e, 0x42, 0x6c, 0x6f, 0x62, 0x64, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x12, 0x53, 0x0a, 0x12, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x52, 0x11, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x23, 0x0a, 0x0d, 0x52, 0x65, 0x70, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xce, 0x04,
	0x0a, 0x0d, 0x42, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12,
	0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68,
	0x61, 0x73, 0x68, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x72, 0x69, 0x70, 0x70, 0x65, 0x64, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x73, 0x74, 0x72, 0x69,
	0x70, 0x70, 0x65, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x77, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x68, 0x65, 0x78, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x48, 0x65, 0x78, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x72, 0x6b, 0x6c,
	0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65,
	0x72, 0x6b, 0x6c, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0a, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6e, 0x6f,
	0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x69, 0x74, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x62, 0x69, 0x74, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x69, 0x66, 0x66, 0x69,
	0x63, 0x75, 0x6c, 0x74, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x69, 0x66,
	0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x12, 0x34, 0x0a, 0x16, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x5f, 0x6f, 0x66, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2e, 0x0a, 0x13,
	0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68,
	0x61, 0x73, 0x68, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x70, 0x72, 0x65, 0x76, 0x69,
	0x6f, 0x75, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x26, 0x0a, 0x0f,
	0x6e, 0x65, 0x78, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x48, 0x61, 0x73, 0x68, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x9d,
	0x05, 0x0a, 0x12, 0x42, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x68, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x68, 0x65, 0x78, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61,
	0x73, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61,
	0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x76, 0x69,
	0x72, 0x74, 0x75, 0x61, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x6c,
	0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08,
	0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x46, 0x0a, 0x06, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2e, 0x42, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73,
	0x12, 0x49, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x42, 0x69, 0x74, 0x63, 0x6f, 0x69,
	0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x43, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x11, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0b, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x66, 0x65, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x66, 0x65, 0x65, 0x22, 0xa6,
	0x03, 0x0a, 0x17, 0x42, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f,
	0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f,
	0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2a, 0x0a,
	0x11, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x66, 0x72, 0x6f, 0x6d, 0x4f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x58, 0x0a, 0x10, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x42, 0x69, 0x74, 0x63,
	0x6f, 0x69, 0x6e, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x52, 0x0f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12,
	0x3e, 0x0a, 0x1b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x5f, 0x77, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x19, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x57, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12,
	0x50, 0x0a, 0x0b, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x42, 0x69, 0x74,
	0x63, 0x6f, 0x69, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x4f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x46, 0x0a, 0x16, 0x42, 0x69, 0x74, 0x63, 0x6f,
	0x69, 0x6e, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x68, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x68, 0x65, 0x78, 0x22,
	0xa1, 0x01, 0x0a, 0x18, 0x42, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x59, 0x0a, 0x11, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e,
	0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x42, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x53, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x52, 0x0f, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x74, 0x0a, 0x16, 0x42, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x53, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x1a, 0x0a,
	0x08, 0x61, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x61, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x68, 0x65, 0x78,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x68, 0x65, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x9b, 0x01, 0x0a, 0x0c, 0x42, 0x69,
	0x74, 0x63, 0x6f, 0x69, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x3c, 0x0a, 0x06, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x69,
	0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x2e, 0x42, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x4d, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x42, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x3f, 0x5a, 0x3d, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_coinbase_chainstorage_blockchain_bitcoin_proto_rawDescOnce sync.Once
	file_coinbase_chainstorage_blockchain_bitcoin_proto_rawDescData = file_coinbase_chainstorage_blockchain_bitcoin_proto_rawDesc
)

func file_coinbase_chainstorage_blockchain_bitcoin_proto_rawDescGZIP() []byte {
	file_coinbase_chainstorage_blockchain_bitcoin_proto_rawDescOnce.Do(func() {
		file_coinbase_chainstorage_blockchain_bitcoin_proto_rawDescData = protoimpl.X.CompressGZIP(file_coinbase_chainstorage_blockchain_bitcoin_proto_rawDescData)
	})
	return file_coinbase_chainstorage_blockchain_bitcoin_proto_rawDescData
}

var file_coinbase_chainstorage_blockchain_bitcoin_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_coinbase_chainstorage_blockchain_bitcoin_proto_goTypes = []interface{}{
	(*BitcoinBlobdata)(nil),          // 0: coinbase.chainstorage.BitcoinBlobdata
	(*RepeatedBytes)(nil),            // 1: coinbase.chainstorage.RepeatedBytes
	(*BitcoinHeader)(nil),            // 2: coinbase.chainstorage.BitcoinHeader
	(*BitcoinTransaction)(nil),       // 3: coinbase.chainstorage.BitcoinTransaction
	(*BitcoinTransactionInput)(nil),  // 4: coinbase.chainstorage.BitcoinTransactionInput
	(*BitcoinScriptSignature)(nil),   // 5: coinbase.chainstorage.BitcoinScriptSignature
	(*BitcoinTransactionOutput)(nil), // 6: coinbase.chainstorage.BitcoinTransactionOutput
	(*BitcoinScriptPublicKey)(nil),   // 7: coinbase.chainstorage.BitcoinScriptPublicKey
	(*BitcoinBlock)(nil),             // 8: coinbase.chainstorage.BitcoinBlock
	(*timestamppb.Timestamp)(nil),    // 9: google.protobuf.Timestamp
}
var file_coinbase_chainstorage_blockchain_bitcoin_proto_depIdxs = []int32{
	1, // 0: coinbase.chainstorage.BitcoinBlobdata.input_transactions:type_name -> coinbase.chainstorage.RepeatedBytes
	9, // 1: coinbase.chainstorage.BitcoinHeader.timestamp:type_name -> google.protobuf.Timestamp
	4, // 2: coinbase.chainstorage.BitcoinTransaction.inputs:type_name -> coinbase.chainstorage.BitcoinTransactionInput
	6, // 3: coinbase.chainstorage.BitcoinTransaction.outputs:type_name -> coinbase.chainstorage.BitcoinTransactionOutput
	5, // 4: coinbase.chainstorage.BitcoinTransactionInput.script_signature:type_name -> coinbase.chainstorage.BitcoinScriptSignature
	6, // 5: coinbase.chainstorage.BitcoinTransactionInput.from_output:type_name -> coinbase.chainstorage.BitcoinTransactionOutput
	7, // 6: coinbase.chainstorage.BitcoinTransactionOutput.script_public_key:type_name -> coinbase.chainstorage.BitcoinScriptPublicKey
	2, // 7: coinbase.chainstorage.BitcoinBlock.header:type_name -> coinbase.chainstorage.BitcoinHeader
	3, // 8: coinbase.chainstorage.BitcoinBlock.transactions:type_name -> coinbase.chainstorage.BitcoinTransaction
	9, // [9:9] is the sub-list for method output_type
	9, // [9:9] is the sub-list for method input_type
	9, // [9:9] is the sub-list for extension type_name
	9, // [9:9] is the sub-list for extension extendee
	0, // [0:9] is the sub-list for field type_name
}

func init() { file_coinbase_chainstorage_blockchain_bitcoin_proto_init() }
func file_coinbase_chainstorage_blockchain_bitcoin_proto_init() {
	if File_coinbase_chainstorage_blockchain_bitcoin_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_coinbase_chainstorage_blockchain_bitcoin_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BitcoinBlobdata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_bitcoin_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepeatedBytes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_bitcoin_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BitcoinHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_bitcoin_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BitcoinTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_bitcoin_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BitcoinTransactionInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_bitcoin_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BitcoinScriptSignature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_bitcoin_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BitcoinTransactionOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_bitcoin_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BitcoinScriptPublicKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_bitcoin_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BitcoinBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_coinbase_chainstorage_blockchain_bitcoin_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_coinbase_chainstorage_blockchain_bitcoin_proto_goTypes,
		DependencyIndexes: file_coinbase_chainstorage_blockchain_bitcoin_proto_depIdxs,
		MessageInfos:      file_coinbase_chainstorage_blockchain_bitcoin_proto_msgTypes,
	}.Build()
	File_coinbase_chainstorage_blockchain_bitcoin_proto = out.File
	file_coinbase_chainstorage_blockchain_bitcoin_proto_rawDesc = nil
	file_coinbase_chainstorage_blockchain_bitcoin_proto_goTypes = nil
	file_coinbase_chainstorage_blockchain_bitcoin_proto_depIdxs = nil
}
