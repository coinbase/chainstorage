// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        v4.25.3
// source: coinbase/chainstorage/blockchain_ethereum.proto

package chainstorage

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EthereumBlobdata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header              []byte   `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	TransactionReceipts [][]byte `protobuf:"bytes,2,rep,name=transaction_receipts,json=transactionReceipts,proto3" json:"transaction_receipts,omitempty"`
	TransactionTraces   [][]byte `protobuf:"bytes,3,rep,name=transaction_traces,json=transactionTraces,proto3" json:"transaction_traces,omitempty"`
	Uncles              [][]byte `protobuf:"bytes,4,rep,name=uncles,proto3" json:"uncles,omitempty"`
	// Types that are assignable to ExtraData:
	//
	//	*EthereumBlobdata_Polygon
	ExtraData isEthereumBlobdata_ExtraData `protobuf_oneof:"extra_data"`
}

func (x *EthereumBlobdata) Reset() {
	*x = EthereumBlobdata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_ethereum_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EthereumBlobdata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EthereumBlobdata) ProtoMessage() {}

func (x *EthereumBlobdata) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_ethereum_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EthereumBlobdata.ProtoReflect.Descriptor instead.
func (*EthereumBlobdata) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_ethereum_proto_rawDescGZIP(), []int{0}
}

func (x *EthereumBlobdata) GetHeader() []byte {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *EthereumBlobdata) GetTransactionReceipts() [][]byte {
	if x != nil {
		return x.TransactionReceipts
	}
	return nil
}

func (x *EthereumBlobdata) GetTransactionTraces() [][]byte {
	if x != nil {
		return x.TransactionTraces
	}
	return nil
}

func (x *EthereumBlobdata) GetUncles() [][]byte {
	if x != nil {
		return x.Uncles
	}
	return nil
}

func (m *EthereumBlobdata) GetExtraData() isEthereumBlobdata_ExtraData {
	if m != nil {
		return m.ExtraData
	}
	return nil
}

func (x *EthereumBlobdata) GetPolygon() *PolygonExtraData {
	if x, ok := x.GetExtraData().(*EthereumBlobdata_Polygon); ok {
		return x.Polygon
	}
	return nil
}

type isEthereumBlobdata_ExtraData interface {
	isEthereumBlobdata_ExtraData()
}

type EthereumBlobdata_Polygon struct {
	Polygon *PolygonExtraData `protobuf:"bytes,100,opt,name=polygon,proto3,oneof"`
}

func (*EthereumBlobdata_Polygon) isEthereumBlobdata_ExtraData() {}

type PolygonExtraData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Author []byte `protobuf:"bytes,1,opt,name=author,proto3" json:"author,omitempty"`
}

func (x *PolygonExtraData) Reset() {
	*x = PolygonExtraData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_ethereum_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolygonExtraData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolygonExtraData) ProtoMessage() {}

func (x *PolygonExtraData) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_ethereum_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolygonExtraData.ProtoReflect.Descriptor instead.
func (*PolygonExtraData) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_ethereum_proto_rawDescGZIP(), []int{1}
}

func (x *PolygonExtraData) GetAuthor() []byte {
	if x != nil {
		return x.Author
	}
	return nil
}

type EthereumBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header       *EthereumHeader        `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Transactions []*EthereumTransaction `protobuf:"bytes,2,rep,name=transactions,proto3" json:"transactions,omitempty"`
	Uncles       []*EthereumHeader      `protobuf:"bytes,3,rep,name=uncles,proto3" json:"uncles,omitempty"`
}

func (x *EthereumBlock) Reset() {
	*x = EthereumBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_ethereum_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EthereumBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EthereumBlock) ProtoMessage() {}

func (x *EthereumBlock) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_ethereum_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EthereumBlock.ProtoReflect.Descriptor instead.
func (*EthereumBlock) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_ethereum_proto_rawDescGZIP(), []int{2}
}

func (x *EthereumBlock) GetHeader() *EthereumHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *EthereumBlock) GetTransactions() []*EthereumTransaction {
	if x != nil {
		return x.Transactions
	}
	return nil
}

func (x *EthereumBlock) GetUncles() []*EthereumHeader {
	if x != nil {
		return x.Uncles
	}
	return nil
}

type EthereumWithdrawal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index          uint64 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	ValidatorIndex uint64 `protobuf:"varint,2,opt,name=validator_index,json=validatorIndex,proto3" json:"validator_index,omitempty"`
	Address        string `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	Amount         uint64 `protobuf:"varint,4,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *EthereumWithdrawal) Reset() {
	*x = EthereumWithdrawal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_ethereum_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EthereumWithdrawal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EthereumWithdrawal) ProtoMessage() {}

func (x *EthereumWithdrawal) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_ethereum_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EthereumWithdrawal.ProtoReflect.Descriptor instead.
func (*EthereumWithdrawal) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_ethereum_proto_rawDescGZIP(), []int{3}
}

func (x *EthereumWithdrawal) GetIndex() uint64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *EthereumWithdrawal) GetValidatorIndex() uint64 {
	if x != nil {
		return x.ValidatorIndex
	}
	return 0
}

func (x *EthereumWithdrawal) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *EthereumWithdrawal) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

type EthereumHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash             string                 `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	ParentHash       string                 `protobuf:"bytes,2,opt,name=parent_hash,json=parentHash,proto3" json:"parent_hash,omitempty"`
	Number           uint64                 `protobuf:"varint,3,opt,name=number,proto3" json:"number,omitempty"`
	Timestamp        *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Transactions     []string               `protobuf:"bytes,5,rep,name=transactions,proto3" json:"transactions,omitempty"`
	Nonce            string                 `protobuf:"bytes,6,opt,name=nonce,proto3" json:"nonce,omitempty"`
	Sha3Uncles       string                 `protobuf:"bytes,7,opt,name=sha3_uncles,json=sha3Uncles,proto3" json:"sha3_uncles,omitempty"`
	LogsBloom        string                 `protobuf:"bytes,8,opt,name=logs_bloom,json=logsBloom,proto3" json:"logs_bloom,omitempty"`
	TransactionsRoot string                 `protobuf:"bytes,9,opt,name=transactions_root,json=transactionsRoot,proto3" json:"transactions_root,omitempty"`
	StateRoot        string                 `protobuf:"bytes,10,opt,name=state_root,json=stateRoot,proto3" json:"state_root,omitempty"`
	ReceiptsRoot     string                 `protobuf:"bytes,11,opt,name=receipts_root,json=receiptsRoot,proto3" json:"receipts_root,omitempty"`
	Miner            string                 `protobuf:"bytes,12,opt,name=miner,proto3" json:"miner,omitempty"`
	Difficulty       uint64                 `protobuf:"varint,13,opt,name=difficulty,proto3" json:"difficulty,omitempty"`
	TotalDifficulty  string                 `protobuf:"bytes,14,opt,name=total_difficulty,json=totalDifficulty,proto3" json:"total_difficulty,omitempty"`
	ExtraData        string                 `protobuf:"bytes,15,opt,name=extra_data,json=extraData,proto3" json:"extra_data,omitempty"`
	Size             uint64                 `protobuf:"varint,16,opt,name=size,proto3" json:"size,omitempty"`
	GasLimit         uint64                 `protobuf:"varint,17,opt,name=gas_limit,json=gasLimit,proto3" json:"gas_limit,omitempty"`
	GasUsed          uint64                 `protobuf:"varint,18,opt,name=gas_used,json=gasUsed,proto3" json:"gas_used,omitempty"`
	Uncles           []string               `protobuf:"bytes,19,rep,name=uncles,proto3" json:"uncles,omitempty"`
	// Types that are assignable to OptionalBaseFeePerGas:
	//
	//	*EthereumHeader_BaseFeePerGas
	OptionalBaseFeePerGas isEthereumHeader_OptionalBaseFeePerGas `protobuf_oneof:"optional_base_fee_per_gas"`
	MixHash               string                                 `protobuf:"bytes,21,opt,name=mix_hash,json=mixHash,proto3" json:"mix_hash,omitempty"`
	Withdrawals           []*EthereumWithdrawal                  `protobuf:"bytes,22,rep,name=withdrawals,proto3" json:"withdrawals,omitempty"`
	WithdrawalsRoot       string                                 `protobuf:"bytes,23,opt,name=withdrawals_root,json=withdrawalsRoot,proto3" json:"withdrawals_root,omitempty"`
	// Types that are assignable to OptionalPolygonAuthor:
	//
	//	*EthereumHeader_Author
	OptionalPolygonAuthor isEthereumHeader_OptionalPolygonAuthor `protobuf_oneof:"optional_polygon_author"`
}

func (x *EthereumHeader) Reset() {
	*x = EthereumHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_ethereum_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EthereumHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EthereumHeader) ProtoMessage() {}

func (x *EthereumHeader) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_ethereum_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EthereumHeader.ProtoReflect.Descriptor instead.
func (*EthereumHeader) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_ethereum_proto_rawDescGZIP(), []int{4}
}

func (x *EthereumHeader) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *EthereumHeader) GetParentHash() string {
	if x != nil {
		return x.ParentHash
	}
	return ""
}

func (x *EthereumHeader) GetNumber() uint64 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *EthereumHeader) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *EthereumHeader) GetTransactions() []string {
	if x != nil {
		return x.Transactions
	}
	return nil
}

func (x *EthereumHeader) GetNonce() string {
	if x != nil {
		return x.Nonce
	}
	return ""
}

func (x *EthereumHeader) GetSha3Uncles() string {
	if x != nil {
		return x.Sha3Uncles
	}
	return ""
}

func (x *EthereumHeader) GetLogsBloom() string {
	if x != nil {
		return x.LogsBloom
	}
	return ""
}

func (x *EthereumHeader) GetTransactionsRoot() string {
	if x != nil {
		return x.TransactionsRoot
	}
	return ""
}

func (x *EthereumHeader) GetStateRoot() string {
	if x != nil {
		return x.StateRoot
	}
	return ""
}

func (x *EthereumHeader) GetReceiptsRoot() string {
	if x != nil {
		return x.ReceiptsRoot
	}
	return ""
}

func (x *EthereumHeader) GetMiner() string {
	if x != nil {
		return x.Miner
	}
	return ""
}

func (x *EthereumHeader) GetDifficulty() uint64 {
	if x != nil {
		return x.Difficulty
	}
	return 0
}

func (x *EthereumHeader) GetTotalDifficulty() string {
	if x != nil {
		return x.TotalDifficulty
	}
	return ""
}

func (x *EthereumHeader) GetExtraData() string {
	if x != nil {
		return x.ExtraData
	}
	return ""
}

func (x *EthereumHeader) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *EthereumHeader) GetGasLimit() uint64 {
	if x != nil {
		return x.GasLimit
	}
	return 0
}

func (x *EthereumHeader) GetGasUsed() uint64 {
	if x != nil {
		return x.GasUsed
	}
	return 0
}

func (x *EthereumHeader) GetUncles() []string {
	if x != nil {
		return x.Uncles
	}
	return nil
}

func (m *EthereumHeader) GetOptionalBaseFeePerGas() isEthereumHeader_OptionalBaseFeePerGas {
	if m != nil {
		return m.OptionalBaseFeePerGas
	}
	return nil
}

func (x *EthereumHeader) GetBaseFeePerGas() uint64 {
	if x, ok := x.GetOptionalBaseFeePerGas().(*EthereumHeader_BaseFeePerGas); ok {
		return x.BaseFeePerGas
	}
	return 0
}

func (x *EthereumHeader) GetMixHash() string {
	if x != nil {
		return x.MixHash
	}
	return ""
}

func (x *EthereumHeader) GetWithdrawals() []*EthereumWithdrawal {
	if x != nil {
		return x.Withdrawals
	}
	return nil
}

func (x *EthereumHeader) GetWithdrawalsRoot() string {
	if x != nil {
		return x.WithdrawalsRoot
	}
	return ""
}

func (m *EthereumHeader) GetOptionalPolygonAuthor() isEthereumHeader_OptionalPolygonAuthor {
	if m != nil {
		return m.OptionalPolygonAuthor
	}
	return nil
}

func (x *EthereumHeader) GetAuthor() string {
	if x, ok := x.GetOptionalPolygonAuthor().(*EthereumHeader_Author); ok {
		return x.Author
	}
	return ""
}

type isEthereumHeader_OptionalBaseFeePerGas interface {
	isEthereumHeader_OptionalBaseFeePerGas()
}

type EthereumHeader_BaseFeePerGas struct {
	BaseFeePerGas uint64 `protobuf:"varint,20,opt,name=base_fee_per_gas,json=baseFeePerGas,proto3,oneof"`
}

func (*EthereumHeader_BaseFeePerGas) isEthereumHeader_OptionalBaseFeePerGas() {}

type isEthereumHeader_OptionalPolygonAuthor interface {
	isEthereumHeader_OptionalPolygonAuthor()
}

type EthereumHeader_Author struct {
	Author string `protobuf:"bytes,24,opt,name=author,proto3,oneof"`
}

func (*EthereumHeader_Author) isEthereumHeader_OptionalPolygonAuthor() {}

type EthereumTransactionAccess struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address     string   `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	StorageKeys []string `protobuf:"bytes,2,rep,name=storage_keys,json=storageKeys,proto3" json:"storage_keys,omitempty"`
}

func (x *EthereumTransactionAccess) Reset() {
	*x = EthereumTransactionAccess{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_ethereum_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EthereumTransactionAccess) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EthereumTransactionAccess) ProtoMessage() {}

func (x *EthereumTransactionAccess) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_ethereum_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EthereumTransactionAccess.ProtoReflect.Descriptor instead.
func (*EthereumTransactionAccess) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_ethereum_proto_rawDescGZIP(), []int{5}
}

func (x *EthereumTransactionAccess) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *EthereumTransactionAccess) GetStorageKeys() []string {
	if x != nil {
		return x.StorageKeys
	}
	return nil
}

type EthereumTransactionAccessList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessList []*EthereumTransactionAccess `protobuf:"bytes,1,rep,name=access_list,json=accessList,proto3" json:"access_list,omitempty"`
}

func (x *EthereumTransactionAccessList) Reset() {
	*x = EthereumTransactionAccessList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_ethereum_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EthereumTransactionAccessList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EthereumTransactionAccessList) ProtoMessage() {}

func (x *EthereumTransactionAccessList) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_ethereum_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EthereumTransactionAccessList.ProtoReflect.Descriptor instead.
func (*EthereumTransactionAccessList) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_ethereum_proto_rawDescGZIP(), []int{6}
}

func (x *EthereumTransactionAccessList) GetAccessList() []*EthereumTransactionAccess {
	if x != nil {
		return x.AccessList
	}
	return nil
}

type EthereumTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockHash   string                      `protobuf:"bytes,1,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	BlockNumber uint64                      `protobuf:"varint,2,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	From        string                      `protobuf:"bytes,3,opt,name=from,proto3" json:"from,omitempty"`
	Gas         uint64                      `protobuf:"varint,4,opt,name=gas,proto3" json:"gas,omitempty"`
	GasPrice    uint64                      `protobuf:"varint,5,opt,name=gas_price,json=gasPrice,proto3" json:"gas_price,omitempty"`
	Hash        string                      `protobuf:"bytes,6,opt,name=hash,proto3" json:"hash,omitempty"`
	Input       string                      `protobuf:"bytes,7,opt,name=input,proto3" json:"input,omitempty"`
	Nonce       uint64                      `protobuf:"varint,8,opt,name=nonce,proto3" json:"nonce,omitempty"`
	To          string                      `protobuf:"bytes,9,opt,name=to,proto3" json:"to,omitempty"`
	Index       uint64                      `protobuf:"varint,10,opt,name=index,proto3" json:"index,omitempty"`
	Value       string                      `protobuf:"bytes,11,opt,name=value,proto3" json:"value,omitempty"`
	Receipt     *EthereumTransactionReceipt `protobuf:"bytes,12,opt,name=receipt,proto3" json:"receipt,omitempty"`
	// EthereumTransactionTrace trace = 13;
	TokenTransfers []*EthereumTokenTransfer `protobuf:"bytes,14,rep,name=token_transfers,json=tokenTransfers,proto3" json:"token_transfers,omitempty"`
	Type           uint64                   `protobuf:"varint,15,opt,name=type,proto3" json:"type,omitempty"`
	// Types that are assignable to OptionalMaxFeePerGas:
	//
	//	*EthereumTransaction_MaxFeePerGas
	OptionalMaxFeePerGas isEthereumTransaction_OptionalMaxFeePerGas `protobuf_oneof:"optional_max_fee_per_gas"`
	// Types that are assignable to OptionalMaxPriorityFeePerGas:
	//
	//	*EthereumTransaction_MaxPriorityFeePerGas
	OptionalMaxPriorityFeePerGas isEthereumTransaction_OptionalMaxPriorityFeePerGas `protobuf_oneof:"optional_max_priority_fee_per_gas"`
	// Types that are assignable to OptionalTransactionAccessList:
	//
	//	*EthereumTransaction_TransactionAccessList
	OptionalTransactionAccessList isEthereumTransaction_OptionalTransactionAccessList `protobuf_oneof:"optional_transaction_access_list"`
	FlattenedTraces               []*EthereumTransactionFlattenedTrace                `protobuf:"bytes,19,rep,name=flattened_traces,json=flattenedTraces,proto3" json:"flattened_traces,omitempty"`
	BlockTimestamp                *timestamppb.Timestamp                              `protobuf:"bytes,20,opt,name=block_timestamp,json=blockTimestamp,proto3" json:"block_timestamp,omitempty"`
	// Types that are assignable to OptionalPriorityFeePerGas:
	//
	//	*EthereumTransaction_PriorityFeePerGas
	OptionalPriorityFeePerGas isEthereumTransaction_OptionalPriorityFeePerGas `protobuf_oneof:"optional_priority_fee_per_gas"`
	// Types that are assignable to OptionalMint:
	//
	//	*EthereumTransaction_Mint
	OptionalMint isEthereumTransaction_OptionalMint `protobuf_oneof:"optional_mint"`
	V            string                             `protobuf:"bytes,23,opt,name=v,proto3" json:"v,omitempty"`
	R            string                             `protobuf:"bytes,24,opt,name=r,proto3" json:"r,omitempty"`
	S            string                             `protobuf:"bytes,25,opt,name=s,proto3" json:"s,omitempty"`
	// Types that are assignable to OptionalChainId:
	//
	//	*EthereumTransaction_ChainId
	OptionalChainId isEthereumTransaction_OptionalChainId `protobuf_oneof:"optional_chain_id"`
	SourceHash      string                                `protobuf:"bytes,27,opt,name=source_hash,json=sourceHash,proto3" json:"source_hash,omitempty"`
	IsSystemTx      bool                                  `protobuf:"varint,28,opt,name=is_system_tx,json=isSystemTx,proto3" json:"is_system_tx,omitempty"`
}

func (x *EthereumTransaction) Reset() {
	*x = EthereumTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_ethereum_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EthereumTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EthereumTransaction) ProtoMessage() {}

func (x *EthereumTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_ethereum_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EthereumTransaction.ProtoReflect.Descriptor instead.
func (*EthereumTransaction) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_ethereum_proto_rawDescGZIP(), []int{7}
}

func (x *EthereumTransaction) GetBlockHash() string {
	if x != nil {
		return x.BlockHash
	}
	return ""
}

func (x *EthereumTransaction) GetBlockNumber() uint64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (x *EthereumTransaction) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *EthereumTransaction) GetGas() uint64 {
	if x != nil {
		return x.Gas
	}
	return 0
}

func (x *EthereumTransaction) GetGasPrice() uint64 {
	if x != nil {
		return x.GasPrice
	}
	return 0
}

func (x *EthereumTransaction) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *EthereumTransaction) GetInput() string {
	if x != nil {
		return x.Input
	}
	return ""
}

func (x *EthereumTransaction) GetNonce() uint64 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

func (x *EthereumTransaction) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *EthereumTransaction) GetIndex() uint64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *EthereumTransaction) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *EthereumTransaction) GetReceipt() *EthereumTransactionReceipt {
	if x != nil {
		return x.Receipt
	}
	return nil
}

func (x *EthereumTransaction) GetTokenTransfers() []*EthereumTokenTransfer {
	if x != nil {
		return x.TokenTransfers
	}
	return nil
}

func (x *EthereumTransaction) GetType() uint64 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (m *EthereumTransaction) GetOptionalMaxFeePerGas() isEthereumTransaction_OptionalMaxFeePerGas {
	if m != nil {
		return m.OptionalMaxFeePerGas
	}
	return nil
}

func (x *EthereumTransaction) GetMaxFeePerGas() uint64 {
	if x, ok := x.GetOptionalMaxFeePerGas().(*EthereumTransaction_MaxFeePerGas); ok {
		return x.MaxFeePerGas
	}
	return 0
}

func (m *EthereumTransaction) GetOptionalMaxPriorityFeePerGas() isEthereumTransaction_OptionalMaxPriorityFeePerGas {
	if m != nil {
		return m.OptionalMaxPriorityFeePerGas
	}
	return nil
}

func (x *EthereumTransaction) GetMaxPriorityFeePerGas() uint64 {
	if x, ok := x.GetOptionalMaxPriorityFeePerGas().(*EthereumTransaction_MaxPriorityFeePerGas); ok {
		return x.MaxPriorityFeePerGas
	}
	return 0
}

func (m *EthereumTransaction) GetOptionalTransactionAccessList() isEthereumTransaction_OptionalTransactionAccessList {
	if m != nil {
		return m.OptionalTransactionAccessList
	}
	return nil
}

func (x *EthereumTransaction) GetTransactionAccessList() *EthereumTransactionAccessList {
	if x, ok := x.GetOptionalTransactionAccessList().(*EthereumTransaction_TransactionAccessList); ok {
		return x.TransactionAccessList
	}
	return nil
}

func (x *EthereumTransaction) GetFlattenedTraces() []*EthereumTransactionFlattenedTrace {
	if x != nil {
		return x.FlattenedTraces
	}
	return nil
}

func (x *EthereumTransaction) GetBlockTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.BlockTimestamp
	}
	return nil
}

func (m *EthereumTransaction) GetOptionalPriorityFeePerGas() isEthereumTransaction_OptionalPriorityFeePerGas {
	if m != nil {
		return m.OptionalPriorityFeePerGas
	}
	return nil
}

func (x *EthereumTransaction) GetPriorityFeePerGas() uint64 {
	if x, ok := x.GetOptionalPriorityFeePerGas().(*EthereumTransaction_PriorityFeePerGas); ok {
		return x.PriorityFeePerGas
	}
	return 0
}

func (m *EthereumTransaction) GetOptionalMint() isEthereumTransaction_OptionalMint {
	if m != nil {
		return m.OptionalMint
	}
	return nil
}

func (x *EthereumTransaction) GetMint() string {
	if x, ok := x.GetOptionalMint().(*EthereumTransaction_Mint); ok {
		return x.Mint
	}
	return ""
}

func (x *EthereumTransaction) GetV() string {
	if x != nil {
		return x.V
	}
	return ""
}

func (x *EthereumTransaction) GetR() string {
	if x != nil {
		return x.R
	}
	return ""
}

func (x *EthereumTransaction) GetS() string {
	if x != nil {
		return x.S
	}
	return ""
}

func (m *EthereumTransaction) GetOptionalChainId() isEthereumTransaction_OptionalChainId {
	if m != nil {
		return m.OptionalChainId
	}
	return nil
}

func (x *EthereumTransaction) GetChainId() uint64 {
	if x, ok := x.GetOptionalChainId().(*EthereumTransaction_ChainId); ok {
		return x.ChainId
	}
	return 0
}

func (x *EthereumTransaction) GetSourceHash() string {
	if x != nil {
		return x.SourceHash
	}
	return ""
}

func (x *EthereumTransaction) GetIsSystemTx() bool {
	if x != nil {
		return x.IsSystemTx
	}
	return false
}

type isEthereumTransaction_OptionalMaxFeePerGas interface {
	isEthereumTransaction_OptionalMaxFeePerGas()
}

type EthereumTransaction_MaxFeePerGas struct {
	MaxFeePerGas uint64 `protobuf:"varint,16,opt,name=max_fee_per_gas,json=maxFeePerGas,proto3,oneof"`
}

func (*EthereumTransaction_MaxFeePerGas) isEthereumTransaction_OptionalMaxFeePerGas() {}

type isEthereumTransaction_OptionalMaxPriorityFeePerGas interface {
	isEthereumTransaction_OptionalMaxPriorityFeePerGas()
}

type EthereumTransaction_MaxPriorityFeePerGas struct {
	MaxPriorityFeePerGas uint64 `protobuf:"varint,17,opt,name=max_priority_fee_per_gas,json=maxPriorityFeePerGas,proto3,oneof"`
}

func (*EthereumTransaction_MaxPriorityFeePerGas) isEthereumTransaction_OptionalMaxPriorityFeePerGas() {
}

type isEthereumTransaction_OptionalTransactionAccessList interface {
	isEthereumTransaction_OptionalTransactionAccessList()
}

type EthereumTransaction_TransactionAccessList struct {
	TransactionAccessList *EthereumTransactionAccessList `protobuf:"bytes,18,opt,name=transaction_access_list,json=transactionAccessList,proto3,oneof"`
}

func (*EthereumTransaction_TransactionAccessList) isEthereumTransaction_OptionalTransactionAccessList() {
}

type isEthereumTransaction_OptionalPriorityFeePerGas interface {
	isEthereumTransaction_OptionalPriorityFeePerGas()
}

type EthereumTransaction_PriorityFeePerGas struct {
	PriorityFeePerGas uint64 `protobuf:"varint,21,opt,name=priority_fee_per_gas,json=priorityFeePerGas,proto3,oneof"`
}

func (*EthereumTransaction_PriorityFeePerGas) isEthereumTransaction_OptionalPriorityFeePerGas() {}

type isEthereumTransaction_OptionalMint interface {
	isEthereumTransaction_OptionalMint()
}

type EthereumTransaction_Mint struct {
	Mint string `protobuf:"bytes,22,opt,name=mint,proto3,oneof"`
}

func (*EthereumTransaction_Mint) isEthereumTransaction_OptionalMint() {}

type isEthereumTransaction_OptionalChainId interface {
	isEthereumTransaction_OptionalChainId()
}

type EthereumTransaction_ChainId struct {
	ChainId uint64 `protobuf:"varint,26,opt,name=chain_id,json=chainId,proto3,oneof"`
}

func (*EthereumTransaction_ChainId) isEthereumTransaction_OptionalChainId() {}

type EthereumTransactionReceipt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionHash   string              `protobuf:"bytes,1,opt,name=transaction_hash,json=transactionHash,proto3" json:"transaction_hash,omitempty"`
	TransactionIndex  uint64              `protobuf:"varint,2,opt,name=transaction_index,json=transactionIndex,proto3" json:"transaction_index,omitempty"`
	BlockHash         string              `protobuf:"bytes,3,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	BlockNumber       uint64              `protobuf:"varint,4,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	From              string              `protobuf:"bytes,5,opt,name=from,proto3" json:"from,omitempty"`
	To                string              `protobuf:"bytes,6,opt,name=to,proto3" json:"to,omitempty"`
	CumulativeGasUsed uint64              `protobuf:"varint,7,opt,name=cumulative_gas_used,json=cumulativeGasUsed,proto3" json:"cumulative_gas_used,omitempty"`
	GasUsed           uint64              `protobuf:"varint,8,opt,name=gas_used,json=gasUsed,proto3" json:"gas_used,omitempty"`
	ContractAddress   string              `protobuf:"bytes,9,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
	Logs              []*EthereumEventLog `protobuf:"bytes,10,rep,name=logs,proto3" json:"logs,omitempty"`
	LogsBloom         string              `protobuf:"bytes,11,opt,name=logs_bloom,json=logsBloom,proto3" json:"logs_bloom,omitempty"`
	Root              string              `protobuf:"bytes,12,opt,name=root,proto3" json:"root,omitempty"`
	// Types that are assignable to OptionalStatus:
	//
	//	*EthereumTransactionReceipt_Status
	OptionalStatus    isEthereumTransactionReceipt_OptionalStatus `protobuf_oneof:"optional_status"`
	Type              uint64                                      `protobuf:"varint,15,opt,name=type,proto3" json:"type,omitempty"`
	EffectiveGasPrice uint64                                      `protobuf:"varint,16,opt,name=effective_gas_price,json=effectiveGasPrice,proto3" json:"effective_gas_price,omitempty"`
	// Types that are assignable to OptionalL1FeeInfo:
	//
	//	*EthereumTransactionReceipt_L1FeeInfo_
	OptionalL1FeeInfo isEthereumTransactionReceipt_OptionalL1FeeInfo `protobuf_oneof:"optional_l1_fee_info"`
	// Types that are assignable to OptionalDepositNonce:
	//
	//	*EthereumTransactionReceipt_DepositNonce
	OptionalDepositNonce isEthereumTransactionReceipt_OptionalDepositNonce `protobuf_oneof:"optional_deposit_nonce"`
	// Types that are assignable to OptionalDepositReceiptVersion:
	//
	//	*EthereumTransactionReceipt_DepositReceiptVersion
	OptionalDepositReceiptVersion isEthereumTransactionReceipt_OptionalDepositReceiptVersion `protobuf_oneof:"optional_deposit_receipt_version"`
}

func (x *EthereumTransactionReceipt) Reset() {
	*x = EthereumTransactionReceipt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_ethereum_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EthereumTransactionReceipt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EthereumTransactionReceipt) ProtoMessage() {}

func (x *EthereumTransactionReceipt) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_ethereum_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EthereumTransactionReceipt.ProtoReflect.Descriptor instead.
func (*EthereumTransactionReceipt) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_ethereum_proto_rawDescGZIP(), []int{8}
}

func (x *EthereumTransactionReceipt) GetTransactionHash() string {
	if x != nil {
		return x.TransactionHash
	}
	return ""
}

func (x *EthereumTransactionReceipt) GetTransactionIndex() uint64 {
	if x != nil {
		return x.TransactionIndex
	}
	return 0
}

func (x *EthereumTransactionReceipt) GetBlockHash() string {
	if x != nil {
		return x.BlockHash
	}
	return ""
}

func (x *EthereumTransactionReceipt) GetBlockNumber() uint64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (x *EthereumTransactionReceipt) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *EthereumTransactionReceipt) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *EthereumTransactionReceipt) GetCumulativeGasUsed() uint64 {
	if x != nil {
		return x.CumulativeGasUsed
	}
	return 0
}

func (x *EthereumTransactionReceipt) GetGasUsed() uint64 {
	if x != nil {
		return x.GasUsed
	}
	return 0
}

func (x *EthereumTransactionReceipt) GetContractAddress() string {
	if x != nil {
		return x.ContractAddress
	}
	return ""
}

func (x *EthereumTransactionReceipt) GetLogs() []*EthereumEventLog {
	if x != nil {
		return x.Logs
	}
	return nil
}

func (x *EthereumTransactionReceipt) GetLogsBloom() string {
	if x != nil {
		return x.LogsBloom
	}
	return ""
}

func (x *EthereumTransactionReceipt) GetRoot() string {
	if x != nil {
		return x.Root
	}
	return ""
}

func (m *EthereumTransactionReceipt) GetOptionalStatus() isEthereumTransactionReceipt_OptionalStatus {
	if m != nil {
		return m.OptionalStatus
	}
	return nil
}

func (x *EthereumTransactionReceipt) GetStatus() uint64 {
	if x, ok := x.GetOptionalStatus().(*EthereumTransactionReceipt_Status); ok {
		return x.Status
	}
	return 0
}

func (x *EthereumTransactionReceipt) GetType() uint64 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *EthereumTransactionReceipt) GetEffectiveGasPrice() uint64 {
	if x != nil {
		return x.EffectiveGasPrice
	}
	return 0
}

func (m *EthereumTransactionReceipt) GetOptionalL1FeeInfo() isEthereumTransactionReceipt_OptionalL1FeeInfo {
	if m != nil {
		return m.OptionalL1FeeInfo
	}
	return nil
}

func (x *EthereumTransactionReceipt) GetL1FeeInfo() *EthereumTransactionReceipt_L1FeeInfo {
	if x, ok := x.GetOptionalL1FeeInfo().(*EthereumTransactionReceipt_L1FeeInfo_); ok {
		return x.L1FeeInfo
	}
	return nil
}

func (m *EthereumTransactionReceipt) GetOptionalDepositNonce() isEthereumTransactionReceipt_OptionalDepositNonce {
	if m != nil {
		return m.OptionalDepositNonce
	}
	return nil
}

func (x *EthereumTransactionReceipt) GetDepositNonce() uint64 {
	if x, ok := x.GetOptionalDepositNonce().(*EthereumTransactionReceipt_DepositNonce); ok {
		return x.DepositNonce
	}
	return 0
}

func (m *EthereumTransactionReceipt) GetOptionalDepositReceiptVersion() isEthereumTransactionReceipt_OptionalDepositReceiptVersion {
	if m != nil {
		return m.OptionalDepositReceiptVersion
	}
	return nil
}

func (x *EthereumTransactionReceipt) GetDepositReceiptVersion() uint64 {
	if x, ok := x.GetOptionalDepositReceiptVersion().(*EthereumTransactionReceipt_DepositReceiptVersion); ok {
		return x.DepositReceiptVersion
	}
	return 0
}

type isEthereumTransactionReceipt_OptionalStatus interface {
	isEthereumTransactionReceipt_OptionalStatus()
}

type EthereumTransactionReceipt_Status struct {
	Status uint64 `protobuf:"varint,14,opt,name=status,proto3,oneof"`
}

func (*EthereumTransactionReceipt_Status) isEthereumTransactionReceipt_OptionalStatus() {}

type isEthereumTransactionReceipt_OptionalL1FeeInfo interface {
	isEthereumTransactionReceipt_OptionalL1FeeInfo()
}

type EthereumTransactionReceipt_L1FeeInfo_ struct {
	L1FeeInfo *EthereumTransactionReceipt_L1FeeInfo `protobuf:"bytes,17,opt,name=l1_fee_info,json=l1FeeInfo,proto3,oneof"`
}

func (*EthereumTransactionReceipt_L1FeeInfo_) isEthereumTransactionReceipt_OptionalL1FeeInfo() {}

type isEthereumTransactionReceipt_OptionalDepositNonce interface {
	isEthereumTransactionReceipt_OptionalDepositNonce()
}

type EthereumTransactionReceipt_DepositNonce struct {
	DepositNonce uint64 `protobuf:"varint,18,opt,name=deposit_nonce,json=depositNonce,proto3,oneof"`
}

func (*EthereumTransactionReceipt_DepositNonce) isEthereumTransactionReceipt_OptionalDepositNonce() {}

type isEthereumTransactionReceipt_OptionalDepositReceiptVersion interface {
	isEthereumTransactionReceipt_OptionalDepositReceiptVersion()
}

type EthereumTransactionReceipt_DepositReceiptVersion struct {
	DepositReceiptVersion uint64 `protobuf:"varint,19,opt,name=deposit_receipt_version,json=depositReceiptVersion,proto3,oneof"`
}

func (*EthereumTransactionReceipt_DepositReceiptVersion) isEthereumTransactionReceipt_OptionalDepositReceiptVersion() {
}

type EthereumEventLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Removed          bool     `protobuf:"varint,1,opt,name=removed,proto3" json:"removed,omitempty"`
	LogIndex         uint64   `protobuf:"varint,2,opt,name=log_index,json=logIndex,proto3" json:"log_index,omitempty"`
	TransactionHash  string   `protobuf:"bytes,3,opt,name=transaction_hash,json=transactionHash,proto3" json:"transaction_hash,omitempty"`
	TransactionIndex uint64   `protobuf:"varint,4,opt,name=transaction_index,json=transactionIndex,proto3" json:"transaction_index,omitempty"`
	BlockHash        string   `protobuf:"bytes,5,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	BlockNumber      uint64   `protobuf:"varint,6,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	Address          string   `protobuf:"bytes,7,opt,name=address,proto3" json:"address,omitempty"`
	Data             string   `protobuf:"bytes,8,opt,name=data,proto3" json:"data,omitempty"`
	Topics           []string `protobuf:"bytes,9,rep,name=topics,proto3" json:"topics,omitempty"`
}

func (x *EthereumEventLog) Reset() {
	*x = EthereumEventLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_ethereum_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EthereumEventLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EthereumEventLog) ProtoMessage() {}

func (x *EthereumEventLog) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_ethereum_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EthereumEventLog.ProtoReflect.Descriptor instead.
func (*EthereumEventLog) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_ethereum_proto_rawDescGZIP(), []int{9}
}

func (x *EthereumEventLog) GetRemoved() bool {
	if x != nil {
		return x.Removed
	}
	return false
}

func (x *EthereumEventLog) GetLogIndex() uint64 {
	if x != nil {
		return x.LogIndex
	}
	return 0
}

func (x *EthereumEventLog) GetTransactionHash() string {
	if x != nil {
		return x.TransactionHash
	}
	return ""
}

func (x *EthereumEventLog) GetTransactionIndex() uint64 {
	if x != nil {
		return x.TransactionIndex
	}
	return 0
}

func (x *EthereumEventLog) GetBlockHash() string {
	if x != nil {
		return x.BlockHash
	}
	return ""
}

func (x *EthereumEventLog) GetBlockNumber() uint64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (x *EthereumEventLog) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *EthereumEventLog) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *EthereumEventLog) GetTopics() []string {
	if x != nil {
		return x.Topics
	}
	return nil
}

type EthereumTransactionTrace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error   string                      `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	Type    string                      `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	From    string                      `protobuf:"bytes,3,opt,name=from,proto3" json:"from,omitempty"`
	To      string                      `protobuf:"bytes,4,opt,name=to,proto3" json:"to,omitempty"`
	Value   string                      `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"`
	Gas     uint64                      `protobuf:"varint,6,opt,name=gas,proto3" json:"gas,omitempty"`
	GasUsed uint64                      `protobuf:"varint,7,opt,name=gas_used,json=gasUsed,proto3" json:"gas_used,omitempty"`
	Input   string                      `protobuf:"bytes,8,opt,name=input,proto3" json:"input,omitempty"`
	Output  string                      `protobuf:"bytes,9,opt,name=output,proto3" json:"output,omitempty"`
	Calls   []*EthereumTransactionTrace `protobuf:"bytes,10,rep,name=calls,proto3" json:"calls,omitempty"`
}

func (x *EthereumTransactionTrace) Reset() {
	*x = EthereumTransactionTrace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_ethereum_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EthereumTransactionTrace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EthereumTransactionTrace) ProtoMessage() {}

func (x *EthereumTransactionTrace) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_ethereum_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EthereumTransactionTrace.ProtoReflect.Descriptor instead.
func (*EthereumTransactionTrace) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_ethereum_proto_rawDescGZIP(), []int{10}
}

func (x *EthereumTransactionTrace) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *EthereumTransactionTrace) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *EthereumTransactionTrace) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *EthereumTransactionTrace) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *EthereumTransactionTrace) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *EthereumTransactionTrace) GetGas() uint64 {
	if x != nil {
		return x.Gas
	}
	return 0
}

func (x *EthereumTransactionTrace) GetGasUsed() uint64 {
	if x != nil {
		return x.GasUsed
	}
	return 0
}

func (x *EthereumTransactionTrace) GetInput() string {
	if x != nil {
		return x.Input
	}
	return ""
}

func (x *EthereumTransactionTrace) GetOutput() string {
	if x != nil {
		return x.Output
	}
	return ""
}

func (x *EthereumTransactionTrace) GetCalls() []*EthereumTransactionTrace {
	if x != nil {
		return x.Calls
	}
	return nil
}

type EthereumTransactionFlattenedTrace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error            string   `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	Type             string   `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	From             string   `protobuf:"bytes,3,opt,name=from,proto3" json:"from,omitempty"`
	To               string   `protobuf:"bytes,4,opt,name=to,proto3" json:"to,omitempty"`
	Value            string   `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"`
	Gas              uint64   `protobuf:"varint,6,opt,name=gas,proto3" json:"gas,omitempty"`
	GasUsed          uint64   `protobuf:"varint,7,opt,name=gas_used,json=gasUsed,proto3" json:"gas_used,omitempty"`
	Input            string   `protobuf:"bytes,8,opt,name=input,proto3" json:"input,omitempty"`
	Output           string   `protobuf:"bytes,9,opt,name=output,proto3" json:"output,omitempty"`
	Subtraces        uint64   `protobuf:"varint,10,opt,name=subtraces,proto3" json:"subtraces,omitempty"`
	TraceAddress     []uint64 `protobuf:"varint,11,rep,packed,name=trace_address,json=traceAddress,proto3" json:"trace_address,omitempty"`
	TraceType        string   `protobuf:"bytes,12,opt,name=trace_type,json=traceType,proto3" json:"trace_type,omitempty"`
	CallType         string   `protobuf:"bytes,13,opt,name=call_type,json=callType,proto3" json:"call_type,omitempty"`
	TraceId          string   `protobuf:"bytes,14,opt,name=trace_id,json=traceId,proto3" json:"trace_id,omitempty"`
	Status           uint64   `protobuf:"varint,15,opt,name=status,proto3" json:"status,omitempty"`
	BlockHash        string   `protobuf:"bytes,16,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	BlockNumber      uint64   `protobuf:"varint,17,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	TransactionHash  string   `protobuf:"bytes,18,opt,name=transaction_hash,json=transactionHash,proto3" json:"transaction_hash,omitempty"`
	TransactionIndex uint64   `protobuf:"varint,19,opt,name=transaction_index,json=transactionIndex,proto3" json:"transaction_index,omitempty"`
}

func (x *EthereumTransactionFlattenedTrace) Reset() {
	*x = EthereumTransactionFlattenedTrace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_ethereum_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EthereumTransactionFlattenedTrace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EthereumTransactionFlattenedTrace) ProtoMessage() {}

func (x *EthereumTransactionFlattenedTrace) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_ethereum_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EthereumTransactionFlattenedTrace.ProtoReflect.Descriptor instead.
func (*EthereumTransactionFlattenedTrace) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_ethereum_proto_rawDescGZIP(), []int{11}
}

func (x *EthereumTransactionFlattenedTrace) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *EthereumTransactionFlattenedTrace) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *EthereumTransactionFlattenedTrace) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *EthereumTransactionFlattenedTrace) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *EthereumTransactionFlattenedTrace) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *EthereumTransactionFlattenedTrace) GetGas() uint64 {
	if x != nil {
		return x.Gas
	}
	return 0
}

func (x *EthereumTransactionFlattenedTrace) GetGasUsed() uint64 {
	if x != nil {
		return x.GasUsed
	}
	return 0
}

func (x *EthereumTransactionFlattenedTrace) GetInput() string {
	if x != nil {
		return x.Input
	}
	return ""
}

func (x *EthereumTransactionFlattenedTrace) GetOutput() string {
	if x != nil {
		return x.Output
	}
	return ""
}

func (x *EthereumTransactionFlattenedTrace) GetSubtraces() uint64 {
	if x != nil {
		return x.Subtraces
	}
	return 0
}

func (x *EthereumTransactionFlattenedTrace) GetTraceAddress() []uint64 {
	if x != nil {
		return x.TraceAddress
	}
	return nil
}

func (x *EthereumTransactionFlattenedTrace) GetTraceType() string {
	if x != nil {
		return x.TraceType
	}
	return ""
}

func (x *EthereumTransactionFlattenedTrace) GetCallType() string {
	if x != nil {
		return x.CallType
	}
	return ""
}

func (x *EthereumTransactionFlattenedTrace) GetTraceId() string {
	if x != nil {
		return x.TraceId
	}
	return ""
}

func (x *EthereumTransactionFlattenedTrace) GetStatus() uint64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *EthereumTransactionFlattenedTrace) GetBlockHash() string {
	if x != nil {
		return x.BlockHash
	}
	return ""
}

func (x *EthereumTransactionFlattenedTrace) GetBlockNumber() uint64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (x *EthereumTransactionFlattenedTrace) GetTransactionHash() string {
	if x != nil {
		return x.TransactionHash
	}
	return ""
}

func (x *EthereumTransactionFlattenedTrace) GetTransactionIndex() uint64 {
	if x != nil {
		return x.TransactionIndex
	}
	return 0
}

type EthereumTokenTransfer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TokenAddress     string `protobuf:"bytes,1,opt,name=token_address,json=tokenAddress,proto3" json:"token_address,omitempty"`
	FromAddress      string `protobuf:"bytes,2,opt,name=from_address,json=fromAddress,proto3" json:"from_address,omitempty"`
	ToAddress        string `protobuf:"bytes,3,opt,name=to_address,json=toAddress,proto3" json:"to_address,omitempty"`
	Value            string `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
	TransactionIndex uint64 `protobuf:"varint,5,opt,name=transaction_index,json=transactionIndex,proto3" json:"transaction_index,omitempty"`
	TransactionHash  string `protobuf:"bytes,6,opt,name=transaction_hash,json=transactionHash,proto3" json:"transaction_hash,omitempty"`
	LogIndex         uint64 `protobuf:"varint,7,opt,name=log_index,json=logIndex,proto3" json:"log_index,omitempty"`
	BlockHash        string `protobuf:"bytes,8,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	BlockNumber      uint64 `protobuf:"varint,9,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	// Types that are assignable to TokenTransfer:
	//
	//	*EthereumTokenTransfer_Erc20
	//	*EthereumTokenTransfer_Erc721
	TokenTransfer isEthereumTokenTransfer_TokenTransfer `protobuf_oneof:"token_transfer"`
}

func (x *EthereumTokenTransfer) Reset() {
	*x = EthereumTokenTransfer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_ethereum_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EthereumTokenTransfer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EthereumTokenTransfer) ProtoMessage() {}

func (x *EthereumTokenTransfer) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_ethereum_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EthereumTokenTransfer.ProtoReflect.Descriptor instead.
func (*EthereumTokenTransfer) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_ethereum_proto_rawDescGZIP(), []int{12}
}

func (x *EthereumTokenTransfer) GetTokenAddress() string {
	if x != nil {
		return x.TokenAddress
	}
	return ""
}

func (x *EthereumTokenTransfer) GetFromAddress() string {
	if x != nil {
		return x.FromAddress
	}
	return ""
}

func (x *EthereumTokenTransfer) GetToAddress() string {
	if x != nil {
		return x.ToAddress
	}
	return ""
}

func (x *EthereumTokenTransfer) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *EthereumTokenTransfer) GetTransactionIndex() uint64 {
	if x != nil {
		return x.TransactionIndex
	}
	return 0
}

func (x *EthereumTokenTransfer) GetTransactionHash() string {
	if x != nil {
		return x.TransactionHash
	}
	return ""
}

func (x *EthereumTokenTransfer) GetLogIndex() uint64 {
	if x != nil {
		return x.LogIndex
	}
	return 0
}

func (x *EthereumTokenTransfer) GetBlockHash() string {
	if x != nil {
		return x.BlockHash
	}
	return ""
}

func (x *EthereumTokenTransfer) GetBlockNumber() uint64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (m *EthereumTokenTransfer) GetTokenTransfer() isEthereumTokenTransfer_TokenTransfer {
	if m != nil {
		return m.TokenTransfer
	}
	return nil
}

func (x *EthereumTokenTransfer) GetErc20() *ERC20TokenTransfer {
	if x, ok := x.GetTokenTransfer().(*EthereumTokenTransfer_Erc20); ok {
		return x.Erc20
	}
	return nil
}

func (x *EthereumTokenTransfer) GetErc721() *ERC721TokenTransfer {
	if x, ok := x.GetTokenTransfer().(*EthereumTokenTransfer_Erc721); ok {
		return x.Erc721
	}
	return nil
}

type isEthereumTokenTransfer_TokenTransfer interface {
	isEthereumTokenTransfer_TokenTransfer()
}

type EthereumTokenTransfer_Erc20 struct {
	Erc20 *ERC20TokenTransfer `protobuf:"bytes,100,opt,name=erc20,proto3,oneof"`
}

type EthereumTokenTransfer_Erc721 struct {
	Erc721 *ERC721TokenTransfer `protobuf:"bytes,101,opt,name=erc721,proto3,oneof"`
}

func (*EthereumTokenTransfer_Erc20) isEthereumTokenTransfer_TokenTransfer() {}

func (*EthereumTokenTransfer_Erc721) isEthereumTokenTransfer_TokenTransfer() {}

type ERC20TokenTransfer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromAddress string `protobuf:"bytes,1,opt,name=from_address,json=fromAddress,proto3" json:"from_address,omitempty"`
	ToAddress   string `protobuf:"bytes,2,opt,name=to_address,json=toAddress,proto3" json:"to_address,omitempty"`
	Value       string `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ERC20TokenTransfer) Reset() {
	*x = ERC20TokenTransfer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_ethereum_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ERC20TokenTransfer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ERC20TokenTransfer) ProtoMessage() {}

func (x *ERC20TokenTransfer) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_ethereum_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ERC20TokenTransfer.ProtoReflect.Descriptor instead.
func (*ERC20TokenTransfer) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_ethereum_proto_rawDescGZIP(), []int{13}
}

func (x *ERC20TokenTransfer) GetFromAddress() string {
	if x != nil {
		return x.FromAddress
	}
	return ""
}

func (x *ERC20TokenTransfer) GetToAddress() string {
	if x != nil {
		return x.ToAddress
	}
	return ""
}

func (x *ERC20TokenTransfer) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type ERC721TokenTransfer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromAddress string `protobuf:"bytes,1,opt,name=from_address,json=fromAddress,proto3" json:"from_address,omitempty"`
	ToAddress   string `protobuf:"bytes,2,opt,name=to_address,json=toAddress,proto3" json:"to_address,omitempty"`
	TokenId     string `protobuf:"bytes,3,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty"`
}

func (x *ERC721TokenTransfer) Reset() {
	*x = ERC721TokenTransfer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_ethereum_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ERC721TokenTransfer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ERC721TokenTransfer) ProtoMessage() {}

func (x *ERC721TokenTransfer) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_ethereum_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ERC721TokenTransfer.ProtoReflect.Descriptor instead.
func (*ERC721TokenTransfer) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_ethereum_proto_rawDescGZIP(), []int{14}
}

func (x *ERC721TokenTransfer) GetFromAddress() string {
	if x != nil {
		return x.FromAddress
	}
	return ""
}

func (x *ERC721TokenTransfer) GetToAddress() string {
	if x != nil {
		return x.ToAddress
	}
	return ""
}

func (x *ERC721TokenTransfer) GetTokenId() string {
	if x != nil {
		return x.TokenId
	}
	return ""
}

type EthereumAccountStateProof struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountProof []byte `protobuf:"bytes,1,opt,name=account_proof,json=accountProof,proto3" json:"account_proof,omitempty"`
}

func (x *EthereumAccountStateProof) Reset() {
	*x = EthereumAccountStateProof{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_ethereum_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EthereumAccountStateProof) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EthereumAccountStateProof) ProtoMessage() {}

func (x *EthereumAccountStateProof) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_ethereum_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EthereumAccountStateProof.ProtoReflect.Descriptor instead.
func (*EthereumAccountStateProof) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_ethereum_proto_rawDescGZIP(), []int{15}
}

func (x *EthereumAccountStateProof) GetAccountProof() []byte {
	if x != nil {
		return x.AccountProof
	}
	return nil
}

type EthereumExtraInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Erc20Contract string `protobuf:"bytes,1,opt,name=erc20_contract,json=erc20Contract,proto3" json:"erc20_contract,omitempty"`
}

func (x *EthereumExtraInput) Reset() {
	*x = EthereumExtraInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_ethereum_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EthereumExtraInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EthereumExtraInput) ProtoMessage() {}

func (x *EthereumExtraInput) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_ethereum_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EthereumExtraInput.ProtoReflect.Descriptor instead.
func (*EthereumExtraInput) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_ethereum_proto_rawDescGZIP(), []int{16}
}

func (x *EthereumExtraInput) GetErc20Contract() string {
	if x != nil {
		return x.Erc20Contract
	}
	return ""
}

type EthereumAccountStateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nonce       uint64 `protobuf:"varint,1,opt,name=nonce,proto3" json:"nonce,omitempty"`
	StorageHash string `protobuf:"bytes,2,opt,name=storage_hash,json=storageHash,proto3" json:"storage_hash,omitempty"`
	CodeHash    string `protobuf:"bytes,3,opt,name=code_hash,json=codeHash,proto3" json:"code_hash,omitempty"`
}

func (x *EthereumAccountStateResponse) Reset() {
	*x = EthereumAccountStateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_ethereum_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EthereumAccountStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EthereumAccountStateResponse) ProtoMessage() {}

func (x *EthereumAccountStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_ethereum_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EthereumAccountStateResponse.ProtoReflect.Descriptor instead.
func (*EthereumAccountStateResponse) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_ethereum_proto_rawDescGZIP(), []int{17}
}

func (x *EthereumAccountStateResponse) GetNonce() uint64 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

func (x *EthereumAccountStateResponse) GetStorageHash() string {
	if x != nil {
		return x.StorageHash
	}
	return ""
}

func (x *EthereumAccountStateResponse) GetCodeHash() string {
	if x != nil {
		return x.CodeHash
	}
	return ""
}

type EthereumTransactionReceipt_L1FeeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	L1GasUsed   uint64 `protobuf:"varint,1,opt,name=l1_gas_used,json=l1GasUsed,proto3" json:"l1_gas_used,omitempty"`
	L1GasPrice  uint64 `protobuf:"varint,2,opt,name=l1_gas_price,json=l1GasPrice,proto3" json:"l1_gas_price,omitempty"`
	L1Fee       uint64 `protobuf:"varint,3,opt,name=l1_fee,json=l1Fee,proto3" json:"l1_fee,omitempty"`
	L1FeeScalar string `protobuf:"bytes,4,opt,name=l1_fee_scalar,json=l1FeeScalar,proto3" json:"l1_fee_scalar,omitempty"`
}

func (x *EthereumTransactionReceipt_L1FeeInfo) Reset() {
	*x = EthereumTransactionReceipt_L1FeeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_ethereum_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EthereumTransactionReceipt_L1FeeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EthereumTransactionReceipt_L1FeeInfo) ProtoMessage() {}

func (x *EthereumTransactionReceipt_L1FeeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_ethereum_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EthereumTransactionReceipt_L1FeeInfo.ProtoReflect.Descriptor instead.
func (*EthereumTransactionReceipt_L1FeeInfo) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_ethereum_proto_rawDescGZIP(), []int{8, 0}
}

func (x *EthereumTransactionReceipt_L1FeeInfo) GetL1GasUsed() uint64 {
	if x != nil {
		return x.L1GasUsed
	}
	return 0
}

func (x *EthereumTransactionReceipt_L1FeeInfo) GetL1GasPrice() uint64 {
	if x != nil {
		return x.L1GasPrice
	}
	return 0
}

func (x *EthereumTransactionReceipt_L1FeeInfo) GetL1Fee() uint64 {
	if x != nil {
		return x.L1Fee
	}
	return 0
}

func (x *EthereumTransactionReceipt_L1FeeInfo) GetL1FeeScalar() string {
	if x != nil {
		return x.L1FeeScalar
	}
	return ""
}

var File_coinbase_chainstorage_blockchain_ethereum_proto protoreflect.FileDescriptor

var file_coinbase_chainstorage_blockchain_ethereum_proto_rawDesc = []byte{
	0x0a, 0x2f, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x5f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x15, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf7, 0x01, 0x0a, 0x10, 0x45, 0x74,
	0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x42, 0x6c, 0x6f, 0x62, 0x64, 0x61, 0x74, 0x61, 0x12, 0x16,
	0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x31, 0x0a, 0x14, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0c, 0x52, 0x13, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x73, 0x12, 0x2d, 0x0a, 0x12, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x6e, 0x63, 0x6c,
	0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x06, 0x75, 0x6e, 0x63, 0x6c, 0x65, 0x73,
	0x12, 0x43, 0x0a, 0x07, 0x70, 0x6f, 0x6c, 0x79, 0x67, 0x6f, 0x6e, 0x18, 0x64, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x6f, 0x6c, 0x79, 0x67, 0x6f,
	0x6e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x07, 0x70, 0x6f,
	0x6c, 0x79, 0x67, 0x6f, 0x6e, 0x42, 0x0c, 0x0a, 0x0a, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x22, 0x2a, 0x0a, 0x10, 0x50, 0x6f, 0x6c, 0x79, 0x67, 0x6f, 0x6e, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x22,
	0xdd, 0x01, 0x0a, 0x0d, 0x45, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x12, 0x3d, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x65,
	0x75, 0x6d, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x12, 0x4e, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x45,
	0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x3d, 0x0a, 0x06, 0x75, 0x6e, 0x63, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75,
	0x6d, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x75, 0x6e, 0x63, 0x6c, 0x65, 0x73, 0x22,
	0x85, 0x01, 0x0a, 0x12, 0x45, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x57, 0x69, 0x74, 0x68,
	0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x27, 0x0a, 0x0f,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xf6, 0x06, 0x0a, 0x0e, 0x45, 0x74, 0x68, 0x65,
	0x72, 0x65, 0x75, 0x6d, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61,
	0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x1f,
	0x0a, 0x0b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12,
	0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x68, 0x61, 0x33, 0x5f, 0x75, 0x6e, 0x63, 0x6c, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x73, 0x68, 0x61, 0x33, 0x55, 0x6e, 0x63, 0x6c, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a,
	0x6c, 0x6f, 0x67, 0x73, 0x5f, 0x62, 0x6c, 0x6f, 0x6f, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x6c, 0x6f, 0x67, 0x73, 0x42, 0x6c, 0x6f, 0x6f, 0x6d, 0x12, 0x2b, 0x0a, 0x11, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x72, 0x6f, 0x6f, 0x74,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x70, 0x74, 0x73, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x73, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x6d, 0x69, 0x6e, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x69, 0x6e,
	0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c,
	0x74, 0x79, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x64, 0x69, 0x66, 0x66,
	0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x12, 0x1d, 0x0a,
	0x0a, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x65, 0x78, 0x74, 0x72, 0x61, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x73, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x08, 0x67, 0x61, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x19, 0x0a,
	0x08, 0x67, 0x61, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x07, 0x67, 0x61, 0x73, 0x55, 0x73, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x6e, 0x63, 0x6c,
	0x65, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x75, 0x6e, 0x63, 0x6c, 0x65, 0x73,
	0x12, 0x29, 0x0a, 0x10, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x70, 0x65, 0x72,
	0x5f, 0x67, 0x61, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x0d, 0x62, 0x61,
	0x73, 0x65, 0x46, 0x65, 0x65, 0x50, 0x65, 0x72, 0x47, 0x61, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x6d,
	0x69, 0x78, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x69, 0x78, 0x48, 0x61, 0x73, 0x68, 0x12, 0x4b, 0x0a, 0x0b, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72,
	0x61, 0x77, 0x61, 0x6c, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6f,
	0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x57, 0x69, 0x74, 0x68,
	0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x52, 0x0b, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x61, 0x6c, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61,
	0x6c, 0x73, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x77,
	0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x73, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x18,
	0x0a, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01,
	0x52, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x42, 0x1b, 0x0a, 0x19, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x70, 0x65,
	0x72, 0x5f, 0x67, 0x61, 0x73, 0x42, 0x19, 0x0a, 0x17, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x5f, 0x70, 0x6f, 0x6c, 0x79, 0x67, 0x6f, 0x6e, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x22, 0x58, 0x0a, 0x19, 0x45, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x22, 0x72, 0x0a, 0x1d, 0x45, 0x74,
	0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x51, 0x0a, 0x0b, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x30, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75,
	0x6d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xca,
	0x09, 0x0a, 0x13, 0x45, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f,
	0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x10, 0x0a, 0x03,
	0x67, 0x61, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x67, 0x61, 0x73, 0x12, 0x1b,
	0x0a, 0x09, 0x67, 0x61, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x08, 0x67, 0x61, 0x73, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x68,
	0x61, 0x73, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12,
	0x14, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x74,
	0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x4b, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x70, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x52, 0x07, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x70, 0x74, 0x12, 0x55, 0x0a, 0x0f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x0e, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x27, 0x0a, 0x0f, 0x6d, 0x61, 0x78, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x67,
	0x61, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x46,
	0x65, 0x65, 0x50, 0x65, 0x72, 0x47, 0x61, 0x73, 0x12, 0x38, 0x0a, 0x18, 0x6d, 0x61, 0x78, 0x5f,
	0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x70, 0x65, 0x72,
	0x5f, 0x67, 0x61, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x04, 0x48, 0x01, 0x52, 0x14, 0x6d, 0x61,
	0x78, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x46, 0x65, 0x65, 0x50, 0x65, 0x72, 0x47,
	0x61, 0x73, 0x12, 0x6e, 0x0a, 0x17, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x45, 0x74, 0x68, 0x65,
	0x72, 0x65, 0x75, 0x6d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x02, 0x52, 0x15, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x63, 0x0a, 0x10, 0x66, 0x6c, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x65, 0x64, 0x5f,
	0x74, 0x72, 0x61, 0x63, 0x65, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x63,
	0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6c, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x65,
	0x64, 0x54, 0x72, 0x61, 0x63, 0x65, 0x52, 0x0f, 0x66, 0x6c, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x65,
	0x64, 0x54, 0x72, 0x61, 0x63, 0x65, 0x73, 0x12, 0x43, 0x0a, 0x0f, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x31, 0x0a, 0x14,
	0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x70, 0x65, 0x72,
	0x5f, 0x67, 0x61, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x04, 0x48, 0x03, 0x52, 0x11, 0x70, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x46, 0x65, 0x65, 0x50, 0x65, 0x72, 0x47, 0x61, 0x73, 0x12,
	0x14, 0x0a, 0x04, 0x6d, 0x69, 0x6e, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52,
	0x04, 0x6d, 0x69, 0x6e, 0x74, 0x12, 0x0c, 0x0a, 0x01, 0x76, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x01, 0x76, 0x12, 0x0c, 0x0a, 0x01, 0x72, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01,
	0x72, 0x12, 0x0c, 0x0a, 0x01, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x73, 0x12,
	0x1b, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x1a, 0x20, 0x01, 0x28,
	0x04, 0x48, 0x05, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x1b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x20, 0x0a,
	0x0c, 0x69, 0x73, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x74, 0x78, 0x18, 0x1c, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x78, 0x42,
	0x1a, 0x0a, 0x18, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x78, 0x5f,
	0x66, 0x65, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x67, 0x61, 0x73, 0x42, 0x23, 0x0a, 0x21, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x67, 0x61, 0x73,
	0x42, 0x22, 0x0a, 0x20, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x42, 0x1f, 0x0a, 0x1d, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x70, 0x65,
	0x72, 0x5f, 0x67, 0x61, 0x73, 0x42, 0x0f, 0x0a, 0x0d, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x5f, 0x6d, 0x69, 0x6e, 0x74, 0x42, 0x13, 0x0a, 0x11, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x22, 0xd8, 0x07, 0x0a, 0x1a,
	0x45, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x61, 0x73, 0x68, 0x12, 0x2b, 0x0a, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73,
	0x68, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x75, 0x6d, 0x75,
	0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x67, 0x61, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x47, 0x61, 0x73, 0x55, 0x73, 0x65, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x61, 0x73, 0x5f,
	0x75, 0x73, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x67, 0x61, 0x73, 0x55,
	0x73, 0x65, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x3b,
	0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63,
	0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x4c, 0x6f, 0x67, 0x52, 0x04, 0x6c, 0x6f, 0x67, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6c,
	0x6f, 0x67, 0x73, 0x5f, 0x62, 0x6c, 0x6f, 0x6f, 0x6d, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x6c, 0x6f, 0x67, 0x73, 0x42, 0x6c, 0x6f, 0x6f, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f,
	0x6f, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x12, 0x18,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x13,
	0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x67, 0x61, 0x73, 0x5f, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x65, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x47, 0x61, 0x73, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x5d, 0x0a, 0x0b,
	0x6c, 0x31, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3b, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x65,
	0x75, 0x6d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63,
	0x65, 0x69, 0x70, 0x74, 0x2e, 0x4c, 0x31, 0x46, 0x65, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x01,
	0x52, 0x09, 0x6c, 0x31, 0x46, 0x65, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x25, 0x0a, 0x0d, 0x64,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x04, 0x48, 0x02, 0x52, 0x0c, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x4e, 0x6f, 0x6e,
	0x63, 0x65, 0x12, 0x38, 0x0a, 0x17, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x70, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x04, 0x48, 0x03, 0x52, 0x15, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x52, 0x65,
	0x63, 0x65, 0x69, 0x70, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x88, 0x01, 0x0a,
	0x09, 0x4c, 0x31, 0x46, 0x65, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x0a, 0x0b, 0x6c, 0x31,
	0x5f, 0x67, 0x61, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x09, 0x6c, 0x31, 0x47, 0x61, 0x73, 0x55, 0x73, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x6c, 0x31,
	0x5f, 0x67, 0x61, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0a, 0x6c, 0x31, 0x47, 0x61, 0x73, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x15, 0x0a, 0x06,
	0x6c, 0x31, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6c, 0x31,
	0x46, 0x65, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x6c, 0x31, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x73, 0x63,
	0x61, 0x6c, 0x61, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x31, 0x46, 0x65,
	0x65, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x42, 0x11, 0x0a, 0x0f, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x16, 0x0a, 0x14, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x6c, 0x31, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x42, 0x18, 0x0a, 0x16, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x64,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x42, 0x22, 0x0a, 0x20,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x4a, 0x04, 0x08, 0x0d, 0x10, 0x0e, 0x22, 0xa9, 0x02, 0x0a, 0x10, 0x45, 0x74, 0x68, 0x65, 0x72,
	0x65, 0x75, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x72,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x72, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x12, 0x2b, 0x0a,
	0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x6f,
	0x70, 0x69, 0x63, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x74, 0x6f, 0x70, 0x69,
	0x63, 0x73, 0x22, 0xa0, 0x02, 0x0a, 0x18, 0x45, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f,
	0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a,
	0x02, 0x74, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x67, 0x61, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x03, 0x67, 0x61, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x61, 0x73, 0x5f, 0x75, 0x73, 0x65,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x67, 0x61, 0x73, 0x55, 0x73, 0x65, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x45,
	0x0a, 0x05, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e,
	0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x52, 0x05,
	0x63, 0x61, 0x6c, 0x6c, 0x73, 0x22, 0xae, 0x04, 0x0a, 0x21, 0x45, 0x74, 0x68, 0x65, 0x72, 0x65,
	0x75, 0x6d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6c, 0x61,
	0x74, 0x74, 0x65, 0x6e, 0x65, 0x64, 0x54, 0x72, 0x61, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x67, 0x61, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x67, 0x61,
	0x73, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x61, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x07, 0x67, 0x61, 0x73, 0x55, 0x73, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x75,
	0x62, 0x74, 0x72, 0x61, 0x63, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73,
	0x75, 0x62, 0x74, 0x72, 0x61, 0x63, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x63,
	0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x04, 0x52,
	0x0c, 0x74, 0x72, 0x61, 0x63, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a,
	0x0a, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x74, 0x72, 0x61, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x63, 0x61, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x72, 0x61,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x61,
	0x63, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x21, 0x0a, 0x0c, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x29,
	0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x68, 0x61,
	0x73, 0x68, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x12, 0x2b, 0x0a, 0x11, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0xe6, 0x03, 0x0a, 0x15, 0x45, 0x74, 0x68, 0x65, 0x72,
	0x65, 0x75, 0x6d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x72, 0x6f,
	0x6d, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x6f,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a,
	0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73,
	0x68, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x41, 0x0a, 0x05, 0x65, 0x72, 0x63, 0x32, 0x30, 0x18, 0x64, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x45, 0x52, 0x43, 0x32,
	0x30, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x48, 0x00,
	0x52, 0x05, 0x65, 0x72, 0x63, 0x32, 0x30, 0x12, 0x44, 0x0a, 0x06, 0x65, 0x72, 0x63, 0x37, 0x32,
	0x31, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e,
	0x45, 0x52, 0x43, 0x37, 0x32, 0x31, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x48, 0x00, 0x52, 0x06, 0x65, 0x72, 0x63, 0x37, 0x32, 0x31, 0x42, 0x10, 0x0a,
	0x0e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x22,
	0x6c, 0x0a, 0x12, 0x45, 0x52, 0x43, 0x32, 0x30, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x72, 0x6f,
	0x6d, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x6f,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x72, 0x0a,
	0x13, 0x45, 0x52, 0x43, 0x37, 0x32, 0x31, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x72, 0x6f, 0x6d,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x6f, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49,
	0x64, 0x22, 0x40, 0x0a, 0x19, 0x45, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x23,
	0x0a, 0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x72,
	0x6f, 0x6f, 0x66, 0x22, 0x3b, 0x0a, 0x12, 0x45, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x72, 0x63,
	0x32, 0x30, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x65, 0x72, 0x63, 0x32, 0x30, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x22, 0x74, 0x0a, 0x1c, 0x45, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x64,
	0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f,
	0x64, 0x65, 0x48, 0x61, 0x73, 0x68, 0x42, 0x3f, 0x5a, 0x3d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2f, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_coinbase_chainstorage_blockchain_ethereum_proto_rawDescOnce sync.Once
	file_coinbase_chainstorage_blockchain_ethereum_proto_rawDescData = file_coinbase_chainstorage_blockchain_ethereum_proto_rawDesc
)

func file_coinbase_chainstorage_blockchain_ethereum_proto_rawDescGZIP() []byte {
	file_coinbase_chainstorage_blockchain_ethereum_proto_rawDescOnce.Do(func() {
		file_coinbase_chainstorage_blockchain_ethereum_proto_rawDescData = protoimpl.X.CompressGZIP(file_coinbase_chainstorage_blockchain_ethereum_proto_rawDescData)
	})
	return file_coinbase_chainstorage_blockchain_ethereum_proto_rawDescData
}

var file_coinbase_chainstorage_blockchain_ethereum_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_coinbase_chainstorage_blockchain_ethereum_proto_goTypes = []interface{}{
	(*EthereumBlobdata)(nil),                     // 0: coinbase.chainstorage.EthereumBlobdata
	(*PolygonExtraData)(nil),                     // 1: coinbase.chainstorage.PolygonExtraData
	(*EthereumBlock)(nil),                        // 2: coinbase.chainstorage.EthereumBlock
	(*EthereumWithdrawal)(nil),                   // 3: coinbase.chainstorage.EthereumWithdrawal
	(*EthereumHeader)(nil),                       // 4: coinbase.chainstorage.EthereumHeader
	(*EthereumTransactionAccess)(nil),            // 5: coinbase.chainstorage.EthereumTransactionAccess
	(*EthereumTransactionAccessList)(nil),        // 6: coinbase.chainstorage.EthereumTransactionAccessList
	(*EthereumTransaction)(nil),                  // 7: coinbase.chainstorage.EthereumTransaction
	(*EthereumTransactionReceipt)(nil),           // 8: coinbase.chainstorage.EthereumTransactionReceipt
	(*EthereumEventLog)(nil),                     // 9: coinbase.chainstorage.EthereumEventLog
	(*EthereumTransactionTrace)(nil),             // 10: coinbase.chainstorage.EthereumTransactionTrace
	(*EthereumTransactionFlattenedTrace)(nil),    // 11: coinbase.chainstorage.EthereumTransactionFlattenedTrace
	(*EthereumTokenTransfer)(nil),                // 12: coinbase.chainstorage.EthereumTokenTransfer
	(*ERC20TokenTransfer)(nil),                   // 13: coinbase.chainstorage.ERC20TokenTransfer
	(*ERC721TokenTransfer)(nil),                  // 14: coinbase.chainstorage.ERC721TokenTransfer
	(*EthereumAccountStateProof)(nil),            // 15: coinbase.chainstorage.EthereumAccountStateProof
	(*EthereumExtraInput)(nil),                   // 16: coinbase.chainstorage.EthereumExtraInput
	(*EthereumAccountStateResponse)(nil),         // 17: coinbase.chainstorage.EthereumAccountStateResponse
	(*EthereumTransactionReceipt_L1FeeInfo)(nil), // 18: coinbase.chainstorage.EthereumTransactionReceipt.L1FeeInfo
	(*timestamppb.Timestamp)(nil),                // 19: google.protobuf.Timestamp
}
var file_coinbase_chainstorage_blockchain_ethereum_proto_depIdxs = []int32{
	1,  // 0: coinbase.chainstorage.EthereumBlobdata.polygon:type_name -> coinbase.chainstorage.PolygonExtraData
	4,  // 1: coinbase.chainstorage.EthereumBlock.header:type_name -> coinbase.chainstorage.EthereumHeader
	7,  // 2: coinbase.chainstorage.EthereumBlock.transactions:type_name -> coinbase.chainstorage.EthereumTransaction
	4,  // 3: coinbase.chainstorage.EthereumBlock.uncles:type_name -> coinbase.chainstorage.EthereumHeader
	19, // 4: coinbase.chainstorage.EthereumHeader.timestamp:type_name -> google.protobuf.Timestamp
	3,  // 5: coinbase.chainstorage.EthereumHeader.withdrawals:type_name -> coinbase.chainstorage.EthereumWithdrawal
	5,  // 6: coinbase.chainstorage.EthereumTransactionAccessList.access_list:type_name -> coinbase.chainstorage.EthereumTransactionAccess
	8,  // 7: coinbase.chainstorage.EthereumTransaction.receipt:type_name -> coinbase.chainstorage.EthereumTransactionReceipt
	12, // 8: coinbase.chainstorage.EthereumTransaction.token_transfers:type_name -> coinbase.chainstorage.EthereumTokenTransfer
	6,  // 9: coinbase.chainstorage.EthereumTransaction.transaction_access_list:type_name -> coinbase.chainstorage.EthereumTransactionAccessList
	11, // 10: coinbase.chainstorage.EthereumTransaction.flattened_traces:type_name -> coinbase.chainstorage.EthereumTransactionFlattenedTrace
	19, // 11: coinbase.chainstorage.EthereumTransaction.block_timestamp:type_name -> google.protobuf.Timestamp
	9,  // 12: coinbase.chainstorage.EthereumTransactionReceipt.logs:type_name -> coinbase.chainstorage.EthereumEventLog
	18, // 13: coinbase.chainstorage.EthereumTransactionReceipt.l1_fee_info:type_name -> coinbase.chainstorage.EthereumTransactionReceipt.L1FeeInfo
	10, // 14: coinbase.chainstorage.EthereumTransactionTrace.calls:type_name -> coinbase.chainstorage.EthereumTransactionTrace
	13, // 15: coinbase.chainstorage.EthereumTokenTransfer.erc20:type_name -> coinbase.chainstorage.ERC20TokenTransfer
	14, // 16: coinbase.chainstorage.EthereumTokenTransfer.erc721:type_name -> coinbase.chainstorage.ERC721TokenTransfer
	17, // [17:17] is the sub-list for method output_type
	17, // [17:17] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_coinbase_chainstorage_blockchain_ethereum_proto_init() }
func file_coinbase_chainstorage_blockchain_ethereum_proto_init() {
	if File_coinbase_chainstorage_blockchain_ethereum_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_coinbase_chainstorage_blockchain_ethereum_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EthereumBlobdata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_ethereum_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolygonExtraData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_ethereum_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EthereumBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_ethereum_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EthereumWithdrawal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_ethereum_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EthereumHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_ethereum_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EthereumTransactionAccess); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_ethereum_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EthereumTransactionAccessList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_ethereum_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EthereumTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_ethereum_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EthereumTransactionReceipt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_ethereum_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EthereumEventLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_ethereum_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EthereumTransactionTrace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_ethereum_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EthereumTransactionFlattenedTrace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_ethereum_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EthereumTokenTransfer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_ethereum_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ERC20TokenTransfer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_ethereum_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ERC721TokenTransfer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_ethereum_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EthereumAccountStateProof); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_ethereum_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EthereumExtraInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_ethereum_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EthereumAccountStateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_ethereum_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EthereumTransactionReceipt_L1FeeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_coinbase_chainstorage_blockchain_ethereum_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*EthereumBlobdata_Polygon)(nil),
	}
	file_coinbase_chainstorage_blockchain_ethereum_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*EthereumHeader_BaseFeePerGas)(nil),
		(*EthereumHeader_Author)(nil),
	}
	file_coinbase_chainstorage_blockchain_ethereum_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*EthereumTransaction_MaxFeePerGas)(nil),
		(*EthereumTransaction_MaxPriorityFeePerGas)(nil),
		(*EthereumTransaction_TransactionAccessList)(nil),
		(*EthereumTransaction_PriorityFeePerGas)(nil),
		(*EthereumTransaction_Mint)(nil),
		(*EthereumTransaction_ChainId)(nil),
	}
	file_coinbase_chainstorage_blockchain_ethereum_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*EthereumTransactionReceipt_Status)(nil),
		(*EthereumTransactionReceipt_L1FeeInfo_)(nil),
		(*EthereumTransactionReceipt_DepositNonce)(nil),
		(*EthereumTransactionReceipt_DepositReceiptVersion)(nil),
	}
	file_coinbase_chainstorage_blockchain_ethereum_proto_msgTypes[12].OneofWrappers = []interface{}{
		(*EthereumTokenTransfer_Erc20)(nil),
		(*EthereumTokenTransfer_Erc721)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_coinbase_chainstorage_blockchain_ethereum_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_coinbase_chainstorage_blockchain_ethereum_proto_goTypes,
		DependencyIndexes: file_coinbase_chainstorage_blockchain_ethereum_proto_depIdxs,
		MessageInfos:      file_coinbase_chainstorage_blockchain_ethereum_proto_msgTypes,
	}.Build()
	File_coinbase_chainstorage_blockchain_ethereum_proto = out.File
	file_coinbase_chainstorage_blockchain_ethereum_proto_rawDesc = nil
	file_coinbase_chainstorage_blockchain_ethereum_proto_goTypes = nil
	file_coinbase_chainstorage_blockchain_ethereum_proto_depIdxs = nil
}
