// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        v4.25.2
// source: coinbase/chainstorage/api.proto

package chainstorage

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Compression int32

const (
	// No compression applied.
	Compression_NONE Compression = 0
	// Compressed using gzip.
	Compression_GZIP Compression = 1
)

// Enum value maps for Compression.
var (
	Compression_name = map[int32]string{
		0: "NONE",
		1: "GZIP",
	}
	Compression_value = map[string]int32{
		"NONE": 0,
		"GZIP": 1,
	}
)

func (x Compression) Enum() *Compression {
	p := new(Compression)
	*p = x
	return p
}

func (x Compression) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Compression) Descriptor() protoreflect.EnumDescriptor {
	return file_coinbase_chainstorage_api_proto_enumTypes[0].Descriptor()
}

func (Compression) Type() protoreflect.EnumType {
	return &file_coinbase_chainstorage_api_proto_enumTypes[0]
}

func (x Compression) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Compression.Descriptor instead.
func (Compression) EnumDescriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_api_proto_rawDescGZIP(), []int{0}
}

type InitialPosition int32

const (
	InitialPosition_EARLIEST InitialPosition = 0
	InitialPosition_LATEST   InitialPosition = 1
)

// Enum value maps for InitialPosition.
var (
	InitialPosition_name = map[int32]string{
		0: "EARLIEST",
		1: "LATEST",
	}
	InitialPosition_value = map[string]int32{
		"EARLIEST": 0,
		"LATEST":   1,
	}
)

func (x InitialPosition) Enum() *InitialPosition {
	p := new(InitialPosition)
	*p = x
	return p
}

func (x InitialPosition) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InitialPosition) Descriptor() protoreflect.EnumDescriptor {
	return file_coinbase_chainstorage_api_proto_enumTypes[1].Descriptor()
}

func (InitialPosition) Type() protoreflect.EnumType {
	return &file_coinbase_chainstorage_api_proto_enumTypes[1]
}

func (x InitialPosition) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InitialPosition.Descriptor instead.
func (InitialPosition) EnumDescriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_api_proto_rawDescGZIP(), []int{1}
}

type BlockchainEvent_Type int32

const (
	BlockchainEvent_UNKNOWN BlockchainEvent_Type = 0
	// Events that indicate a block was added to the corresponding chain.
	BlockchainEvent_BLOCK_ADDED BlockchainEvent_Type = 1
	// Events that indicate an existing block
	// was removed from the corresponding chain due to reorg.
	BlockchainEvent_BLOCK_REMOVED BlockchainEvent_Type = 2
)

// Enum value maps for BlockchainEvent_Type.
var (
	BlockchainEvent_Type_name = map[int32]string{
		0: "UNKNOWN",
		1: "BLOCK_ADDED",
		2: "BLOCK_REMOVED",
	}
	BlockchainEvent_Type_value = map[string]int32{
		"UNKNOWN":       0,
		"BLOCK_ADDED":   1,
		"BLOCK_REMOVED": 2,
	}
)

func (x BlockchainEvent_Type) Enum() *BlockchainEvent_Type {
	p := new(BlockchainEvent_Type)
	*p = x
	return p
}

func (x BlockchainEvent_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BlockchainEvent_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_coinbase_chainstorage_api_proto_enumTypes[2].Descriptor()
}

func (BlockchainEvent_Type) Type() protoreflect.EnumType {
	return &file_coinbase_chainstorage_api_proto_enumTypes[2]
}

func (x BlockchainEvent_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BlockchainEvent_Type.Descriptor instead.
func (BlockchainEvent_Type) EnumDescriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_api_proto_rawDescGZIP(), []int{1, 0}
}

type BlockFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tag            uint32                 `protobuf:"varint,1,opt,name=tag,proto3" json:"tag,omitempty"`
	Hash           string                 `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
	ParentHash     string                 `protobuf:"bytes,3,opt,name=parent_hash,json=parentHash,proto3" json:"parent_hash,omitempty"`
	Height         uint64                 `protobuf:"varint,4,opt,name=height,proto3" json:"height,omitempty"`
	FileUrl        string                 `protobuf:"bytes,5,opt,name=file_url,json=fileUrl,proto3" json:"file_url,omitempty"`
	ParentHeight   uint64                 `protobuf:"varint,6,opt,name=parent_height,json=parentHeight,proto3" json:"parent_height,omitempty"`
	Skipped        bool                   `protobuf:"varint,7,opt,name=skipped,proto3" json:"skipped,omitempty"`
	Compression    Compression            `protobuf:"varint,8,opt,name=compression,proto3,enum=coinbase.chainstorage.Compression" json:"compression,omitempty"`
	BlockTimestamp *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=block_timestamp,json=blockTimestamp,proto3" json:"block_timestamp,omitempty"`
}

func (x *BlockFile) Reset() {
	*x = BlockFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_api_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockFile) ProtoMessage() {}

func (x *BlockFile) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_api_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockFile.ProtoReflect.Descriptor instead.
func (*BlockFile) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_api_proto_rawDescGZIP(), []int{0}
}

func (x *BlockFile) GetTag() uint32 {
	if x != nil {
		return x.Tag
	}
	return 0
}

func (x *BlockFile) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *BlockFile) GetParentHash() string {
	if x != nil {
		return x.ParentHash
	}
	return ""
}

func (x *BlockFile) GetHeight() uint64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *BlockFile) GetFileUrl() string {
	if x != nil {
		return x.FileUrl
	}
	return ""
}

func (x *BlockFile) GetParentHeight() uint64 {
	if x != nil {
		return x.ParentHeight
	}
	return 0
}

func (x *BlockFile) GetSkipped() bool {
	if x != nil {
		return x.Skipped
	}
	return false
}

func (x *BlockFile) GetCompression() Compression {
	if x != nil {
		return x.Compression
	}
	return Compression_NONE
}

func (x *BlockFile) GetBlockTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.BlockTimestamp
	}
	return nil
}

type BlockchainEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deprecated: Use sequence_num (int64) instead.
	//
	// Deprecated: Marked as deprecated in coinbase/chainstorage/api.proto.
	Sequence string `protobuf:"bytes,1,opt,name=sequence,proto3" json:"sequence,omitempty"`
	// BLOCK_ADDED or BLOCK_REMOVED.
	Type BlockchainEvent_Type `protobuf:"varint,2,opt,name=type,proto3,enum=coinbase.chainstorage.BlockchainEvent_Type" json:"type,omitempty"`
	// Block metadata that includes all the immutable information
	// needed for consumers to call SDK/APIs to retrieve block data.
	Block *BlockIdentifier `protobuf:"bytes,3,opt,name=block,proto3" json:"block,omitempty"`
	// Streaming event version.
	EventTag uint32 `protobuf:"varint,4,opt,name=event_tag,json=eventTag,proto3" json:"event_tag,omitempty"`
	// The sequence number for this event.
	// To process the events exactly once, consumers should keep track of the last sequence_num it has processed and then specify it in the next API request.
	SequenceNum int64 `protobuf:"varint,5,opt,name=sequence_num,json=sequenceNum,proto3" json:"sequence_num,omitempty"`
}

func (x *BlockchainEvent) Reset() {
	*x = BlockchainEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_api_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockchainEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockchainEvent) ProtoMessage() {}

func (x *BlockchainEvent) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_api_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockchainEvent.ProtoReflect.Descriptor instead.
func (*BlockchainEvent) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_api_proto_rawDescGZIP(), []int{1}
}

// Deprecated: Marked as deprecated in coinbase/chainstorage/api.proto.
func (x *BlockchainEvent) GetSequence() string {
	if x != nil {
		return x.Sequence
	}
	return ""
}

func (x *BlockchainEvent) GetType() BlockchainEvent_Type {
	if x != nil {
		return x.Type
	}
	return BlockchainEvent_UNKNOWN
}

func (x *BlockchainEvent) GetBlock() *BlockIdentifier {
	if x != nil {
		return x.Block
	}
	return nil
}

func (x *BlockchainEvent) GetEventTag() uint32 {
	if x != nil {
		return x.EventTag
	}
	return 0
}

func (x *BlockchainEvent) GetSequenceNum() int64 {
	if x != nil {
		return x.SequenceNum
	}
	return 0
}

type GetLatestBlockRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tag uint32 `protobuf:"varint,1,opt,name=tag,proto3" json:"tag,omitempty"`
}

func (x *GetLatestBlockRequest) Reset() {
	*x = GetLatestBlockRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_api_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLatestBlockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLatestBlockRequest) ProtoMessage() {}

func (x *GetLatestBlockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_api_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLatestBlockRequest.ProtoReflect.Descriptor instead.
func (*GetLatestBlockRequest) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_api_proto_rawDescGZIP(), []int{2}
}

func (x *GetLatestBlockRequest) GetTag() uint32 {
	if x != nil {
		return x.Tag
	}
	return 0
}

type GetLatestBlockResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tag        uint32                 `protobuf:"varint,1,opt,name=tag,proto3" json:"tag,omitempty"`
	Hash       string                 `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
	ParentHash string                 `protobuf:"bytes,3,opt,name=parent_hash,json=parentHash,proto3" json:"parent_hash,omitempty"`
	Height     uint64                 `protobuf:"varint,4,opt,name=height,proto3" json:"height,omitempty"`
	Timestamp  *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *GetLatestBlockResponse) Reset() {
	*x = GetLatestBlockResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_api_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLatestBlockResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLatestBlockResponse) ProtoMessage() {}

func (x *GetLatestBlockResponse) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_api_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLatestBlockResponse.ProtoReflect.Descriptor instead.
func (*GetLatestBlockResponse) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_api_proto_rawDescGZIP(), []int{3}
}

func (x *GetLatestBlockResponse) GetTag() uint32 {
	if x != nil {
		return x.Tag
	}
	return 0
}

func (x *GetLatestBlockResponse) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *GetLatestBlockResponse) GetParentHash() string {
	if x != nil {
		return x.ParentHash
	}
	return ""
}

func (x *GetLatestBlockResponse) GetHeight() uint64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *GetLatestBlockResponse) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

type GetBlockFileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tag    uint32 `protobuf:"varint,1,opt,name=tag,proto3" json:"tag,omitempty"`
	Height uint64 `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
	Hash   string `protobuf:"bytes,3,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (x *GetBlockFileRequest) Reset() {
	*x = GetBlockFileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_api_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBlockFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlockFileRequest) ProtoMessage() {}

func (x *GetBlockFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_api_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlockFileRequest.ProtoReflect.Descriptor instead.
func (*GetBlockFileRequest) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_api_proto_rawDescGZIP(), []int{4}
}

func (x *GetBlockFileRequest) GetTag() uint32 {
	if x != nil {
		return x.Tag
	}
	return 0
}

func (x *GetBlockFileRequest) GetHeight() uint64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *GetBlockFileRequest) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

type GetBlockFileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	File *BlockFile `protobuf:"bytes,1,opt,name=file,proto3" json:"file,omitempty"`
}

func (x *GetBlockFileResponse) Reset() {
	*x = GetBlockFileResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_api_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBlockFileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlockFileResponse) ProtoMessage() {}

func (x *GetBlockFileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_api_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlockFileResponse.ProtoReflect.Descriptor instead.
func (*GetBlockFileResponse) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_api_proto_rawDescGZIP(), []int{5}
}

func (x *GetBlockFileResponse) GetFile() *BlockFile {
	if x != nil {
		return x.File
	}
	return nil
}

type GetBlockFilesByRangeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tag         uint32 `protobuf:"varint,1,opt,name=tag,proto3" json:"tag,omitempty"`
	StartHeight uint64 `protobuf:"varint,2,opt,name=start_height,json=startHeight,proto3" json:"start_height,omitempty"`
	EndHeight   uint64 `protobuf:"varint,3,opt,name=end_height,json=endHeight,proto3" json:"end_height,omitempty"`
}

func (x *GetBlockFilesByRangeRequest) Reset() {
	*x = GetBlockFilesByRangeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_api_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBlockFilesByRangeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlockFilesByRangeRequest) ProtoMessage() {}

func (x *GetBlockFilesByRangeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_api_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlockFilesByRangeRequest.ProtoReflect.Descriptor instead.
func (*GetBlockFilesByRangeRequest) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_api_proto_rawDescGZIP(), []int{6}
}

func (x *GetBlockFilesByRangeRequest) GetTag() uint32 {
	if x != nil {
		return x.Tag
	}
	return 0
}

func (x *GetBlockFilesByRangeRequest) GetStartHeight() uint64 {
	if x != nil {
		return x.StartHeight
	}
	return 0
}

func (x *GetBlockFilesByRangeRequest) GetEndHeight() uint64 {
	if x != nil {
		return x.EndHeight
	}
	return 0
}

type GetBlockFilesByRangeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Files []*BlockFile `protobuf:"bytes,1,rep,name=files,proto3" json:"files,omitempty"`
}

func (x *GetBlockFilesByRangeResponse) Reset() {
	*x = GetBlockFilesByRangeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_api_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBlockFilesByRangeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlockFilesByRangeResponse) ProtoMessage() {}

func (x *GetBlockFilesByRangeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_api_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlockFilesByRangeResponse.ProtoReflect.Descriptor instead.
func (*GetBlockFilesByRangeResponse) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_api_proto_rawDescGZIP(), []int{7}
}

func (x *GetBlockFilesByRangeResponse) GetFiles() []*BlockFile {
	if x != nil {
		return x.Files
	}
	return nil
}

type GetRawBlockRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tag    uint32 `protobuf:"varint,1,opt,name=tag,proto3" json:"tag,omitempty"`
	Height uint64 `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
	Hash   string `protobuf:"bytes,3,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (x *GetRawBlockRequest) Reset() {
	*x = GetRawBlockRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_api_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRawBlockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRawBlockRequest) ProtoMessage() {}

func (x *GetRawBlockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_api_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRawBlockRequest.ProtoReflect.Descriptor instead.
func (*GetRawBlockRequest) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_api_proto_rawDescGZIP(), []int{8}
}

func (x *GetRawBlockRequest) GetTag() uint32 {
	if x != nil {
		return x.Tag
	}
	return 0
}

func (x *GetRawBlockRequest) GetHeight() uint64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *GetRawBlockRequest) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

type GetRawBlockResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Block *Block `protobuf:"bytes,1,opt,name=block,proto3" json:"block,omitempty"`
}

func (x *GetRawBlockResponse) Reset() {
	*x = GetRawBlockResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_api_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRawBlockResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRawBlockResponse) ProtoMessage() {}

func (x *GetRawBlockResponse) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_api_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRawBlockResponse.ProtoReflect.Descriptor instead.
func (*GetRawBlockResponse) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_api_proto_rawDescGZIP(), []int{9}
}

func (x *GetRawBlockResponse) GetBlock() *Block {
	if x != nil {
		return x.Block
	}
	return nil
}

type GetRawBlocksByRangeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tag         uint32 `protobuf:"varint,1,opt,name=tag,proto3" json:"tag,omitempty"`
	StartHeight uint64 `protobuf:"varint,2,opt,name=start_height,json=startHeight,proto3" json:"start_height,omitempty"`
	EndHeight   uint64 `protobuf:"varint,3,opt,name=end_height,json=endHeight,proto3" json:"end_height,omitempty"`
}

func (x *GetRawBlocksByRangeRequest) Reset() {
	*x = GetRawBlocksByRangeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_api_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRawBlocksByRangeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRawBlocksByRangeRequest) ProtoMessage() {}

func (x *GetRawBlocksByRangeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_api_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRawBlocksByRangeRequest.ProtoReflect.Descriptor instead.
func (*GetRawBlocksByRangeRequest) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_api_proto_rawDescGZIP(), []int{10}
}

func (x *GetRawBlocksByRangeRequest) GetTag() uint32 {
	if x != nil {
		return x.Tag
	}
	return 0
}

func (x *GetRawBlocksByRangeRequest) GetStartHeight() uint64 {
	if x != nil {
		return x.StartHeight
	}
	return 0
}

func (x *GetRawBlocksByRangeRequest) GetEndHeight() uint64 {
	if x != nil {
		return x.EndHeight
	}
	return 0
}

type GetRawBlocksByRangeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Blocks []*Block `protobuf:"bytes,1,rep,name=blocks,proto3" json:"blocks,omitempty"`
}

func (x *GetRawBlocksByRangeResponse) Reset() {
	*x = GetRawBlocksByRangeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_api_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRawBlocksByRangeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRawBlocksByRangeResponse) ProtoMessage() {}

func (x *GetRawBlocksByRangeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_api_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRawBlocksByRangeResponse.ProtoReflect.Descriptor instead.
func (*GetRawBlocksByRangeResponse) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_api_proto_rawDescGZIP(), []int{11}
}

func (x *GetRawBlocksByRangeResponse) GetBlocks() []*Block {
	if x != nil {
		return x.Blocks
	}
	return nil
}

type GetNativeBlockRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tag    uint32 `protobuf:"varint,1,opt,name=tag,proto3" json:"tag,omitempty"`
	Height uint64 `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
	Hash   string `protobuf:"bytes,3,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (x *GetNativeBlockRequest) Reset() {
	*x = GetNativeBlockRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_api_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNativeBlockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNativeBlockRequest) ProtoMessage() {}

func (x *GetNativeBlockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_api_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNativeBlockRequest.ProtoReflect.Descriptor instead.
func (*GetNativeBlockRequest) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_api_proto_rawDescGZIP(), []int{12}
}

func (x *GetNativeBlockRequest) GetTag() uint32 {
	if x != nil {
		return x.Tag
	}
	return 0
}

func (x *GetNativeBlockRequest) GetHeight() uint64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *GetNativeBlockRequest) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

type GetNativeBlockResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Block *NativeBlock `protobuf:"bytes,1,opt,name=block,proto3" json:"block,omitempty"`
}

func (x *GetNativeBlockResponse) Reset() {
	*x = GetNativeBlockResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_api_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNativeBlockResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNativeBlockResponse) ProtoMessage() {}

func (x *GetNativeBlockResponse) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_api_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNativeBlockResponse.ProtoReflect.Descriptor instead.
func (*GetNativeBlockResponse) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_api_proto_rawDescGZIP(), []int{13}
}

func (x *GetNativeBlockResponse) GetBlock() *NativeBlock {
	if x != nil {
		return x.Block
	}
	return nil
}

type GetNativeBlocksByRangeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tag         uint32 `protobuf:"varint,1,opt,name=tag,proto3" json:"tag,omitempty"`
	StartHeight uint64 `protobuf:"varint,2,opt,name=start_height,json=startHeight,proto3" json:"start_height,omitempty"`
	EndHeight   uint64 `protobuf:"varint,3,opt,name=end_height,json=endHeight,proto3" json:"end_height,omitempty"`
}

func (x *GetNativeBlocksByRangeRequest) Reset() {
	*x = GetNativeBlocksByRangeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_api_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNativeBlocksByRangeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNativeBlocksByRangeRequest) ProtoMessage() {}

func (x *GetNativeBlocksByRangeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_api_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNativeBlocksByRangeRequest.ProtoReflect.Descriptor instead.
func (*GetNativeBlocksByRangeRequest) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_api_proto_rawDescGZIP(), []int{14}
}

func (x *GetNativeBlocksByRangeRequest) GetTag() uint32 {
	if x != nil {
		return x.Tag
	}
	return 0
}

func (x *GetNativeBlocksByRangeRequest) GetStartHeight() uint64 {
	if x != nil {
		return x.StartHeight
	}
	return 0
}

func (x *GetNativeBlocksByRangeRequest) GetEndHeight() uint64 {
	if x != nil {
		return x.EndHeight
	}
	return 0
}

type GetNativeBlocksByRangeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Blocks []*NativeBlock `protobuf:"bytes,1,rep,name=blocks,proto3" json:"blocks,omitempty"`
}

func (x *GetNativeBlocksByRangeResponse) Reset() {
	*x = GetNativeBlocksByRangeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_api_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNativeBlocksByRangeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNativeBlocksByRangeResponse) ProtoMessage() {}

func (x *GetNativeBlocksByRangeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_api_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNativeBlocksByRangeResponse.ProtoReflect.Descriptor instead.
func (*GetNativeBlocksByRangeResponse) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_api_proto_rawDescGZIP(), []int{15}
}

func (x *GetNativeBlocksByRangeResponse) GetBlocks() []*NativeBlock {
	if x != nil {
		return x.Blocks
	}
	return nil
}

type GetRosettaBlockRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tag    uint32 `protobuf:"varint,1,opt,name=tag,proto3" json:"tag,omitempty"`
	Height uint64 `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
	Hash   string `protobuf:"bytes,3,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (x *GetRosettaBlockRequest) Reset() {
	*x = GetRosettaBlockRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_api_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRosettaBlockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRosettaBlockRequest) ProtoMessage() {}

func (x *GetRosettaBlockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_api_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRosettaBlockRequest.ProtoReflect.Descriptor instead.
func (*GetRosettaBlockRequest) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_api_proto_rawDescGZIP(), []int{16}
}

func (x *GetRosettaBlockRequest) GetTag() uint32 {
	if x != nil {
		return x.Tag
	}
	return 0
}

func (x *GetRosettaBlockRequest) GetHeight() uint64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *GetRosettaBlockRequest) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

type GetRosettaBlockResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Block *RosettaBlock `protobuf:"bytes,1,opt,name=block,proto3" json:"block,omitempty"`
}

func (x *GetRosettaBlockResponse) Reset() {
	*x = GetRosettaBlockResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_api_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRosettaBlockResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRosettaBlockResponse) ProtoMessage() {}

func (x *GetRosettaBlockResponse) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_api_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRosettaBlockResponse.ProtoReflect.Descriptor instead.
func (*GetRosettaBlockResponse) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_api_proto_rawDescGZIP(), []int{17}
}

func (x *GetRosettaBlockResponse) GetBlock() *RosettaBlock {
	if x != nil {
		return x.Block
	}
	return nil
}

type GetRosettaBlocksByRangeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tag         uint32 `protobuf:"varint,1,opt,name=tag,proto3" json:"tag,omitempty"`
	StartHeight uint64 `protobuf:"varint,2,opt,name=start_height,json=startHeight,proto3" json:"start_height,omitempty"`
	EndHeight   uint64 `protobuf:"varint,3,opt,name=end_height,json=endHeight,proto3" json:"end_height,omitempty"`
}

func (x *GetRosettaBlocksByRangeRequest) Reset() {
	*x = GetRosettaBlocksByRangeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_api_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRosettaBlocksByRangeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRosettaBlocksByRangeRequest) ProtoMessage() {}

func (x *GetRosettaBlocksByRangeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_api_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRosettaBlocksByRangeRequest.ProtoReflect.Descriptor instead.
func (*GetRosettaBlocksByRangeRequest) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_api_proto_rawDescGZIP(), []int{18}
}

func (x *GetRosettaBlocksByRangeRequest) GetTag() uint32 {
	if x != nil {
		return x.Tag
	}
	return 0
}

func (x *GetRosettaBlocksByRangeRequest) GetStartHeight() uint64 {
	if x != nil {
		return x.StartHeight
	}
	return 0
}

func (x *GetRosettaBlocksByRangeRequest) GetEndHeight() uint64 {
	if x != nil {
		return x.EndHeight
	}
	return 0
}

type GetRosettaBlocksByRangeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Blocks []*RosettaBlock `protobuf:"bytes,1,rep,name=blocks,proto3" json:"blocks,omitempty"`
}

func (x *GetRosettaBlocksByRangeResponse) Reset() {
	*x = GetRosettaBlocksByRangeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_api_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRosettaBlocksByRangeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRosettaBlocksByRangeResponse) ProtoMessage() {}

func (x *GetRosettaBlocksByRangeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_api_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRosettaBlocksByRangeResponse.ProtoReflect.Descriptor instead.
func (*GetRosettaBlocksByRangeResponse) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_api_proto_rawDescGZIP(), []int{19}
}

func (x *GetRosettaBlocksByRangeResponse) GetBlocks() []*RosettaBlock {
	if x != nil {
		return x.Blocks
	}
	return nil
}

type ChainEventsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Indicates the initial cursor to start streaming events from when the sequence field is not set.
	// Setting this fields as a uint64 value (as string) will start the stream from the first event involved for a given block height.
	// Setting this field as InitialPosition_LATEST will start the stream from the latest event.
	// Setting this field as InitialPosition_EARLIEST will start the stream from the earliest event.
	// If sequence is set, cursor will start from sequence + 1.
	InitialPositionInStream string `protobuf:"bytes,1,opt,name=initial_position_in_stream,json=initialPositionInStream,proto3" json:"initial_position_in_stream,omitempty"`
	// Deprecated: Use sequence_num (int64) instead.
	//
	// Deprecated: Marked as deprecated in coinbase/chainstorage/api.proto.
	Sequence string `protobuf:"bytes,2,opt,name=sequence,proto3" json:"sequence,omitempty"`
	// Indicates the streaming version.
	// If not set, it's 0.
	EventTag uint32 `protobuf:"varint,3,opt,name=event_tag,json=eventTag,proto3" json:"event_tag,omitempty"`
	// Please set this value to be last processed sequence_num so we will stream events after that to you.
	// If neither initial_position_in_stream nor sequence_num is set, we will stream from the earliest event.
	SequenceNum int64 `protobuf:"varint,4,opt,name=sequence_num,json=sequenceNum,proto3" json:"sequence_num,omitempty"`
}

func (x *ChainEventsRequest) Reset() {
	*x = ChainEventsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_api_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChainEventsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChainEventsRequest) ProtoMessage() {}

func (x *ChainEventsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_api_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChainEventsRequest.ProtoReflect.Descriptor instead.
func (*ChainEventsRequest) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_api_proto_rawDescGZIP(), []int{20}
}

func (x *ChainEventsRequest) GetInitialPositionInStream() string {
	if x != nil {
		return x.InitialPositionInStream
	}
	return ""
}

// Deprecated: Marked as deprecated in coinbase/chainstorage/api.proto.
func (x *ChainEventsRequest) GetSequence() string {
	if x != nil {
		return x.Sequence
	}
	return ""
}

func (x *ChainEventsRequest) GetEventTag() uint32 {
	if x != nil {
		return x.EventTag
	}
	return 0
}

func (x *ChainEventsRequest) GetSequenceNum() int64 {
	if x != nil {
		return x.SequenceNum
	}
	return 0
}

type ChainEventsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Event *BlockchainEvent `protobuf:"bytes,1,opt,name=event,proto3" json:"event,omitempty"`
}

func (x *ChainEventsResponse) Reset() {
	*x = ChainEventsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_api_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChainEventsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChainEventsResponse) ProtoMessage() {}

func (x *ChainEventsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_api_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChainEventsResponse.ProtoReflect.Descriptor instead.
func (*ChainEventsResponse) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_api_proto_rawDescGZIP(), []int{21}
}

func (x *ChainEventsResponse) GetEvent() *BlockchainEvent {
	if x != nil {
		return x.Event
	}
	return nil
}

type GetChainEventsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deprecated: Use sequence_num (int64) instead.
	//
	// Deprecated: Marked as deprecated in coinbase/chainstorage/api.proto.
	Sequence                string `protobuf:"bytes,1,opt,name=sequence,proto3" json:"sequence,omitempty"`
	InitialPositionInStream string `protobuf:"bytes,2,opt,name=initial_position_in_stream,json=initialPositionInStream,proto3" json:"initial_position_in_stream,omitempty"`
	MaxNumEvents            uint64 `protobuf:"varint,3,opt,name=max_num_events,json=maxNumEvents,proto3" json:"max_num_events,omitempty"`
	EventTag                uint32 `protobuf:"varint,4,opt,name=event_tag,json=eventTag,proto3" json:"event_tag,omitempty"`
	SequenceNum             int64  `protobuf:"varint,5,opt,name=sequence_num,json=sequenceNum,proto3" json:"sequence_num,omitempty"`
}

func (x *GetChainEventsRequest) Reset() {
	*x = GetChainEventsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_api_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChainEventsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChainEventsRequest) ProtoMessage() {}

func (x *GetChainEventsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_api_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChainEventsRequest.ProtoReflect.Descriptor instead.
func (*GetChainEventsRequest) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_api_proto_rawDescGZIP(), []int{22}
}

// Deprecated: Marked as deprecated in coinbase/chainstorage/api.proto.
func (x *GetChainEventsRequest) GetSequence() string {
	if x != nil {
		return x.Sequence
	}
	return ""
}

func (x *GetChainEventsRequest) GetInitialPositionInStream() string {
	if x != nil {
		return x.InitialPositionInStream
	}
	return ""
}

func (x *GetChainEventsRequest) GetMaxNumEvents() uint64 {
	if x != nil {
		return x.MaxNumEvents
	}
	return 0
}

func (x *GetChainEventsRequest) GetEventTag() uint32 {
	if x != nil {
		return x.EventTag
	}
	return 0
}

func (x *GetChainEventsRequest) GetSequenceNum() int64 {
	if x != nil {
		return x.SequenceNum
	}
	return 0
}

type GetChainEventsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Events []*BlockchainEvent `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"`
}

func (x *GetChainEventsResponse) Reset() {
	*x = GetChainEventsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_api_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChainEventsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChainEventsResponse) ProtoMessage() {}

func (x *GetChainEventsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_api_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChainEventsResponse.ProtoReflect.Descriptor instead.
func (*GetChainEventsResponse) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_api_proto_rawDescGZIP(), []int{23}
}

func (x *GetChainEventsResponse) GetEvents() []*BlockchainEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

type GetChainMetadataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetChainMetadataRequest) Reset() {
	*x = GetChainMetadataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_api_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChainMetadataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChainMetadataRequest) ProtoMessage() {}

func (x *GetChainMetadataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_api_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChainMetadataRequest.ProtoReflect.Descriptor instead.
func (*GetChainMetadataRequest) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_api_proto_rawDescGZIP(), []int{24}
}

type GetChainMetadataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LatestBlockTag       uint32 `protobuf:"varint,8,opt,name=latest_block_tag,json=latestBlockTag,proto3" json:"latest_block_tag,omitempty"`
	StableBlockTag       uint32 `protobuf:"varint,9,opt,name=stable_block_tag,json=stableBlockTag,proto3" json:"stable_block_tag,omitempty"`
	LatestEventTag       uint32 `protobuf:"varint,10,opt,name=latest_event_tag,json=latestEventTag,proto3" json:"latest_event_tag,omitempty"`
	StableEventTag       uint32 `protobuf:"varint,11,opt,name=stable_event_tag,json=stableEventTag,proto3" json:"stable_event_tag,omitempty"`
	BlockStartHeight     uint64 `protobuf:"varint,12,opt,name=block_start_height,json=blockStartHeight,proto3" json:"block_start_height,omitempty"`
	IrreversibleDistance uint64 `protobuf:"varint,13,opt,name=irreversible_distance,json=irreversibleDistance,proto3" json:"irreversible_distance,omitempty"`
	BlockTime            string `protobuf:"bytes,14,opt,name=block_time,json=blockTime,proto3" json:"block_time,omitempty"`
}

func (x *GetChainMetadataResponse) Reset() {
	*x = GetChainMetadataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_api_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChainMetadataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChainMetadataResponse) ProtoMessage() {}

func (x *GetChainMetadataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_api_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChainMetadataResponse.ProtoReflect.Descriptor instead.
func (*GetChainMetadataResponse) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_api_proto_rawDescGZIP(), []int{25}
}

func (x *GetChainMetadataResponse) GetLatestBlockTag() uint32 {
	if x != nil {
		return x.LatestBlockTag
	}
	return 0
}

func (x *GetChainMetadataResponse) GetStableBlockTag() uint32 {
	if x != nil {
		return x.StableBlockTag
	}
	return 0
}

func (x *GetChainMetadataResponse) GetLatestEventTag() uint32 {
	if x != nil {
		return x.LatestEventTag
	}
	return 0
}

func (x *GetChainMetadataResponse) GetStableEventTag() uint32 {
	if x != nil {
		return x.StableEventTag
	}
	return 0
}

func (x *GetChainMetadataResponse) GetBlockStartHeight() uint64 {
	if x != nil {
		return x.BlockStartHeight
	}
	return 0
}

func (x *GetChainMetadataResponse) GetIrreversibleDistance() uint64 {
	if x != nil {
		return x.IrreversibleDistance
	}
	return 0
}

func (x *GetChainMetadataResponse) GetBlockTime() string {
	if x != nil {
		return x.BlockTime
	}
	return ""
}

type GetVersionedChainEventRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// stream event tag of the known event
	FromEventTag uint32 `protobuf:"varint,1,opt,name=from_event_tag,json=fromEventTag,proto3" json:"from_event_tag,omitempty"`
	// Use from_sequence_num (int64) instead.
	//
	// Deprecated: Marked as deprecated in coinbase/chainstorage/api.proto.
	FromSequence string `protobuf:"bytes,2,opt,name=from_sequence,json=fromSequence,proto3" json:"from_sequence,omitempty"`
	// stream event tag in which the new corresponding event want to be found
	ToEventTag uint32 `protobuf:"varint,3,opt,name=to_event_tag,json=toEventTag,proto3" json:"to_event_tag,omitempty"`
	// sequence of the known event
	FromSequenceNum int64 `protobuf:"varint,4,opt,name=from_sequence_num,json=fromSequenceNum,proto3" json:"from_sequence_num,omitempty"`
}

func (x *GetVersionedChainEventRequest) Reset() {
	*x = GetVersionedChainEventRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_api_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVersionedChainEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVersionedChainEventRequest) ProtoMessage() {}

func (x *GetVersionedChainEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_api_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVersionedChainEventRequest.ProtoReflect.Descriptor instead.
func (*GetVersionedChainEventRequest) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_api_proto_rawDescGZIP(), []int{26}
}

func (x *GetVersionedChainEventRequest) GetFromEventTag() uint32 {
	if x != nil {
		return x.FromEventTag
	}
	return 0
}

// Deprecated: Marked as deprecated in coinbase/chainstorage/api.proto.
func (x *GetVersionedChainEventRequest) GetFromSequence() string {
	if x != nil {
		return x.FromSequence
	}
	return ""
}

func (x *GetVersionedChainEventRequest) GetToEventTag() uint32 {
	if x != nil {
		return x.ToEventTag
	}
	return 0
}

func (x *GetVersionedChainEventRequest) GetFromSequenceNum() int64 {
	if x != nil {
		return x.FromSequenceNum
	}
	return 0
}

type GetVersionedChainEventResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Event *BlockchainEvent `protobuf:"bytes,1,opt,name=event,proto3" json:"event,omitempty"`
}

func (x *GetVersionedChainEventResponse) Reset() {
	*x = GetVersionedChainEventResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_api_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVersionedChainEventResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVersionedChainEventResponse) ProtoMessage() {}

func (x *GetVersionedChainEventResponse) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_api_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVersionedChainEventResponse.ProtoReflect.Descriptor instead.
func (*GetVersionedChainEventResponse) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_api_proto_rawDescGZIP(), []int{27}
}

func (x *GetVersionedChainEventResponse) GetEvent() *BlockchainEvent {
	if x != nil {
		return x.Event
	}
	return nil
}

type GetBlockByTransactionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tag             uint32 `protobuf:"varint,1,opt,name=tag,proto3" json:"tag,omitempty"`
	TransactionHash string `protobuf:"bytes,2,opt,name=transaction_hash,json=transactionHash,proto3" json:"transaction_hash,omitempty"`
}

func (x *GetBlockByTransactionRequest) Reset() {
	*x = GetBlockByTransactionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_api_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBlockByTransactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlockByTransactionRequest) ProtoMessage() {}

func (x *GetBlockByTransactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_api_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlockByTransactionRequest.ProtoReflect.Descriptor instead.
func (*GetBlockByTransactionRequest) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_api_proto_rawDescGZIP(), []int{28}
}

func (x *GetBlockByTransactionRequest) GetTag() uint32 {
	if x != nil {
		return x.Tag
	}
	return 0
}

func (x *GetBlockByTransactionRequest) GetTransactionHash() string {
	if x != nil {
		return x.TransactionHash
	}
	return ""
}

type GetBlockByTransactionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A transaction may exist in multiple blocks for some networks.
	// In most of the cases, it should only belong to one block.
	Blocks []*BlockIdentifier `protobuf:"bytes,1,rep,name=blocks,proto3" json:"blocks,omitempty"`
}

func (x *GetBlockByTransactionResponse) Reset() {
	*x = GetBlockByTransactionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_api_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBlockByTransactionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlockByTransactionResponse) ProtoMessage() {}

func (x *GetBlockByTransactionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_api_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlockByTransactionResponse.ProtoReflect.Descriptor instead.
func (*GetBlockByTransactionResponse) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_api_proto_rawDescGZIP(), []int{29}
}

func (x *GetBlockByTransactionResponse) GetBlocks() []*BlockIdentifier {
	if x != nil {
		return x.Blocks
	}
	return nil
}

type GetNativeTransactionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tag             uint32 `protobuf:"varint,1,opt,name=tag,proto3" json:"tag,omitempty"`
	TransactionHash string `protobuf:"bytes,2,opt,name=transaction_hash,json=transactionHash,proto3" json:"transaction_hash,omitempty"`
}

func (x *GetNativeTransactionRequest) Reset() {
	*x = GetNativeTransactionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_api_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNativeTransactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNativeTransactionRequest) ProtoMessage() {}

func (x *GetNativeTransactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_api_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNativeTransactionRequest.ProtoReflect.Descriptor instead.
func (*GetNativeTransactionRequest) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_api_proto_rawDescGZIP(), []int{30}
}

func (x *GetNativeTransactionRequest) GetTag() uint32 {
	if x != nil {
		return x.Tag
	}
	return 0
}

func (x *GetNativeTransactionRequest) GetTransactionHash() string {
	if x != nil {
		return x.TransactionHash
	}
	return ""
}

type GetNativeTransactionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A transaction may exist in multiple blocks for some networks.
	// In most of the cases, it should only belong to one block.
	Transactions []*NativeTransaction `protobuf:"bytes,1,rep,name=transactions,proto3" json:"transactions,omitempty"`
}

func (x *GetNativeTransactionResponse) Reset() {
	*x = GetNativeTransactionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_api_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNativeTransactionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNativeTransactionResponse) ProtoMessage() {}

func (x *GetNativeTransactionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_api_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNativeTransactionResponse.ProtoReflect.Descriptor instead.
func (*GetNativeTransactionResponse) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_api_proto_rawDescGZIP(), []int{31}
}

func (x *GetNativeTransactionResponse) GetTransactions() []*NativeTransaction {
	if x != nil {
		return x.Transactions
	}
	return nil
}

type GetVerifiedAccountStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Req *InternalGetVerifiedAccountStateRequest `protobuf:"bytes,1,opt,name=req,proto3" json:"req,omitempty"`
}

func (x *GetVerifiedAccountStateRequest) Reset() {
	*x = GetVerifiedAccountStateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_api_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVerifiedAccountStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVerifiedAccountStateRequest) ProtoMessage() {}

func (x *GetVerifiedAccountStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_api_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVerifiedAccountStateRequest.ProtoReflect.Descriptor instead.
func (*GetVerifiedAccountStateRequest) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_api_proto_rawDescGZIP(), []int{32}
}

func (x *GetVerifiedAccountStateRequest) GetReq() *InternalGetVerifiedAccountStateRequest {
	if x != nil {
		return x.Req
	}
	return nil
}

type GetVerifiedAccountStateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response *ValidateAccountStateResponse `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *GetVerifiedAccountStateResponse) Reset() {
	*x = GetVerifiedAccountStateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_api_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVerifiedAccountStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVerifiedAccountStateResponse) ProtoMessage() {}

func (x *GetVerifiedAccountStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_api_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVerifiedAccountStateResponse.ProtoReflect.Descriptor instead.
func (*GetVerifiedAccountStateResponse) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_api_proto_rawDescGZIP(), []int{33}
}

func (x *GetVerifiedAccountStateResponse) GetResponse() *ValidateAccountStateResponse {
	if x != nil {
		return x.Response
	}
	return nil
}

var File_coinbase_chainstorage_api_proto protoreflect.FileDescriptor

var file_coinbase_chainstorage_api_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x15, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x26, 0x63, 0x6f, 0x69, 0x6e, 0x62,
	0x61, 0x73, 0x65, 0x2f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xcf, 0x02, 0x0a, 0x09, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x46, 0x69, 0x6c, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x74, 0x61,
	0x67, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f,
	0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x19,
	0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0c, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x73, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x12, 0x44, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e,
	0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x43,
	0x0a, 0x0f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x22, 0xa9, 0x02, 0x0a, 0x0f, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x08, 0x73,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x3f, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65,
	0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3c, 0x0a, 0x05, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52,
	0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x74, 0x61, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x54, 0x61, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f,
	0x6e, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x73, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x22, 0x37, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b,
	0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x42,
	0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x41, 0x44, 0x44, 0x45, 0x44, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d,
	0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x44, 0x10, 0x02, 0x22,
	0x29, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x74, 0x61, 0x67, 0x22, 0xb1, 0x01, 0x0a, 0x16, 0x47,
	0x65, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x16, 0x0a, 0x06,
	0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x68, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x53,
	0x0a, 0x13, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68,
	0x61, 0x73, 0x68, 0x22, 0x4c, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x46,
	0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x04, 0x66,
	0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x69, 0x6e,
	0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x04, 0x66, 0x69, 0x6c,
	0x65, 0x22, 0x71, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x46, 0x69, 0x6c,
	0x65, 0x73, 0x42, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x74,
	0x61, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x68, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x48,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x6e, 0x64, 0x5f, 0x68, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x65, 0x6e, 0x64, 0x48, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x22, 0x56, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x46, 0x69, 0x6c, 0x65, 0x73, 0x42, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x22, 0x52, 0x0a, 0x12,
	0x47, 0x65, 0x74, 0x52, 0x61, 0x77, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x03, 0x74, 0x61, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68,
	0x22, 0x49, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x52, 0x61, 0x77, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x70, 0x0a, 0x1a, 0x47,
	0x65, 0x74, 0x52, 0x61, 0x77, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x42, 0x79, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x65, 0x6e, 0x64, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x65, 0x6e, 0x64, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x53, 0x0a,
	0x1b, 0x47, 0x65, 0x74, 0x52, 0x61, 0x77, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x42, 0x79, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x06,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63,
	0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x06, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x73, 0x22, 0x55, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x74,
	0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x16, 0x0a,
	0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x68,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x22, 0x52, 0x0a, 0x16, 0x47, 0x65, 0x74,
	0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x4e, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x73, 0x0a,
	0x1d, 0x47, 0x65, 0x74, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73,
	0x42, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10,
	0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x74, 0x61, 0x67,
	0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x48, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x6e, 0x64, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x65, 0x6e, 0x64, 0x48, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x22, 0x5c, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x42, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x4e, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73,
	0x22, 0x56, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x73, 0x65, 0x74, 0x74, 0x61, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61,
	0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x16, 0x0a, 0x06,
	0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x68, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x22, 0x54, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x52,
	0x6f, 0x73, 0x65, 0x74, 0x74, 0x61, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x52, 0x6f, 0x73, 0x65, 0x74,
	0x74, 0x61, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x74,
	0x0a, 0x1e, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x73, 0x65, 0x74, 0x74, 0x61, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x73, 0x42, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x74,
	0x61, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x68, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x48,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x6e, 0x64, 0x5f, 0x68, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x65, 0x6e, 0x64, 0x48, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x22, 0x5e, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x73, 0x65, 0x74,
	0x74, 0x61, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x42, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e,
	0x52, 0x6f, 0x73, 0x65, 0x74, 0x74, 0x61, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x06, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x73, 0x22, 0xb1, 0x01, 0x0a, 0x12, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x1a, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x6e, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x17, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x1e, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x08,
	0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x54, 0x61, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x73, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x22, 0x53, 0x0a, 0x13, 0x43, 0x68, 0x61, 0x69,
	0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3c, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x22, 0xda, 0x01,
	0x0a, 0x15, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x08, 0x73,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x3b, 0x0a, 0x1a, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x61, 0x6c, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x5f, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x5f, 0x6e, 0x75, 0x6d, 0x5f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x6d, 0x61,
	0x78, 0x4e, 0x75, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x73,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x22, 0x58, 0x0a, 0x16, 0x47, 0x65,
	0x74, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x22, 0x19, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x69, 0x6e,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0xc4, 0x02, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x10,
	0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x61, 0x67,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x54, 0x61, 0x67, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0e, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x61, 0x67,
	0x12, 0x28, 0x0a, 0x10, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x5f, 0x74, 0x61, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6c, 0x61, 0x74, 0x65,
	0x73, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x67, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x54, 0x61, 0x67, 0x12, 0x2c, 0x0a, 0x12, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x10, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x72, 0x74, 0x48, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x12, 0x33, 0x0a, 0x15, 0x69, 0x72, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x69, 0x62,
	0x6c, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x14, 0x69, 0x72, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x44,
	0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xbc, 0x01, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x66, 0x72, 0x6f, 0x6d,
	0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x67, 0x12, 0x27,
	0x0a, 0x0d, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x53,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x74, 0x6f, 0x5f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74,
	0x6f, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x67, 0x12, 0x2a, 0x0a, 0x11, 0x66, 0x72, 0x6f,
	0x6d, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x66, 0x72, 0x6f, 0x6d, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x4e, 0x75, 0x6d, 0x22, 0x5e, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x65, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x05,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x22, 0x5b, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x42, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61,
	0x73, 0x68, 0x22, 0x5f, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x79,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x06, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x73, 0x22, 0x5a, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x03, 0x74, 0x61, 0x67, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x22,
	0x6c, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x4c, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65,
	0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x4e, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x71, 0x0a,
	0x1e, 0x47, 0x65, 0x74, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x4f, 0x0a, 0x03, 0x72, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x63,
	0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x47, 0x65, 0x74,
	0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x03, 0x72, 0x65, 0x71,
	0x22, 0x72, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65,
	0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2a, 0x21, 0x0a, 0x0b, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x08, 0x0a,
	0x04, 0x47, 0x5a, 0x49, 0x50, 0x10, 0x01, 0x2a, 0x2b, 0x0a, 0x0f, 0x49, 0x6e, 0x69, 0x74, 0x69,
	0x61, 0x6c, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x41,
	0x52, 0x4c, 0x49, 0x45, 0x53, 0x54, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4c, 0x41, 0x54, 0x45,
	0x53, 0x54, 0x10, 0x01, 0x32, 0xaa, 0x0f, 0x0a, 0x0c, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x6d, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65,
	0x73, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x2c, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e,
	0x47, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65,
	0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x47, 0x65,
	0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x67, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x46, 0x69, 0x6c, 0x65, 0x12, 0x2a, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x47, 0x65, 0x74,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2b, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7f, 0x0a,
	0x14, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x42, 0x79,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x32, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65,
	0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x47, 0x65,
	0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x42, 0x79, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x63, 0x6f, 0x69, 0x6e,
	0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x42,
	0x79, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x64,
	0x0a, 0x0b, 0x47, 0x65, 0x74, 0x52, 0x61, 0x77, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x29, 0x2e,
	0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x61, 0x77, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2e, 0x47, 0x65, 0x74, 0x52, 0x61, 0x77, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7c, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x52, 0x61, 0x77, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x73, 0x42, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x31, 0x2e, 0x63, 0x6f,
	0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x61, 0x77, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73,
	0x42, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32,
	0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x61, 0x77, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x73, 0x42, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x6d, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x2c, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x47, 0x65, 0x74,
	0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x85, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x42, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x34, 0x2e, 0x63,
	0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x73, 0x42, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x35, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x42, 0x79, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x70, 0x0a, 0x0f, 0x47, 0x65, 0x74,
	0x52, 0x6f, 0x73, 0x65, 0x74, 0x74, 0x61, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x2d, 0x2e, 0x63,
	0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x73, 0x65, 0x74, 0x74, 0x61, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x63, 0x6f,
	0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x73, 0x65, 0x74, 0x74, 0x61, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x88, 0x01, 0x0a, 0x17,
	0x47, 0x65, 0x74, 0x52, 0x6f, 0x73, 0x65, 0x74, 0x74, 0x61, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73,
	0x42, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x35, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e,
	0x47, 0x65, 0x74, 0x52, 0x6f, 0x73, 0x65, 0x74, 0x74, 0x61, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73,
	0x42, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36,
	0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x73, 0x65, 0x74, 0x74,
	0x61, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x42, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6c, 0x0a, 0x11, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x43, 0x68, 0x61, 0x69, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x29, 0x2e, 0x63, 0x6f,
	0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x43,
	0x68, 0x61, 0x69, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x30, 0x01, 0x12, 0x6d, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x69, 0x6e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x2c, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x47,
	0x65, 0x74, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x47, 0x65, 0x74,
	0x43, 0x68, 0x61, 0x69, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x73, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2e, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e,
	0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e,
	0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x85, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x34, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x63, 0x6f, 0x69, 0x6e,
	0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x43, 0x68,
	0x61, 0x69, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x82, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x79, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x2e, 0x63, 0x6f, 0x69,
	0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x79, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x34, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x42, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7f, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x4e, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x2e,
	0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x33, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x88, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x56, 0x65,
	0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x35, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x65,
	0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x63, 0x6f, 0x69, 0x6e,
	0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x42, 0x3f, 0x5a, 0x3d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x69,
	0x6e, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_coinbase_chainstorage_api_proto_rawDescOnce sync.Once
	file_coinbase_chainstorage_api_proto_rawDescData = file_coinbase_chainstorage_api_proto_rawDesc
)

func file_coinbase_chainstorage_api_proto_rawDescGZIP() []byte {
	file_coinbase_chainstorage_api_proto_rawDescOnce.Do(func() {
		file_coinbase_chainstorage_api_proto_rawDescData = protoimpl.X.CompressGZIP(file_coinbase_chainstorage_api_proto_rawDescData)
	})
	return file_coinbase_chainstorage_api_proto_rawDescData
}

var file_coinbase_chainstorage_api_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_coinbase_chainstorage_api_proto_msgTypes = make([]protoimpl.MessageInfo, 34)
var file_coinbase_chainstorage_api_proto_goTypes = []interface{}{
	(Compression)(0),                               // 0: coinbase.chainstorage.Compression
	(InitialPosition)(0),                           // 1: coinbase.chainstorage.InitialPosition
	(BlockchainEvent_Type)(0),                      // 2: coinbase.chainstorage.BlockchainEvent.Type
	(*BlockFile)(nil),                              // 3: coinbase.chainstorage.BlockFile
	(*BlockchainEvent)(nil),                        // 4: coinbase.chainstorage.BlockchainEvent
	(*GetLatestBlockRequest)(nil),                  // 5: coinbase.chainstorage.GetLatestBlockRequest
	(*GetLatestBlockResponse)(nil),                 // 6: coinbase.chainstorage.GetLatestBlockResponse
	(*GetBlockFileRequest)(nil),                    // 7: coinbase.chainstorage.GetBlockFileRequest
	(*GetBlockFileResponse)(nil),                   // 8: coinbase.chainstorage.GetBlockFileResponse
	(*GetBlockFilesByRangeRequest)(nil),            // 9: coinbase.chainstorage.GetBlockFilesByRangeRequest
	(*GetBlockFilesByRangeResponse)(nil),           // 10: coinbase.chainstorage.GetBlockFilesByRangeResponse
	(*GetRawBlockRequest)(nil),                     // 11: coinbase.chainstorage.GetRawBlockRequest
	(*GetRawBlockResponse)(nil),                    // 12: coinbase.chainstorage.GetRawBlockResponse
	(*GetRawBlocksByRangeRequest)(nil),             // 13: coinbase.chainstorage.GetRawBlocksByRangeRequest
	(*GetRawBlocksByRangeResponse)(nil),            // 14: coinbase.chainstorage.GetRawBlocksByRangeResponse
	(*GetNativeBlockRequest)(nil),                  // 15: coinbase.chainstorage.GetNativeBlockRequest
	(*GetNativeBlockResponse)(nil),                 // 16: coinbase.chainstorage.GetNativeBlockResponse
	(*GetNativeBlocksByRangeRequest)(nil),          // 17: coinbase.chainstorage.GetNativeBlocksByRangeRequest
	(*GetNativeBlocksByRangeResponse)(nil),         // 18: coinbase.chainstorage.GetNativeBlocksByRangeResponse
	(*GetRosettaBlockRequest)(nil),                 // 19: coinbase.chainstorage.GetRosettaBlockRequest
	(*GetRosettaBlockResponse)(nil),                // 20: coinbase.chainstorage.GetRosettaBlockResponse
	(*GetRosettaBlocksByRangeRequest)(nil),         // 21: coinbase.chainstorage.GetRosettaBlocksByRangeRequest
	(*GetRosettaBlocksByRangeResponse)(nil),        // 22: coinbase.chainstorage.GetRosettaBlocksByRangeResponse
	(*ChainEventsRequest)(nil),                     // 23: coinbase.chainstorage.ChainEventsRequest
	(*ChainEventsResponse)(nil),                    // 24: coinbase.chainstorage.ChainEventsResponse
	(*GetChainEventsRequest)(nil),                  // 25: coinbase.chainstorage.GetChainEventsRequest
	(*GetChainEventsResponse)(nil),                 // 26: coinbase.chainstorage.GetChainEventsResponse
	(*GetChainMetadataRequest)(nil),                // 27: coinbase.chainstorage.GetChainMetadataRequest
	(*GetChainMetadataResponse)(nil),               // 28: coinbase.chainstorage.GetChainMetadataResponse
	(*GetVersionedChainEventRequest)(nil),          // 29: coinbase.chainstorage.GetVersionedChainEventRequest
	(*GetVersionedChainEventResponse)(nil),         // 30: coinbase.chainstorage.GetVersionedChainEventResponse
	(*GetBlockByTransactionRequest)(nil),           // 31: coinbase.chainstorage.GetBlockByTransactionRequest
	(*GetBlockByTransactionResponse)(nil),          // 32: coinbase.chainstorage.GetBlockByTransactionResponse
	(*GetNativeTransactionRequest)(nil),            // 33: coinbase.chainstorage.GetNativeTransactionRequest
	(*GetNativeTransactionResponse)(nil),           // 34: coinbase.chainstorage.GetNativeTransactionResponse
	(*GetVerifiedAccountStateRequest)(nil),         // 35: coinbase.chainstorage.GetVerifiedAccountStateRequest
	(*GetVerifiedAccountStateResponse)(nil),        // 36: coinbase.chainstorage.GetVerifiedAccountStateResponse
	(*timestamppb.Timestamp)(nil),                  // 37: google.protobuf.Timestamp
	(*BlockIdentifier)(nil),                        // 38: coinbase.chainstorage.BlockIdentifier
	(*Block)(nil),                                  // 39: coinbase.chainstorage.Block
	(*NativeBlock)(nil),                            // 40: coinbase.chainstorage.NativeBlock
	(*RosettaBlock)(nil),                           // 41: coinbase.chainstorage.RosettaBlock
	(*NativeTransaction)(nil),                      // 42: coinbase.chainstorage.NativeTransaction
	(*InternalGetVerifiedAccountStateRequest)(nil), // 43: coinbase.chainstorage.InternalGetVerifiedAccountStateRequest
	(*ValidateAccountStateResponse)(nil),           // 44: coinbase.chainstorage.ValidateAccountStateResponse
}
var file_coinbase_chainstorage_api_proto_depIdxs = []int32{
	0,  // 0: coinbase.chainstorage.BlockFile.compression:type_name -> coinbase.chainstorage.Compression
	37, // 1: coinbase.chainstorage.BlockFile.block_timestamp:type_name -> google.protobuf.Timestamp
	2,  // 2: coinbase.chainstorage.BlockchainEvent.type:type_name -> coinbase.chainstorage.BlockchainEvent.Type
	38, // 3: coinbase.chainstorage.BlockchainEvent.block:type_name -> coinbase.chainstorage.BlockIdentifier
	37, // 4: coinbase.chainstorage.GetLatestBlockResponse.timestamp:type_name -> google.protobuf.Timestamp
	3,  // 5: coinbase.chainstorage.GetBlockFileResponse.file:type_name -> coinbase.chainstorage.BlockFile
	3,  // 6: coinbase.chainstorage.GetBlockFilesByRangeResponse.files:type_name -> coinbase.chainstorage.BlockFile
	39, // 7: coinbase.chainstorage.GetRawBlockResponse.block:type_name -> coinbase.chainstorage.Block
	39, // 8: coinbase.chainstorage.GetRawBlocksByRangeResponse.blocks:type_name -> coinbase.chainstorage.Block
	40, // 9: coinbase.chainstorage.GetNativeBlockResponse.block:type_name -> coinbase.chainstorage.NativeBlock
	40, // 10: coinbase.chainstorage.GetNativeBlocksByRangeResponse.blocks:type_name -> coinbase.chainstorage.NativeBlock
	41, // 11: coinbase.chainstorage.GetRosettaBlockResponse.block:type_name -> coinbase.chainstorage.RosettaBlock
	41, // 12: coinbase.chainstorage.GetRosettaBlocksByRangeResponse.blocks:type_name -> coinbase.chainstorage.RosettaBlock
	4,  // 13: coinbase.chainstorage.ChainEventsResponse.event:type_name -> coinbase.chainstorage.BlockchainEvent
	4,  // 14: coinbase.chainstorage.GetChainEventsResponse.events:type_name -> coinbase.chainstorage.BlockchainEvent
	4,  // 15: coinbase.chainstorage.GetVersionedChainEventResponse.event:type_name -> coinbase.chainstorage.BlockchainEvent
	38, // 16: coinbase.chainstorage.GetBlockByTransactionResponse.blocks:type_name -> coinbase.chainstorage.BlockIdentifier
	42, // 17: coinbase.chainstorage.GetNativeTransactionResponse.transactions:type_name -> coinbase.chainstorage.NativeTransaction
	43, // 18: coinbase.chainstorage.GetVerifiedAccountStateRequest.req:type_name -> coinbase.chainstorage.InternalGetVerifiedAccountStateRequest
	44, // 19: coinbase.chainstorage.GetVerifiedAccountStateResponse.response:type_name -> coinbase.chainstorage.ValidateAccountStateResponse
	5,  // 20: coinbase.chainstorage.ChainStorage.GetLatestBlock:input_type -> coinbase.chainstorage.GetLatestBlockRequest
	7,  // 21: coinbase.chainstorage.ChainStorage.GetBlockFile:input_type -> coinbase.chainstorage.GetBlockFileRequest
	9,  // 22: coinbase.chainstorage.ChainStorage.GetBlockFilesByRange:input_type -> coinbase.chainstorage.GetBlockFilesByRangeRequest
	11, // 23: coinbase.chainstorage.ChainStorage.GetRawBlock:input_type -> coinbase.chainstorage.GetRawBlockRequest
	13, // 24: coinbase.chainstorage.ChainStorage.GetRawBlocksByRange:input_type -> coinbase.chainstorage.GetRawBlocksByRangeRequest
	15, // 25: coinbase.chainstorage.ChainStorage.GetNativeBlock:input_type -> coinbase.chainstorage.GetNativeBlockRequest
	17, // 26: coinbase.chainstorage.ChainStorage.GetNativeBlocksByRange:input_type -> coinbase.chainstorage.GetNativeBlocksByRangeRequest
	19, // 27: coinbase.chainstorage.ChainStorage.GetRosettaBlock:input_type -> coinbase.chainstorage.GetRosettaBlockRequest
	21, // 28: coinbase.chainstorage.ChainStorage.GetRosettaBlocksByRange:input_type -> coinbase.chainstorage.GetRosettaBlocksByRangeRequest
	23, // 29: coinbase.chainstorage.ChainStorage.StreamChainEvents:input_type -> coinbase.chainstorage.ChainEventsRequest
	25, // 30: coinbase.chainstorage.ChainStorage.GetChainEvents:input_type -> coinbase.chainstorage.GetChainEventsRequest
	27, // 31: coinbase.chainstorage.ChainStorage.GetChainMetadata:input_type -> coinbase.chainstorage.GetChainMetadataRequest
	29, // 32: coinbase.chainstorage.ChainStorage.GetVersionedChainEvent:input_type -> coinbase.chainstorage.GetVersionedChainEventRequest
	31, // 33: coinbase.chainstorage.ChainStorage.GetBlockByTransaction:input_type -> coinbase.chainstorage.GetBlockByTransactionRequest
	33, // 34: coinbase.chainstorage.ChainStorage.GetNativeTransaction:input_type -> coinbase.chainstorage.GetNativeTransactionRequest
	35, // 35: coinbase.chainstorage.ChainStorage.GetVerifiedAccountState:input_type -> coinbase.chainstorage.GetVerifiedAccountStateRequest
	6,  // 36: coinbase.chainstorage.ChainStorage.GetLatestBlock:output_type -> coinbase.chainstorage.GetLatestBlockResponse
	8,  // 37: coinbase.chainstorage.ChainStorage.GetBlockFile:output_type -> coinbase.chainstorage.GetBlockFileResponse
	10, // 38: coinbase.chainstorage.ChainStorage.GetBlockFilesByRange:output_type -> coinbase.chainstorage.GetBlockFilesByRangeResponse
	12, // 39: coinbase.chainstorage.ChainStorage.GetRawBlock:output_type -> coinbase.chainstorage.GetRawBlockResponse
	14, // 40: coinbase.chainstorage.ChainStorage.GetRawBlocksByRange:output_type -> coinbase.chainstorage.GetRawBlocksByRangeResponse
	16, // 41: coinbase.chainstorage.ChainStorage.GetNativeBlock:output_type -> coinbase.chainstorage.GetNativeBlockResponse
	18, // 42: coinbase.chainstorage.ChainStorage.GetNativeBlocksByRange:output_type -> coinbase.chainstorage.GetNativeBlocksByRangeResponse
	20, // 43: coinbase.chainstorage.ChainStorage.GetRosettaBlock:output_type -> coinbase.chainstorage.GetRosettaBlockResponse
	22, // 44: coinbase.chainstorage.ChainStorage.GetRosettaBlocksByRange:output_type -> coinbase.chainstorage.GetRosettaBlocksByRangeResponse
	24, // 45: coinbase.chainstorage.ChainStorage.StreamChainEvents:output_type -> coinbase.chainstorage.ChainEventsResponse
	26, // 46: coinbase.chainstorage.ChainStorage.GetChainEvents:output_type -> coinbase.chainstorage.GetChainEventsResponse
	28, // 47: coinbase.chainstorage.ChainStorage.GetChainMetadata:output_type -> coinbase.chainstorage.GetChainMetadataResponse
	30, // 48: coinbase.chainstorage.ChainStorage.GetVersionedChainEvent:output_type -> coinbase.chainstorage.GetVersionedChainEventResponse
	32, // 49: coinbase.chainstorage.ChainStorage.GetBlockByTransaction:output_type -> coinbase.chainstorage.GetBlockByTransactionResponse
	34, // 50: coinbase.chainstorage.ChainStorage.GetNativeTransaction:output_type -> coinbase.chainstorage.GetNativeTransactionResponse
	36, // 51: coinbase.chainstorage.ChainStorage.GetVerifiedAccountState:output_type -> coinbase.chainstorage.GetVerifiedAccountStateResponse
	36, // [36:52] is the sub-list for method output_type
	20, // [20:36] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_coinbase_chainstorage_api_proto_init() }
func file_coinbase_chainstorage_api_proto_init() {
	if File_coinbase_chainstorage_api_proto != nil {
		return
	}
	file_coinbase_chainstorage_blockchain_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_coinbase_chainstorage_api_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_api_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockchainEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_api_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLatestBlockRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_api_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLatestBlockResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_api_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBlockFileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_api_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBlockFileResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_api_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBlockFilesByRangeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_api_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBlockFilesByRangeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_api_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRawBlockRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_api_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRawBlockResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_api_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRawBlocksByRangeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_api_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRawBlocksByRangeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_api_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNativeBlockRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_api_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNativeBlockResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_api_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNativeBlocksByRangeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_api_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNativeBlocksByRangeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_api_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRosettaBlockRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_api_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRosettaBlockResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_api_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRosettaBlocksByRangeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_api_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRosettaBlocksByRangeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_api_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChainEventsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_api_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChainEventsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_api_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChainEventsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_api_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChainEventsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_api_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChainMetadataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_api_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChainMetadataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_api_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVersionedChainEventRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_api_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVersionedChainEventResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_api_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBlockByTransactionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_api_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBlockByTransactionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_api_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNativeTransactionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_api_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNativeTransactionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_api_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVerifiedAccountStateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_api_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVerifiedAccountStateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_coinbase_chainstorage_api_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   34,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_coinbase_chainstorage_api_proto_goTypes,
		DependencyIndexes: file_coinbase_chainstorage_api_proto_depIdxs,
		EnumInfos:         file_coinbase_chainstorage_api_proto_enumTypes,
		MessageInfos:      file_coinbase_chainstorage_api_proto_msgTypes,
	}.Build()
	File_coinbase_chainstorage_api_proto = out.File
	file_coinbase_chainstorage_api_proto_rawDesc = nil
	file_coinbase_chainstorage_api_proto_goTypes = nil
	file_coinbase_chainstorage_api_proto_depIdxs = nil
}
