// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        v4.25.3
// source: coinbase/chainstorage/blockchain_solana.proto

package chainstorage

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SolanaProgram int32

const (
	SolanaProgram_RAW                          SolanaProgram = 0
	SolanaProgram_ADDRESS_LOOKUP_TABLE         SolanaProgram = 1
	SolanaProgram_BPF_Loader                   SolanaProgram = 2
	SolanaProgram_BPF_UPGRADEABLE_Loader       SolanaProgram = 3
	SolanaProgram_VOTE                         SolanaProgram = 4
	SolanaProgram_SYSTEM                       SolanaProgram = 5
	SolanaProgram_STAKE                        SolanaProgram = 6
	SolanaProgram_SPL_MEMO                     SolanaProgram = 7
	SolanaProgram_SPL_TOKEN                    SolanaProgram = 8
	SolanaProgram_SPL_TOKEN_2022               SolanaProgram = 9
	SolanaProgram_SPL_ASSOCIATED_TOKEN_ACCOUNT SolanaProgram = 10
	SolanaProgram_UNPARSED                     SolanaProgram = 11
)

// Enum value maps for SolanaProgram.
var (
	SolanaProgram_name = map[int32]string{
		0:  "RAW",
		1:  "ADDRESS_LOOKUP_TABLE",
		2:  "BPF_Loader",
		3:  "BPF_UPGRADEABLE_Loader",
		4:  "VOTE",
		5:  "SYSTEM",
		6:  "STAKE",
		7:  "SPL_MEMO",
		8:  "SPL_TOKEN",
		9:  "SPL_TOKEN_2022",
		10: "SPL_ASSOCIATED_TOKEN_ACCOUNT",
		11: "UNPARSED",
	}
	SolanaProgram_value = map[string]int32{
		"RAW":                          0,
		"ADDRESS_LOOKUP_TABLE":         1,
		"BPF_Loader":                   2,
		"BPF_UPGRADEABLE_Loader":       3,
		"VOTE":                         4,
		"SYSTEM":                       5,
		"STAKE":                        6,
		"SPL_MEMO":                     7,
		"SPL_TOKEN":                    8,
		"SPL_TOKEN_2022":               9,
		"SPL_ASSOCIATED_TOKEN_ACCOUNT": 10,
		"UNPARSED":                     11,
	}
)

func (x SolanaProgram) Enum() *SolanaProgram {
	p := new(SolanaProgram)
	*p = x
	return p
}

func (x SolanaProgram) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SolanaProgram) Descriptor() protoreflect.EnumDescriptor {
	return file_coinbase_chainstorage_blockchain_solana_proto_enumTypes[0].Descriptor()
}

func (SolanaProgram) Type() protoreflect.EnumType {
	return &file_coinbase_chainstorage_blockchain_solana_proto_enumTypes[0]
}

func (x SolanaProgram) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SolanaProgram.Descriptor instead.
func (SolanaProgram) EnumDescriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_solana_proto_rawDescGZIP(), []int{0}
}

type SolanaAddressLookupTableProgram_InstructionType int32

const (
	SolanaAddressLookupTableProgram_UNKNOWN SolanaAddressLookupTableProgram_InstructionType = 0
)

// Enum value maps for SolanaAddressLookupTableProgram_InstructionType.
var (
	SolanaAddressLookupTableProgram_InstructionType_name = map[int32]string{
		0: "UNKNOWN",
	}
	SolanaAddressLookupTableProgram_InstructionType_value = map[string]int32{
		"UNKNOWN": 0,
	}
)

func (x SolanaAddressLookupTableProgram_InstructionType) Enum() *SolanaAddressLookupTableProgram_InstructionType {
	p := new(SolanaAddressLookupTableProgram_InstructionType)
	*p = x
	return p
}

func (x SolanaAddressLookupTableProgram_InstructionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SolanaAddressLookupTableProgram_InstructionType) Descriptor() protoreflect.EnumDescriptor {
	return file_coinbase_chainstorage_blockchain_solana_proto_enumTypes[1].Descriptor()
}

func (SolanaAddressLookupTableProgram_InstructionType) Type() protoreflect.EnumType {
	return &file_coinbase_chainstorage_blockchain_solana_proto_enumTypes[1]
}

func (x SolanaAddressLookupTableProgram_InstructionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SolanaAddressLookupTableProgram_InstructionType.Descriptor instead.
func (SolanaAddressLookupTableProgram_InstructionType) EnumDescriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_solana_proto_rawDescGZIP(), []int{23, 0}
}

type SolanaBpfLoaderProgram_InstructionType int32

const (
	SolanaBpfLoaderProgram_UNKNOWN SolanaBpfLoaderProgram_InstructionType = 0
)

// Enum value maps for SolanaBpfLoaderProgram_InstructionType.
var (
	SolanaBpfLoaderProgram_InstructionType_name = map[int32]string{
		0: "UNKNOWN",
	}
	SolanaBpfLoaderProgram_InstructionType_value = map[string]int32{
		"UNKNOWN": 0,
	}
)

func (x SolanaBpfLoaderProgram_InstructionType) Enum() *SolanaBpfLoaderProgram_InstructionType {
	p := new(SolanaBpfLoaderProgram_InstructionType)
	*p = x
	return p
}

func (x SolanaBpfLoaderProgram_InstructionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SolanaBpfLoaderProgram_InstructionType) Descriptor() protoreflect.EnumDescriptor {
	return file_coinbase_chainstorage_blockchain_solana_proto_enumTypes[2].Descriptor()
}

func (SolanaBpfLoaderProgram_InstructionType) Type() protoreflect.EnumType {
	return &file_coinbase_chainstorage_blockchain_solana_proto_enumTypes[2]
}

func (x SolanaBpfLoaderProgram_InstructionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SolanaBpfLoaderProgram_InstructionType.Descriptor instead.
func (SolanaBpfLoaderProgram_InstructionType) EnumDescriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_solana_proto_rawDescGZIP(), []int{24, 0}
}

type SolanaBpfUpgradeableLoaderProgram_InstructionType int32

const (
	SolanaBpfUpgradeableLoaderProgram_UNKNOWN SolanaBpfUpgradeableLoaderProgram_InstructionType = 0
)

// Enum value maps for SolanaBpfUpgradeableLoaderProgram_InstructionType.
var (
	SolanaBpfUpgradeableLoaderProgram_InstructionType_name = map[int32]string{
		0: "UNKNOWN",
	}
	SolanaBpfUpgradeableLoaderProgram_InstructionType_value = map[string]int32{
		"UNKNOWN": 0,
	}
)

func (x SolanaBpfUpgradeableLoaderProgram_InstructionType) Enum() *SolanaBpfUpgradeableLoaderProgram_InstructionType {
	p := new(SolanaBpfUpgradeableLoaderProgram_InstructionType)
	*p = x
	return p
}

func (x SolanaBpfUpgradeableLoaderProgram_InstructionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SolanaBpfUpgradeableLoaderProgram_InstructionType) Descriptor() protoreflect.EnumDescriptor {
	return file_coinbase_chainstorage_blockchain_solana_proto_enumTypes[3].Descriptor()
}

func (SolanaBpfUpgradeableLoaderProgram_InstructionType) Type() protoreflect.EnumType {
	return &file_coinbase_chainstorage_blockchain_solana_proto_enumTypes[3]
}

func (x SolanaBpfUpgradeableLoaderProgram_InstructionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SolanaBpfUpgradeableLoaderProgram_InstructionType.Descriptor instead.
func (SolanaBpfUpgradeableLoaderProgram_InstructionType) EnumDescriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_solana_proto_rawDescGZIP(), []int{25, 0}
}

type SolanaVoteProgram_InstructionType int32

const (
	SolanaVoteProgram_UNKNOWN                   SolanaVoteProgram_InstructionType = 0
	SolanaVoteProgram_INITIALIZE                SolanaVoteProgram_InstructionType = 1
	SolanaVoteProgram_VOTE                      SolanaVoteProgram_InstructionType = 2
	SolanaVoteProgram_WITHDRAW                  SolanaVoteProgram_InstructionType = 3
	SolanaVoteProgram_COMPACT_UPDATE_VOTE_STATE SolanaVoteProgram_InstructionType = 4
)

// Enum value maps for SolanaVoteProgram_InstructionType.
var (
	SolanaVoteProgram_InstructionType_name = map[int32]string{
		0: "UNKNOWN",
		1: "INITIALIZE",
		2: "VOTE",
		3: "WITHDRAW",
		4: "COMPACT_UPDATE_VOTE_STATE",
	}
	SolanaVoteProgram_InstructionType_value = map[string]int32{
		"UNKNOWN":                   0,
		"INITIALIZE":                1,
		"VOTE":                      2,
		"WITHDRAW":                  3,
		"COMPACT_UPDATE_VOTE_STATE": 4,
	}
)

func (x SolanaVoteProgram_InstructionType) Enum() *SolanaVoteProgram_InstructionType {
	p := new(SolanaVoteProgram_InstructionType)
	*p = x
	return p
}

func (x SolanaVoteProgram_InstructionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SolanaVoteProgram_InstructionType) Descriptor() protoreflect.EnumDescriptor {
	return file_coinbase_chainstorage_blockchain_solana_proto_enumTypes[4].Descriptor()
}

func (SolanaVoteProgram_InstructionType) Type() protoreflect.EnumType {
	return &file_coinbase_chainstorage_blockchain_solana_proto_enumTypes[4]
}

func (x SolanaVoteProgram_InstructionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SolanaVoteProgram_InstructionType.Descriptor instead.
func (SolanaVoteProgram_InstructionType) EnumDescriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_solana_proto_rawDescGZIP(), []int{26, 0}
}

type SolanaSystemProgram_InstructionType int32

const (
	SolanaSystemProgram_UNKNOWN                  SolanaSystemProgram_InstructionType = 0
	SolanaSystemProgram_CREATE_ACCOUNT           SolanaSystemProgram_InstructionType = 1
	SolanaSystemProgram_TRANSFER                 SolanaSystemProgram_InstructionType = 2
	SolanaSystemProgram_CREATE_ACCOUNT_WITH_SEED SolanaSystemProgram_InstructionType = 3
	SolanaSystemProgram_TRANSFER_WITH_SEED       SolanaSystemProgram_InstructionType = 4
)

// Enum value maps for SolanaSystemProgram_InstructionType.
var (
	SolanaSystemProgram_InstructionType_name = map[int32]string{
		0: "UNKNOWN",
		1: "CREATE_ACCOUNT",
		2: "TRANSFER",
		3: "CREATE_ACCOUNT_WITH_SEED",
		4: "TRANSFER_WITH_SEED",
	}
	SolanaSystemProgram_InstructionType_value = map[string]int32{
		"UNKNOWN":                  0,
		"CREATE_ACCOUNT":           1,
		"TRANSFER":                 2,
		"CREATE_ACCOUNT_WITH_SEED": 3,
		"TRANSFER_WITH_SEED":       4,
	}
)

func (x SolanaSystemProgram_InstructionType) Enum() *SolanaSystemProgram_InstructionType {
	p := new(SolanaSystemProgram_InstructionType)
	*p = x
	return p
}

func (x SolanaSystemProgram_InstructionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SolanaSystemProgram_InstructionType) Descriptor() protoreflect.EnumDescriptor {
	return file_coinbase_chainstorage_blockchain_solana_proto_enumTypes[5].Descriptor()
}

func (SolanaSystemProgram_InstructionType) Type() protoreflect.EnumType {
	return &file_coinbase_chainstorage_blockchain_solana_proto_enumTypes[5]
}

func (x SolanaSystemProgram_InstructionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SolanaSystemProgram_InstructionType.Descriptor instead.
func (SolanaSystemProgram_InstructionType) EnumDescriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_solana_proto_rawDescGZIP(), []int{27, 0}
}

type SolanaStakeProgram_InstructionType int32

const (
	SolanaStakeProgram_UNKNOWN    SolanaStakeProgram_InstructionType = 0
	SolanaStakeProgram_INITIALIZE SolanaStakeProgram_InstructionType = 1
	SolanaStakeProgram_DELEGATE   SolanaStakeProgram_InstructionType = 2
	SolanaStakeProgram_DEACTIVATE SolanaStakeProgram_InstructionType = 3
	SolanaStakeProgram_MERGE      SolanaStakeProgram_InstructionType = 4
	SolanaStakeProgram_SPLIT      SolanaStakeProgram_InstructionType = 5
	SolanaStakeProgram_WITHDRAW   SolanaStakeProgram_InstructionType = 6
)

// Enum value maps for SolanaStakeProgram_InstructionType.
var (
	SolanaStakeProgram_InstructionType_name = map[int32]string{
		0: "UNKNOWN",
		1: "INITIALIZE",
		2: "DELEGATE",
		3: "DEACTIVATE",
		4: "MERGE",
		5: "SPLIT",
		6: "WITHDRAW",
	}
	SolanaStakeProgram_InstructionType_value = map[string]int32{
		"UNKNOWN":    0,
		"INITIALIZE": 1,
		"DELEGATE":   2,
		"DEACTIVATE": 3,
		"MERGE":      4,
		"SPLIT":      5,
		"WITHDRAW":   6,
	}
)

func (x SolanaStakeProgram_InstructionType) Enum() *SolanaStakeProgram_InstructionType {
	p := new(SolanaStakeProgram_InstructionType)
	*p = x
	return p
}

func (x SolanaStakeProgram_InstructionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SolanaStakeProgram_InstructionType) Descriptor() protoreflect.EnumDescriptor {
	return file_coinbase_chainstorage_blockchain_solana_proto_enumTypes[6].Descriptor()
}

func (SolanaStakeProgram_InstructionType) Type() protoreflect.EnumType {
	return &file_coinbase_chainstorage_blockchain_solana_proto_enumTypes[6]
}

func (x SolanaStakeProgram_InstructionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SolanaStakeProgram_InstructionType.Descriptor instead.
func (SolanaStakeProgram_InstructionType) EnumDescriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_solana_proto_rawDescGZIP(), []int{28, 0}
}

type SolanaSplMemoProgram_InstructionType int32

const (
	SolanaSplMemoProgram_SPL_MEMO SolanaSplMemoProgram_InstructionType = 0
)

// Enum value maps for SolanaSplMemoProgram_InstructionType.
var (
	SolanaSplMemoProgram_InstructionType_name = map[int32]string{
		0: "SPL_MEMO",
	}
	SolanaSplMemoProgram_InstructionType_value = map[string]int32{
		"SPL_MEMO": 0,
	}
)

func (x SolanaSplMemoProgram_InstructionType) Enum() *SolanaSplMemoProgram_InstructionType {
	p := new(SolanaSplMemoProgram_InstructionType)
	*p = x
	return p
}

func (x SolanaSplMemoProgram_InstructionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SolanaSplMemoProgram_InstructionType) Descriptor() protoreflect.EnumDescriptor {
	return file_coinbase_chainstorage_blockchain_solana_proto_enumTypes[7].Descriptor()
}

func (SolanaSplMemoProgram_InstructionType) Type() protoreflect.EnumType {
	return &file_coinbase_chainstorage_blockchain_solana_proto_enumTypes[7]
}

func (x SolanaSplMemoProgram_InstructionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SolanaSplMemoProgram_InstructionType.Descriptor instead.
func (SolanaSplMemoProgram_InstructionType) EnumDescriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_solana_proto_rawDescGZIP(), []int{29, 0}
}

type SolanaSplTokenProgram_InstructionType int32

const (
	SolanaSplTokenProgram_UNKNOWN                    SolanaSplTokenProgram_InstructionType = 0
	SolanaSplTokenProgram_GET_ACCOUNT_DATA_SIZE      SolanaSplTokenProgram_InstructionType = 1
	SolanaSplTokenProgram_INITIALIZE_IMMUTABLE_OWNER SolanaSplTokenProgram_InstructionType = 2
	SolanaSplTokenProgram_TRANSFER                   SolanaSplTokenProgram_InstructionType = 3
)

// Enum value maps for SolanaSplTokenProgram_InstructionType.
var (
	SolanaSplTokenProgram_InstructionType_name = map[int32]string{
		0: "UNKNOWN",
		1: "GET_ACCOUNT_DATA_SIZE",
		2: "INITIALIZE_IMMUTABLE_OWNER",
		3: "TRANSFER",
	}
	SolanaSplTokenProgram_InstructionType_value = map[string]int32{
		"UNKNOWN":                    0,
		"GET_ACCOUNT_DATA_SIZE":      1,
		"INITIALIZE_IMMUTABLE_OWNER": 2,
		"TRANSFER":                   3,
	}
)

func (x SolanaSplTokenProgram_InstructionType) Enum() *SolanaSplTokenProgram_InstructionType {
	p := new(SolanaSplTokenProgram_InstructionType)
	*p = x
	return p
}

func (x SolanaSplTokenProgram_InstructionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SolanaSplTokenProgram_InstructionType) Descriptor() protoreflect.EnumDescriptor {
	return file_coinbase_chainstorage_blockchain_solana_proto_enumTypes[8].Descriptor()
}

func (SolanaSplTokenProgram_InstructionType) Type() protoreflect.EnumType {
	return &file_coinbase_chainstorage_blockchain_solana_proto_enumTypes[8]
}

func (x SolanaSplTokenProgram_InstructionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SolanaSplTokenProgram_InstructionType.Descriptor instead.
func (SolanaSplTokenProgram_InstructionType) EnumDescriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_solana_proto_rawDescGZIP(), []int{30, 0}
}

type SolanaSplToken2022Program_InstructionType int32

const (
	SolanaSplToken2022Program_UNKNOWN SolanaSplToken2022Program_InstructionType = 0
)

// Enum value maps for SolanaSplToken2022Program_InstructionType.
var (
	SolanaSplToken2022Program_InstructionType_name = map[int32]string{
		0: "UNKNOWN",
	}
	SolanaSplToken2022Program_InstructionType_value = map[string]int32{
		"UNKNOWN": 0,
	}
)

func (x SolanaSplToken2022Program_InstructionType) Enum() *SolanaSplToken2022Program_InstructionType {
	p := new(SolanaSplToken2022Program_InstructionType)
	*p = x
	return p
}

func (x SolanaSplToken2022Program_InstructionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SolanaSplToken2022Program_InstructionType) Descriptor() protoreflect.EnumDescriptor {
	return file_coinbase_chainstorage_blockchain_solana_proto_enumTypes[9].Descriptor()
}

func (SolanaSplToken2022Program_InstructionType) Type() protoreflect.EnumType {
	return &file_coinbase_chainstorage_blockchain_solana_proto_enumTypes[9]
}

func (x SolanaSplToken2022Program_InstructionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SolanaSplToken2022Program_InstructionType.Descriptor instead.
func (SolanaSplToken2022Program_InstructionType) EnumDescriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_solana_proto_rawDescGZIP(), []int{31, 0}
}

type SolanaSplAssociatedTokenAccountProgram_InstructionType int32

const (
	SolanaSplAssociatedTokenAccountProgram_UNKNOWN SolanaSplAssociatedTokenAccountProgram_InstructionType = 0
)

// Enum value maps for SolanaSplAssociatedTokenAccountProgram_InstructionType.
var (
	SolanaSplAssociatedTokenAccountProgram_InstructionType_name = map[int32]string{
		0: "UNKNOWN",
	}
	SolanaSplAssociatedTokenAccountProgram_InstructionType_value = map[string]int32{
		"UNKNOWN": 0,
	}
)

func (x SolanaSplAssociatedTokenAccountProgram_InstructionType) Enum() *SolanaSplAssociatedTokenAccountProgram_InstructionType {
	p := new(SolanaSplAssociatedTokenAccountProgram_InstructionType)
	*p = x
	return p
}

func (x SolanaSplAssociatedTokenAccountProgram_InstructionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SolanaSplAssociatedTokenAccountProgram_InstructionType) Descriptor() protoreflect.EnumDescriptor {
	return file_coinbase_chainstorage_blockchain_solana_proto_enumTypes[10].Descriptor()
}

func (SolanaSplAssociatedTokenAccountProgram_InstructionType) Type() protoreflect.EnumType {
	return &file_coinbase_chainstorage_blockchain_solana_proto_enumTypes[10]
}

func (x SolanaSplAssociatedTokenAccountProgram_InstructionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SolanaSplAssociatedTokenAccountProgram_InstructionType.Descriptor instead.
func (SolanaSplAssociatedTokenAccountProgram_InstructionType) EnumDescriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_solana_proto_rawDescGZIP(), []int{32, 0}
}

type SolanaBlobdata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header []byte `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
}

func (x *SolanaBlobdata) Reset() {
	*x = SolanaBlobdata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SolanaBlobdata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SolanaBlobdata) ProtoMessage() {}

func (x *SolanaBlobdata) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SolanaBlobdata.ProtoReflect.Descriptor instead.
func (*SolanaBlobdata) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_solana_proto_rawDescGZIP(), []int{0}
}

func (x *SolanaBlobdata) GetHeader() []byte {
	if x != nil {
		return x.Header
	}
	return nil
}

type SolanaBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header       *SolanaHeader        `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Transactions []*SolanaTransaction `protobuf:"bytes,2,rep,name=transactions,proto3" json:"transactions,omitempty"`
	Rewards      []*SolanaReward      `protobuf:"bytes,3,rep,name=rewards,proto3" json:"rewards,omitempty"`
}

func (x *SolanaBlock) Reset() {
	*x = SolanaBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SolanaBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SolanaBlock) ProtoMessage() {}

func (x *SolanaBlock) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SolanaBlock.ProtoReflect.Descriptor instead.
func (*SolanaBlock) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_solana_proto_rawDescGZIP(), []int{1}
}

func (x *SolanaBlock) GetHeader() *SolanaHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *SolanaBlock) GetTransactions() []*SolanaTransaction {
	if x != nil {
		return x.Transactions
	}
	return nil
}

func (x *SolanaBlock) GetRewards() []*SolanaReward {
	if x != nil {
		return x.Rewards
	}
	return nil
}

type SolanaBlockV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header       *SolanaHeader          `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Transactions []*SolanaTransactionV2 `protobuf:"bytes,2,rep,name=transactions,proto3" json:"transactions,omitempty"`
	Rewards      []*SolanaReward        `protobuf:"bytes,3,rep,name=rewards,proto3" json:"rewards,omitempty"`
}

func (x *SolanaBlockV2) Reset() {
	*x = SolanaBlockV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SolanaBlockV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SolanaBlockV2) ProtoMessage() {}

func (x *SolanaBlockV2) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SolanaBlockV2.ProtoReflect.Descriptor instead.
func (*SolanaBlockV2) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_solana_proto_rawDescGZIP(), []int{2}
}

func (x *SolanaBlockV2) GetHeader() *SolanaHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *SolanaBlockV2) GetTransactions() []*SolanaTransactionV2 {
	if x != nil {
		return x.Transactions
	}
	return nil
}

func (x *SolanaBlockV2) GetRewards() []*SolanaReward {
	if x != nil {
		return x.Rewards
	}
	return nil
}

type SolanaHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockHash         string                 `protobuf:"bytes,1,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	PreviousBlockHash string                 `protobuf:"bytes,2,opt,name=previous_block_hash,json=previousBlockHash,proto3" json:"previous_block_hash,omitempty"`
	Slot              uint64                 `protobuf:"varint,3,opt,name=slot,proto3" json:"slot,omitempty"`
	ParentSlot        uint64                 `protobuf:"varint,4,opt,name=parent_slot,json=parentSlot,proto3" json:"parent_slot,omitempty"`
	BlockTime         *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=block_time,json=blockTime,proto3" json:"block_time,omitempty"`
	BlockHeight       uint64                 `protobuf:"varint,6,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
}

func (x *SolanaHeader) Reset() {
	*x = SolanaHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SolanaHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SolanaHeader) ProtoMessage() {}

func (x *SolanaHeader) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SolanaHeader.ProtoReflect.Descriptor instead.
func (*SolanaHeader) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_solana_proto_rawDescGZIP(), []int{3}
}

func (x *SolanaHeader) GetBlockHash() string {
	if x != nil {
		return x.BlockHash
	}
	return ""
}

func (x *SolanaHeader) GetPreviousBlockHash() string {
	if x != nil {
		return x.PreviousBlockHash
	}
	return ""
}

func (x *SolanaHeader) GetSlot() uint64 {
	if x != nil {
		return x.Slot
	}
	return 0
}

func (x *SolanaHeader) GetParentSlot() uint64 {
	if x != nil {
		return x.ParentSlot
	}
	return 0
}

func (x *SolanaHeader) GetBlockTime() *timestamppb.Timestamp {
	if x != nil {
		return x.BlockTime
	}
	return nil
}

func (x *SolanaHeader) GetBlockHeight() uint64 {
	if x != nil {
		return x.BlockHeight
	}
	return 0
}

type SolanaTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionId string                    `protobuf:"bytes,1,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	Payload       *SolanaTransactionPayload `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	Meta          *SolanaTransactionMeta    `protobuf:"bytes,3,opt,name=meta,proto3" json:"meta,omitempty"`
	// use int32 for `legacy` version
	Version int32 `protobuf:"varint,4,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *SolanaTransaction) Reset() {
	*x = SolanaTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SolanaTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SolanaTransaction) ProtoMessage() {}

func (x *SolanaTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SolanaTransaction.ProtoReflect.Descriptor instead.
func (*SolanaTransaction) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_solana_proto_rawDescGZIP(), []int{4}
}

func (x *SolanaTransaction) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

func (x *SolanaTransaction) GetPayload() *SolanaTransactionPayload {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *SolanaTransaction) GetMeta() *SolanaTransactionMeta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *SolanaTransaction) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

type SolanaTransactionV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionId string                      `protobuf:"bytes,1,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	Payload       *SolanaTransactionPayloadV2 `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	Meta          *SolanaTransactionMetaV2    `protobuf:"bytes,3,opt,name=meta,proto3" json:"meta,omitempty"`
	// use int32 for `legacy` version
	Version int32 `protobuf:"varint,4,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *SolanaTransactionV2) Reset() {
	*x = SolanaTransactionV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SolanaTransactionV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SolanaTransactionV2) ProtoMessage() {}

func (x *SolanaTransactionV2) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SolanaTransactionV2.ProtoReflect.Descriptor instead.
func (*SolanaTransactionV2) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_solana_proto_rawDescGZIP(), []int{5}
}

func (x *SolanaTransactionV2) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

func (x *SolanaTransactionV2) GetPayload() *SolanaTransactionPayloadV2 {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *SolanaTransactionV2) GetMeta() *SolanaTransactionMetaV2 {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *SolanaTransactionV2) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

type SolanaTransactionMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Err               string                    `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	Fee               uint64                    `protobuf:"varint,2,opt,name=fee,proto3" json:"fee,omitempty"`
	PreBalances       []uint64                  `protobuf:"varint,3,rep,packed,name=pre_balances,json=preBalances,proto3" json:"pre_balances,omitempty"`
	PostBalances      []uint64                  `protobuf:"varint,4,rep,packed,name=post_balances,json=postBalances,proto3" json:"post_balances,omitempty"`
	PreTokenBalances  []*SolanaTokenBalance     `protobuf:"bytes,5,rep,name=pre_token_balances,json=preTokenBalances,proto3" json:"pre_token_balances,omitempty"`
	PostTokenBalances []*SolanaTokenBalance     `protobuf:"bytes,6,rep,name=post_token_balances,json=postTokenBalances,proto3" json:"post_token_balances,omitempty"`
	InnerInstructions []*SolanaInnerInstruction `protobuf:"bytes,7,rep,name=inner_instructions,json=innerInstructions,proto3" json:"inner_instructions,omitempty"`
	LogMessages       []string                  `protobuf:"bytes,8,rep,name=log_messages,json=logMessages,proto3" json:"log_messages,omitempty"`
	Rewards           []*SolanaReward           `protobuf:"bytes,9,rep,name=rewards,proto3" json:"rewards,omitempty"`
}

func (x *SolanaTransactionMeta) Reset() {
	*x = SolanaTransactionMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SolanaTransactionMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SolanaTransactionMeta) ProtoMessage() {}

func (x *SolanaTransactionMeta) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SolanaTransactionMeta.ProtoReflect.Descriptor instead.
func (*SolanaTransactionMeta) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_solana_proto_rawDescGZIP(), []int{6}
}

func (x *SolanaTransactionMeta) GetErr() string {
	if x != nil {
		return x.Err
	}
	return ""
}

func (x *SolanaTransactionMeta) GetFee() uint64 {
	if x != nil {
		return x.Fee
	}
	return 0
}

func (x *SolanaTransactionMeta) GetPreBalances() []uint64 {
	if x != nil {
		return x.PreBalances
	}
	return nil
}

func (x *SolanaTransactionMeta) GetPostBalances() []uint64 {
	if x != nil {
		return x.PostBalances
	}
	return nil
}

func (x *SolanaTransactionMeta) GetPreTokenBalances() []*SolanaTokenBalance {
	if x != nil {
		return x.PreTokenBalances
	}
	return nil
}

func (x *SolanaTransactionMeta) GetPostTokenBalances() []*SolanaTokenBalance {
	if x != nil {
		return x.PostTokenBalances
	}
	return nil
}

func (x *SolanaTransactionMeta) GetInnerInstructions() []*SolanaInnerInstruction {
	if x != nil {
		return x.InnerInstructions
	}
	return nil
}

func (x *SolanaTransactionMeta) GetLogMessages() []string {
	if x != nil {
		return x.LogMessages
	}
	return nil
}

func (x *SolanaTransactionMeta) GetRewards() []*SolanaReward {
	if x != nil {
		return x.Rewards
	}
	return nil
}

type SolanaTransactionMetaV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Err               string                      `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	Fee               uint64                      `protobuf:"varint,2,opt,name=fee,proto3" json:"fee,omitempty"`
	PreBalances       []uint64                    `protobuf:"varint,3,rep,packed,name=pre_balances,json=preBalances,proto3" json:"pre_balances,omitempty"`
	PostBalances      []uint64                    `protobuf:"varint,4,rep,packed,name=post_balances,json=postBalances,proto3" json:"post_balances,omitempty"`
	PreTokenBalances  []*SolanaTokenBalance       `protobuf:"bytes,5,rep,name=pre_token_balances,json=preTokenBalances,proto3" json:"pre_token_balances,omitempty"`
	PostTokenBalances []*SolanaTokenBalance       `protobuf:"bytes,6,rep,name=post_token_balances,json=postTokenBalances,proto3" json:"post_token_balances,omitempty"`
	InnerInstructions []*SolanaInnerInstructionV2 `protobuf:"bytes,7,rep,name=inner_instructions,json=innerInstructions,proto3" json:"inner_instructions,omitempty"`
	LogMessages       []string                    `protobuf:"bytes,8,rep,name=log_messages,json=logMessages,proto3" json:"log_messages,omitempty"`
	Rewards           []*SolanaReward             `protobuf:"bytes,9,rep,name=rewards,proto3" json:"rewards,omitempty"`
}

func (x *SolanaTransactionMetaV2) Reset() {
	*x = SolanaTransactionMetaV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SolanaTransactionMetaV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SolanaTransactionMetaV2) ProtoMessage() {}

func (x *SolanaTransactionMetaV2) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SolanaTransactionMetaV2.ProtoReflect.Descriptor instead.
func (*SolanaTransactionMetaV2) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_solana_proto_rawDescGZIP(), []int{7}
}

func (x *SolanaTransactionMetaV2) GetErr() string {
	if x != nil {
		return x.Err
	}
	return ""
}

func (x *SolanaTransactionMetaV2) GetFee() uint64 {
	if x != nil {
		return x.Fee
	}
	return 0
}

func (x *SolanaTransactionMetaV2) GetPreBalances() []uint64 {
	if x != nil {
		return x.PreBalances
	}
	return nil
}

func (x *SolanaTransactionMetaV2) GetPostBalances() []uint64 {
	if x != nil {
		return x.PostBalances
	}
	return nil
}

func (x *SolanaTransactionMetaV2) GetPreTokenBalances() []*SolanaTokenBalance {
	if x != nil {
		return x.PreTokenBalances
	}
	return nil
}

func (x *SolanaTransactionMetaV2) GetPostTokenBalances() []*SolanaTokenBalance {
	if x != nil {
		return x.PostTokenBalances
	}
	return nil
}

func (x *SolanaTransactionMetaV2) GetInnerInstructions() []*SolanaInnerInstructionV2 {
	if x != nil {
		return x.InnerInstructions
	}
	return nil
}

func (x *SolanaTransactionMetaV2) GetLogMessages() []string {
	if x != nil {
		return x.LogMessages
	}
	return nil
}

func (x *SolanaTransactionMetaV2) GetRewards() []*SolanaReward {
	if x != nil {
		return x.Rewards
	}
	return nil
}

type SolanaTokenBalance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountIndex uint64             `protobuf:"varint,1,opt,name=account_index,json=accountIndex,proto3" json:"account_index,omitempty"`
	Mint         string             `protobuf:"bytes,2,opt,name=mint,proto3" json:"mint,omitempty"`
	TokenAmount  *SolanaTokenAmount `protobuf:"bytes,3,opt,name=token_amount,json=tokenAmount,proto3" json:"token_amount,omitempty"`
	Owner        string             `protobuf:"bytes,4,opt,name=owner,proto3" json:"owner,omitempty"`
}

func (x *SolanaTokenBalance) Reset() {
	*x = SolanaTokenBalance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SolanaTokenBalance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SolanaTokenBalance) ProtoMessage() {}

func (x *SolanaTokenBalance) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SolanaTokenBalance.ProtoReflect.Descriptor instead.
func (*SolanaTokenBalance) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_solana_proto_rawDescGZIP(), []int{8}
}

func (x *SolanaTokenBalance) GetAccountIndex() uint64 {
	if x != nil {
		return x.AccountIndex
	}
	return 0
}

func (x *SolanaTokenBalance) GetMint() string {
	if x != nil {
		return x.Mint
	}
	return ""
}

func (x *SolanaTokenBalance) GetTokenAmount() *SolanaTokenAmount {
	if x != nil {
		return x.TokenAmount
	}
	return nil
}

func (x *SolanaTokenBalance) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

type SolanaTokenAmount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Amount         string `protobuf:"bytes,1,opt,name=amount,proto3" json:"amount,omitempty"`
	Decimals       uint64 `protobuf:"varint,2,opt,name=decimals,proto3" json:"decimals,omitempty"`
	UiAmountString string `protobuf:"bytes,3,opt,name=ui_amount_string,json=uiAmountString,proto3" json:"ui_amount_string,omitempty"`
}

func (x *SolanaTokenAmount) Reset() {
	*x = SolanaTokenAmount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SolanaTokenAmount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SolanaTokenAmount) ProtoMessage() {}

func (x *SolanaTokenAmount) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SolanaTokenAmount.ProtoReflect.Descriptor instead.
func (*SolanaTokenAmount) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_solana_proto_rawDescGZIP(), []int{9}
}

func (x *SolanaTokenAmount) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *SolanaTokenAmount) GetDecimals() uint64 {
	if x != nil {
		return x.Decimals
	}
	return 0
}

func (x *SolanaTokenAmount) GetUiAmountString() string {
	if x != nil {
		return x.UiAmountString
	}
	return ""
}

type SolanaInnerInstruction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index        uint64               `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	Instructions []*SolanaInstruction `protobuf:"bytes,2,rep,name=instructions,proto3" json:"instructions,omitempty"`
}

func (x *SolanaInnerInstruction) Reset() {
	*x = SolanaInnerInstruction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SolanaInnerInstruction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SolanaInnerInstruction) ProtoMessage() {}

func (x *SolanaInnerInstruction) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SolanaInnerInstruction.ProtoReflect.Descriptor instead.
func (*SolanaInnerInstruction) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_solana_proto_rawDescGZIP(), []int{10}
}

func (x *SolanaInnerInstruction) GetIndex() uint64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *SolanaInnerInstruction) GetInstructions() []*SolanaInstruction {
	if x != nil {
		return x.Instructions
	}
	return nil
}

type SolanaInnerInstructionV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index        uint64                 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	Instructions []*SolanaInstructionV2 `protobuf:"bytes,2,rep,name=instructions,proto3" json:"instructions,omitempty"`
}

func (x *SolanaInnerInstructionV2) Reset() {
	*x = SolanaInnerInstructionV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SolanaInnerInstructionV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SolanaInnerInstructionV2) ProtoMessage() {}

func (x *SolanaInnerInstructionV2) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SolanaInnerInstructionV2.ProtoReflect.Descriptor instead.
func (*SolanaInnerInstructionV2) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_solana_proto_rawDescGZIP(), []int{11}
}

func (x *SolanaInnerInstructionV2) GetIndex() uint64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *SolanaInnerInstructionV2) GetInstructions() []*SolanaInstructionV2 {
	if x != nil {
		return x.Instructions
	}
	return nil
}

type SolanaReward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pubkey      []byte `protobuf:"bytes,1,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	Lamports    int64  `protobuf:"varint,2,opt,name=lamports,proto3" json:"lamports,omitempty"`
	PostBalance uint64 `protobuf:"varint,3,opt,name=post_balance,json=postBalance,proto3" json:"post_balance,omitempty"`
	RewardType  string `protobuf:"bytes,4,opt,name=reward_type,json=rewardType,proto3" json:"reward_type,omitempty"`
	// Types that are assignable to OptionalCommission:
	//
	//	*SolanaReward_Commission
	OptionalCommission isSolanaReward_OptionalCommission `protobuf_oneof:"optional_commission"`
}

func (x *SolanaReward) Reset() {
	*x = SolanaReward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SolanaReward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SolanaReward) ProtoMessage() {}

func (x *SolanaReward) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SolanaReward.ProtoReflect.Descriptor instead.
func (*SolanaReward) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_solana_proto_rawDescGZIP(), []int{12}
}

func (x *SolanaReward) GetPubkey() []byte {
	if x != nil {
		return x.Pubkey
	}
	return nil
}

func (x *SolanaReward) GetLamports() int64 {
	if x != nil {
		return x.Lamports
	}
	return 0
}

func (x *SolanaReward) GetPostBalance() uint64 {
	if x != nil {
		return x.PostBalance
	}
	return 0
}

func (x *SolanaReward) GetRewardType() string {
	if x != nil {
		return x.RewardType
	}
	return ""
}

func (m *SolanaReward) GetOptionalCommission() isSolanaReward_OptionalCommission {
	if m != nil {
		return m.OptionalCommission
	}
	return nil
}

func (x *SolanaReward) GetCommission() uint64 {
	if x, ok := x.GetOptionalCommission().(*SolanaReward_Commission); ok {
		return x.Commission
	}
	return 0
}

type isSolanaReward_OptionalCommission interface {
	isSolanaReward_OptionalCommission()
}

type SolanaReward_Commission struct {
	Commission uint64 `protobuf:"varint,5,opt,name=commission,proto3,oneof"`
}

func (*SolanaReward_Commission) isSolanaReward_OptionalCommission() {}

type SolanaTransactionPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Signatures []string       `protobuf:"bytes,1,rep,name=signatures,proto3" json:"signatures,omitempty"`
	Message    *SolanaMessage `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *SolanaTransactionPayload) Reset() {
	*x = SolanaTransactionPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SolanaTransactionPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SolanaTransactionPayload) ProtoMessage() {}

func (x *SolanaTransactionPayload) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SolanaTransactionPayload.ProtoReflect.Descriptor instead.
func (*SolanaTransactionPayload) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_solana_proto_rawDescGZIP(), []int{13}
}

func (x *SolanaTransactionPayload) GetSignatures() []string {
	if x != nil {
		return x.Signatures
	}
	return nil
}

func (x *SolanaTransactionPayload) GetMessage() *SolanaMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

type SolanaTransactionPayloadV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Signatures []string         `protobuf:"bytes,1,rep,name=signatures,proto3" json:"signatures,omitempty"`
	Message    *SolanaMessageV2 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *SolanaTransactionPayloadV2) Reset() {
	*x = SolanaTransactionPayloadV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SolanaTransactionPayloadV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SolanaTransactionPayloadV2) ProtoMessage() {}

func (x *SolanaTransactionPayloadV2) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SolanaTransactionPayloadV2.ProtoReflect.Descriptor instead.
func (*SolanaTransactionPayloadV2) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_solana_proto_rawDescGZIP(), []int{14}
}

func (x *SolanaTransactionPayloadV2) GetSignatures() []string {
	if x != nil {
		return x.Signatures
	}
	return nil
}

func (x *SolanaTransactionPayloadV2) GetMessage() *SolanaMessageV2 {
	if x != nil {
		return x.Message
	}
	return nil
}

type SolanaMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *SolanaMessageHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// repeated string account_keys = 2 [deprecated = true];
	RecentBlockHash string               `protobuf:"bytes,3,opt,name=recent_block_hash,json=recentBlockHash,proto3" json:"recent_block_hash,omitempty"`
	Instructions    []*SolanaInstruction `protobuf:"bytes,4,rep,name=instructions,proto3" json:"instructions,omitempty"`
	Accounts        []*SolanaAccount     `protobuf:"bytes,5,rep,name=accounts,proto3" json:"accounts,omitempty"`
}

func (x *SolanaMessage) Reset() {
	*x = SolanaMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SolanaMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SolanaMessage) ProtoMessage() {}

func (x *SolanaMessage) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SolanaMessage.ProtoReflect.Descriptor instead.
func (*SolanaMessage) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_solana_proto_rawDescGZIP(), []int{15}
}

func (x *SolanaMessage) GetHeader() *SolanaMessageHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *SolanaMessage) GetRecentBlockHash() string {
	if x != nil {
		return x.RecentBlockHash
	}
	return ""
}

func (x *SolanaMessage) GetInstructions() []*SolanaInstruction {
	if x != nil {
		return x.Instructions
	}
	return nil
}

func (x *SolanaMessage) GetAccounts() []*SolanaAccount {
	if x != nil {
		return x.Accounts
	}
	return nil
}

type SolanaMessageV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountKeys         []*AccountKey          `protobuf:"bytes,1,rep,name=account_keys,json=accountKeys,proto3" json:"account_keys,omitempty"`
	AddressTableLookups []*AddressTableLookup  `protobuf:"bytes,2,rep,name=address_table_lookups,json=addressTableLookups,proto3" json:"address_table_lookups,omitempty"`
	Instructions        []*SolanaInstructionV2 `protobuf:"bytes,3,rep,name=instructions,proto3" json:"instructions,omitempty"`
	RecentBlockHash     string                 `protobuf:"bytes,4,opt,name=recent_block_hash,json=recentBlockHash,proto3" json:"recent_block_hash,omitempty"`
}

func (x *SolanaMessageV2) Reset() {
	*x = SolanaMessageV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SolanaMessageV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SolanaMessageV2) ProtoMessage() {}

func (x *SolanaMessageV2) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SolanaMessageV2.ProtoReflect.Descriptor instead.
func (*SolanaMessageV2) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_solana_proto_rawDescGZIP(), []int{16}
}

func (x *SolanaMessageV2) GetAccountKeys() []*AccountKey {
	if x != nil {
		return x.AccountKeys
	}
	return nil
}

func (x *SolanaMessageV2) GetAddressTableLookups() []*AddressTableLookup {
	if x != nil {
		return x.AddressTableLookups
	}
	return nil
}

func (x *SolanaMessageV2) GetInstructions() []*SolanaInstructionV2 {
	if x != nil {
		return x.Instructions
	}
	return nil
}

func (x *SolanaMessageV2) GetRecentBlockHash() string {
	if x != nil {
		return x.RecentBlockHash
	}
	return ""
}

type AccountKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pubkey   string `protobuf:"bytes,1,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	Signer   bool   `protobuf:"varint,2,opt,name=signer,proto3" json:"signer,omitempty"`
	Source   string `protobuf:"bytes,3,opt,name=source,proto3" json:"source,omitempty"`
	Writable bool   `protobuf:"varint,4,opt,name=writable,proto3" json:"writable,omitempty"`
}

func (x *AccountKey) Reset() {
	*x = AccountKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountKey) ProtoMessage() {}

func (x *AccountKey) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountKey.ProtoReflect.Descriptor instead.
func (*AccountKey) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_solana_proto_rawDescGZIP(), []int{17}
}

func (x *AccountKey) GetPubkey() string {
	if x != nil {
		return x.Pubkey
	}
	return ""
}

func (x *AccountKey) GetSigner() bool {
	if x != nil {
		return x.Signer
	}
	return false
}

func (x *AccountKey) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *AccountKey) GetWritable() bool {
	if x != nil {
		return x.Writable
	}
	return false
}

type AddressTableLookup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountKey      string   `protobuf:"bytes,1,opt,name=account_key,json=accountKey,proto3" json:"account_key,omitempty"`
	ReadonlyIndexes []uint64 `protobuf:"varint,2,rep,packed,name=readonly_indexes,json=readonlyIndexes,proto3" json:"readonly_indexes,omitempty"`
	WritableIndexes []uint64 `protobuf:"varint,3,rep,packed,name=writable_indexes,json=writableIndexes,proto3" json:"writable_indexes,omitempty"`
}

func (x *AddressTableLookup) Reset() {
	*x = AddressTableLookup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddressTableLookup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddressTableLookup) ProtoMessage() {}

func (x *AddressTableLookup) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddressTableLookup.ProtoReflect.Descriptor instead.
func (*AddressTableLookup) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_solana_proto_rawDescGZIP(), []int{18}
}

func (x *AddressTableLookup) GetAccountKey() string {
	if x != nil {
		return x.AccountKey
	}
	return ""
}

func (x *AddressTableLookup) GetReadonlyIndexes() []uint64 {
	if x != nil {
		return x.ReadonlyIndexes
	}
	return nil
}

func (x *AddressTableLookup) GetWritableIndexes() []uint64 {
	if x != nil {
		return x.WritableIndexes
	}
	return nil
}

type SolanaMessageHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NumRequiredSignatures       uint64 `protobuf:"varint,1,opt,name=num_required_signatures,json=numRequiredSignatures,proto3" json:"num_required_signatures,omitempty"`
	NumReadonlySignedAccounts   uint64 `protobuf:"varint,2,opt,name=num_readonly_signed_accounts,json=numReadonlySignedAccounts,proto3" json:"num_readonly_signed_accounts,omitempty"`
	NumReadonlyUnsignedAccounts uint64 `protobuf:"varint,3,opt,name=num_readonly_unsigned_accounts,json=numReadonlyUnsignedAccounts,proto3" json:"num_readonly_unsigned_accounts,omitempty"`
}

func (x *SolanaMessageHeader) Reset() {
	*x = SolanaMessageHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SolanaMessageHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SolanaMessageHeader) ProtoMessage() {}

func (x *SolanaMessageHeader) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SolanaMessageHeader.ProtoReflect.Descriptor instead.
func (*SolanaMessageHeader) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_solana_proto_rawDescGZIP(), []int{19}
}

func (x *SolanaMessageHeader) GetNumRequiredSignatures() uint64 {
	if x != nil {
		return x.NumRequiredSignatures
	}
	return 0
}

func (x *SolanaMessageHeader) GetNumReadonlySignedAccounts() uint64 {
	if x != nil {
		return x.NumReadonlySignedAccounts
	}
	return 0
}

func (x *SolanaMessageHeader) GetNumReadonlyUnsignedAccounts() uint64 {
	if x != nil {
		return x.NumReadonlyUnsignedAccounts
	}
	return 0
}

type SolanaInstruction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProgramIdIndex uint64   `protobuf:"varint,1,opt,name=program_id_index,json=programIdIndex,proto3" json:"program_id_index,omitempty"`
	Accounts       []uint64 `protobuf:"varint,2,rep,packed,name=accounts,proto3" json:"accounts,omitempty"`
	Data           []byte   `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	ProgramId      string   `protobuf:"bytes,4,opt,name=program_id,json=programId,proto3" json:"program_id,omitempty"`
	AccountKeys    []string `protobuf:"bytes,5,rep,name=account_keys,json=accountKeys,proto3" json:"account_keys,omitempty"`
}

func (x *SolanaInstruction) Reset() {
	*x = SolanaInstruction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SolanaInstruction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SolanaInstruction) ProtoMessage() {}

func (x *SolanaInstruction) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SolanaInstruction.ProtoReflect.Descriptor instead.
func (*SolanaInstruction) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_solana_proto_rawDescGZIP(), []int{20}
}

func (x *SolanaInstruction) GetProgramIdIndex() uint64 {
	if x != nil {
		return x.ProgramIdIndex
	}
	return 0
}

func (x *SolanaInstruction) GetAccounts() []uint64 {
	if x != nil {
		return x.Accounts
	}
	return nil
}

func (x *SolanaInstruction) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *SolanaInstruction) GetProgramId() string {
	if x != nil {
		return x.ProgramId
	}
	return ""
}

func (x *SolanaInstruction) GetAccountKeys() []string {
	if x != nil {
		return x.AccountKeys
	}
	return nil
}

type SolanaRawInstruction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Accounts []string `protobuf:"bytes,1,rep,name=accounts,proto3" json:"accounts,omitempty"`
	Data     []byte   `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *SolanaRawInstruction) Reset() {
	*x = SolanaRawInstruction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SolanaRawInstruction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SolanaRawInstruction) ProtoMessage() {}

func (x *SolanaRawInstruction) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SolanaRawInstruction.ProtoReflect.Descriptor instead.
func (*SolanaRawInstruction) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_solana_proto_rawDescGZIP(), []int{21}
}

func (x *SolanaRawInstruction) GetAccounts() []string {
	if x != nil {
		return x.Accounts
	}
	return nil
}

func (x *SolanaRawInstruction) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type SolanaInstructionV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Program   SolanaProgram `protobuf:"varint,1,opt,name=program,proto3,enum=coinbase.chainstorage.SolanaProgram" json:"program,omitempty"`
	ProgramId string        `protobuf:"bytes,2,opt,name=program_id,json=programId,proto3" json:"program_id,omitempty"`
	// Types that are assignable to ProgramData:
	//
	//	*SolanaInstructionV2_RawInstruction
	//	*SolanaInstructionV2_AddressLookupTableProgram
	//	*SolanaInstructionV2_BpfLoaderProgram
	//	*SolanaInstructionV2_BpfUpgradeableLoaderProgram
	//	*SolanaInstructionV2_VoteProgram
	//	*SolanaInstructionV2_SystemProgram
	//	*SolanaInstructionV2_StakeProgram
	//	*SolanaInstructionV2_SplMemoProgram
	//	*SolanaInstructionV2_SplTokenProgram
	//	*SolanaInstructionV2_SplToken_2022Program
	//	*SolanaInstructionV2_SplAssociatedTokenAccountProgram
	ProgramData isSolanaInstructionV2_ProgramData `protobuf_oneof:"program_data"`
}

func (x *SolanaInstructionV2) Reset() {
	*x = SolanaInstructionV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SolanaInstructionV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SolanaInstructionV2) ProtoMessage() {}

func (x *SolanaInstructionV2) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SolanaInstructionV2.ProtoReflect.Descriptor instead.
func (*SolanaInstructionV2) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_solana_proto_rawDescGZIP(), []int{22}
}

func (x *SolanaInstructionV2) GetProgram() SolanaProgram {
	if x != nil {
		return x.Program
	}
	return SolanaProgram_RAW
}

func (x *SolanaInstructionV2) GetProgramId() string {
	if x != nil {
		return x.ProgramId
	}
	return ""
}

func (m *SolanaInstructionV2) GetProgramData() isSolanaInstructionV2_ProgramData {
	if m != nil {
		return m.ProgramData
	}
	return nil
}

func (x *SolanaInstructionV2) GetRawInstruction() *SolanaRawInstruction {
	if x, ok := x.GetProgramData().(*SolanaInstructionV2_RawInstruction); ok {
		return x.RawInstruction
	}
	return nil
}

func (x *SolanaInstructionV2) GetAddressLookupTableProgram() *SolanaAddressLookupTableProgram {
	if x, ok := x.GetProgramData().(*SolanaInstructionV2_AddressLookupTableProgram); ok {
		return x.AddressLookupTableProgram
	}
	return nil
}

func (x *SolanaInstructionV2) GetBpfLoaderProgram() *SolanaBpfLoaderProgram {
	if x, ok := x.GetProgramData().(*SolanaInstructionV2_BpfLoaderProgram); ok {
		return x.BpfLoaderProgram
	}
	return nil
}

func (x *SolanaInstructionV2) GetBpfUpgradeableLoaderProgram() *SolanaBpfUpgradeableLoaderProgram {
	if x, ok := x.GetProgramData().(*SolanaInstructionV2_BpfUpgradeableLoaderProgram); ok {
		return x.BpfUpgradeableLoaderProgram
	}
	return nil
}

func (x *SolanaInstructionV2) GetVoteProgram() *SolanaVoteProgram {
	if x, ok := x.GetProgramData().(*SolanaInstructionV2_VoteProgram); ok {
		return x.VoteProgram
	}
	return nil
}

func (x *SolanaInstructionV2) GetSystemProgram() *SolanaSystemProgram {
	if x, ok := x.GetProgramData().(*SolanaInstructionV2_SystemProgram); ok {
		return x.SystemProgram
	}
	return nil
}

func (x *SolanaInstructionV2) GetStakeProgram() *SolanaStakeProgram {
	if x, ok := x.GetProgramData().(*SolanaInstructionV2_StakeProgram); ok {
		return x.StakeProgram
	}
	return nil
}

func (x *SolanaInstructionV2) GetSplMemoProgram() *SolanaSplMemoProgram {
	if x, ok := x.GetProgramData().(*SolanaInstructionV2_SplMemoProgram); ok {
		return x.SplMemoProgram
	}
	return nil
}

func (x *SolanaInstructionV2) GetSplTokenProgram() *SolanaSplTokenProgram {
	if x, ok := x.GetProgramData().(*SolanaInstructionV2_SplTokenProgram); ok {
		return x.SplTokenProgram
	}
	return nil
}

func (x *SolanaInstructionV2) GetSplToken_2022Program() *SolanaSplToken2022Program {
	if x, ok := x.GetProgramData().(*SolanaInstructionV2_SplToken_2022Program); ok {
		return x.SplToken_2022Program
	}
	return nil
}

func (x *SolanaInstructionV2) GetSplAssociatedTokenAccountProgram() *SolanaSplAssociatedTokenAccountProgram {
	if x, ok := x.GetProgramData().(*SolanaInstructionV2_SplAssociatedTokenAccountProgram); ok {
		return x.SplAssociatedTokenAccountProgram
	}
	return nil
}

type isSolanaInstructionV2_ProgramData interface {
	isSolanaInstructionV2_ProgramData()
}

type SolanaInstructionV2_RawInstruction struct {
	RawInstruction *SolanaRawInstruction `protobuf:"bytes,100,opt,name=raw_instruction,json=rawInstruction,proto3,oneof"`
}

type SolanaInstructionV2_AddressLookupTableProgram struct {
	AddressLookupTableProgram *SolanaAddressLookupTableProgram `protobuf:"bytes,101,opt,name=address_lookup_table_program,json=addressLookupTableProgram,proto3,oneof"`
}

type SolanaInstructionV2_BpfLoaderProgram struct {
	BpfLoaderProgram *SolanaBpfLoaderProgram `protobuf:"bytes,102,opt,name=bpf_loader_program,json=bpfLoaderProgram,proto3,oneof"`
}

type SolanaInstructionV2_BpfUpgradeableLoaderProgram struct {
	BpfUpgradeableLoaderProgram *SolanaBpfUpgradeableLoaderProgram `protobuf:"bytes,103,opt,name=bpf_upgradeable_loader_program,json=bpfUpgradeableLoaderProgram,proto3,oneof"`
}

type SolanaInstructionV2_VoteProgram struct {
	VoteProgram *SolanaVoteProgram `protobuf:"bytes,104,opt,name=vote_program,json=voteProgram,proto3,oneof"`
}

type SolanaInstructionV2_SystemProgram struct {
	SystemProgram *SolanaSystemProgram `protobuf:"bytes,105,opt,name=system_program,json=systemProgram,proto3,oneof"`
}

type SolanaInstructionV2_StakeProgram struct {
	StakeProgram *SolanaStakeProgram `protobuf:"bytes,106,opt,name=stake_program,json=stakeProgram,proto3,oneof"`
}

type SolanaInstructionV2_SplMemoProgram struct {
	SplMemoProgram *SolanaSplMemoProgram `protobuf:"bytes,107,opt,name=spl_memo_program,json=splMemoProgram,proto3,oneof"`
}

type SolanaInstructionV2_SplTokenProgram struct {
	SplTokenProgram *SolanaSplTokenProgram `protobuf:"bytes,108,opt,name=spl_token_program,json=splTokenProgram,proto3,oneof"`
}

type SolanaInstructionV2_SplToken_2022Program struct {
	SplToken_2022Program *SolanaSplToken2022Program `protobuf:"bytes,109,opt,name=spl_token_2022_program,json=splToken2022Program,proto3,oneof"`
}

type SolanaInstructionV2_SplAssociatedTokenAccountProgram struct {
	SplAssociatedTokenAccountProgram *SolanaSplAssociatedTokenAccountProgram `protobuf:"bytes,110,opt,name=spl_associated_token_account_program,json=splAssociatedTokenAccountProgram,proto3,oneof"`
}

func (*SolanaInstructionV2_RawInstruction) isSolanaInstructionV2_ProgramData() {}

func (*SolanaInstructionV2_AddressLookupTableProgram) isSolanaInstructionV2_ProgramData() {}

func (*SolanaInstructionV2_BpfLoaderProgram) isSolanaInstructionV2_ProgramData() {}

func (*SolanaInstructionV2_BpfUpgradeableLoaderProgram) isSolanaInstructionV2_ProgramData() {}

func (*SolanaInstructionV2_VoteProgram) isSolanaInstructionV2_ProgramData() {}

func (*SolanaInstructionV2_SystemProgram) isSolanaInstructionV2_ProgramData() {}

func (*SolanaInstructionV2_StakeProgram) isSolanaInstructionV2_ProgramData() {}

func (*SolanaInstructionV2_SplMemoProgram) isSolanaInstructionV2_ProgramData() {}

func (*SolanaInstructionV2_SplTokenProgram) isSolanaInstructionV2_ProgramData() {}

func (*SolanaInstructionV2_SplToken_2022Program) isSolanaInstructionV2_ProgramData() {}

func (*SolanaInstructionV2_SplAssociatedTokenAccountProgram) isSolanaInstructionV2_ProgramData() {}

type SolanaAddressLookupTableProgram struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstructionType SolanaAddressLookupTableProgram_InstructionType `protobuf:"varint,1,opt,name=instruction_type,json=instructionType,proto3,enum=coinbase.chainstorage.SolanaAddressLookupTableProgram_InstructionType" json:"instruction_type,omitempty"`
	// Types that are assignable to Instruction:
	//
	//	*SolanaAddressLookupTableProgram_Unknown
	Instruction isSolanaAddressLookupTableProgram_Instruction `protobuf_oneof:"instruction"`
}

func (x *SolanaAddressLookupTableProgram) Reset() {
	*x = SolanaAddressLookupTableProgram{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SolanaAddressLookupTableProgram) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SolanaAddressLookupTableProgram) ProtoMessage() {}

func (x *SolanaAddressLookupTableProgram) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SolanaAddressLookupTableProgram.ProtoReflect.Descriptor instead.
func (*SolanaAddressLookupTableProgram) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_solana_proto_rawDescGZIP(), []int{23}
}

func (x *SolanaAddressLookupTableProgram) GetInstructionType() SolanaAddressLookupTableProgram_InstructionType {
	if x != nil {
		return x.InstructionType
	}
	return SolanaAddressLookupTableProgram_UNKNOWN
}

func (m *SolanaAddressLookupTableProgram) GetInstruction() isSolanaAddressLookupTableProgram_Instruction {
	if m != nil {
		return m.Instruction
	}
	return nil
}

func (x *SolanaAddressLookupTableProgram) GetUnknown() *SolanaUnknownInstruction {
	if x, ok := x.GetInstruction().(*SolanaAddressLookupTableProgram_Unknown); ok {
		return x.Unknown
	}
	return nil
}

type isSolanaAddressLookupTableProgram_Instruction interface {
	isSolanaAddressLookupTableProgram_Instruction()
}

type SolanaAddressLookupTableProgram_Unknown struct {
	Unknown *SolanaUnknownInstruction `protobuf:"bytes,100,opt,name=unknown,proto3,oneof"`
}

func (*SolanaAddressLookupTableProgram_Unknown) isSolanaAddressLookupTableProgram_Instruction() {}

type SolanaBpfLoaderProgram struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstructionType SolanaBpfLoaderProgram_InstructionType `protobuf:"varint,1,opt,name=instruction_type,json=instructionType,proto3,enum=coinbase.chainstorage.SolanaBpfLoaderProgram_InstructionType" json:"instruction_type,omitempty"`
	// Types that are assignable to Instruction:
	//
	//	*SolanaBpfLoaderProgram_Unknown
	Instruction isSolanaBpfLoaderProgram_Instruction `protobuf_oneof:"instruction"`
}

func (x *SolanaBpfLoaderProgram) Reset() {
	*x = SolanaBpfLoaderProgram{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SolanaBpfLoaderProgram) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SolanaBpfLoaderProgram) ProtoMessage() {}

func (x *SolanaBpfLoaderProgram) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SolanaBpfLoaderProgram.ProtoReflect.Descriptor instead.
func (*SolanaBpfLoaderProgram) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_solana_proto_rawDescGZIP(), []int{24}
}

func (x *SolanaBpfLoaderProgram) GetInstructionType() SolanaBpfLoaderProgram_InstructionType {
	if x != nil {
		return x.InstructionType
	}
	return SolanaBpfLoaderProgram_UNKNOWN
}

func (m *SolanaBpfLoaderProgram) GetInstruction() isSolanaBpfLoaderProgram_Instruction {
	if m != nil {
		return m.Instruction
	}
	return nil
}

func (x *SolanaBpfLoaderProgram) GetUnknown() *SolanaUnknownInstruction {
	if x, ok := x.GetInstruction().(*SolanaBpfLoaderProgram_Unknown); ok {
		return x.Unknown
	}
	return nil
}

type isSolanaBpfLoaderProgram_Instruction interface {
	isSolanaBpfLoaderProgram_Instruction()
}

type SolanaBpfLoaderProgram_Unknown struct {
	Unknown *SolanaUnknownInstruction `protobuf:"bytes,100,opt,name=unknown,proto3,oneof"`
}

func (*SolanaBpfLoaderProgram_Unknown) isSolanaBpfLoaderProgram_Instruction() {}

type SolanaBpfUpgradeableLoaderProgram struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstructionType SolanaBpfUpgradeableLoaderProgram_InstructionType `protobuf:"varint,1,opt,name=instruction_type,json=instructionType,proto3,enum=coinbase.chainstorage.SolanaBpfUpgradeableLoaderProgram_InstructionType" json:"instruction_type,omitempty"`
	// Types that are assignable to Instruction:
	//
	//	*SolanaBpfUpgradeableLoaderProgram_Unknown
	Instruction isSolanaBpfUpgradeableLoaderProgram_Instruction `protobuf_oneof:"instruction"`
}

func (x *SolanaBpfUpgradeableLoaderProgram) Reset() {
	*x = SolanaBpfUpgradeableLoaderProgram{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SolanaBpfUpgradeableLoaderProgram) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SolanaBpfUpgradeableLoaderProgram) ProtoMessage() {}

func (x *SolanaBpfUpgradeableLoaderProgram) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SolanaBpfUpgradeableLoaderProgram.ProtoReflect.Descriptor instead.
func (*SolanaBpfUpgradeableLoaderProgram) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_solana_proto_rawDescGZIP(), []int{25}
}

func (x *SolanaBpfUpgradeableLoaderProgram) GetInstructionType() SolanaBpfUpgradeableLoaderProgram_InstructionType {
	if x != nil {
		return x.InstructionType
	}
	return SolanaBpfUpgradeableLoaderProgram_UNKNOWN
}

func (m *SolanaBpfUpgradeableLoaderProgram) GetInstruction() isSolanaBpfUpgradeableLoaderProgram_Instruction {
	if m != nil {
		return m.Instruction
	}
	return nil
}

func (x *SolanaBpfUpgradeableLoaderProgram) GetUnknown() *SolanaUnknownInstruction {
	if x, ok := x.GetInstruction().(*SolanaBpfUpgradeableLoaderProgram_Unknown); ok {
		return x.Unknown
	}
	return nil
}

type isSolanaBpfUpgradeableLoaderProgram_Instruction interface {
	isSolanaBpfUpgradeableLoaderProgram_Instruction()
}

type SolanaBpfUpgradeableLoaderProgram_Unknown struct {
	Unknown *SolanaUnknownInstruction `protobuf:"bytes,100,opt,name=unknown,proto3,oneof"`
}

func (*SolanaBpfUpgradeableLoaderProgram_Unknown) isSolanaBpfUpgradeableLoaderProgram_Instruction() {}

type SolanaVoteProgram struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstructionType SolanaVoteProgram_InstructionType `protobuf:"varint,1,opt,name=instruction_type,json=instructionType,proto3,enum=coinbase.chainstorage.SolanaVoteProgram_InstructionType" json:"instruction_type,omitempty"`
	// Types that are assignable to Instruction:
	//
	//	*SolanaVoteProgram_Unknown
	//	*SolanaVoteProgram_Initialize
	//	*SolanaVoteProgram_Vote
	//	*SolanaVoteProgram_Withdraw
	//	*SolanaVoteProgram_CompactUpdateVoteState
	Instruction isSolanaVoteProgram_Instruction `protobuf_oneof:"instruction"`
}

func (x *SolanaVoteProgram) Reset() {
	*x = SolanaVoteProgram{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SolanaVoteProgram) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SolanaVoteProgram) ProtoMessage() {}

func (x *SolanaVoteProgram) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SolanaVoteProgram.ProtoReflect.Descriptor instead.
func (*SolanaVoteProgram) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_solana_proto_rawDescGZIP(), []int{26}
}

func (x *SolanaVoteProgram) GetInstructionType() SolanaVoteProgram_InstructionType {
	if x != nil {
		return x.InstructionType
	}
	return SolanaVoteProgram_UNKNOWN
}

func (m *SolanaVoteProgram) GetInstruction() isSolanaVoteProgram_Instruction {
	if m != nil {
		return m.Instruction
	}
	return nil
}

func (x *SolanaVoteProgram) GetUnknown() *SolanaUnknownInstruction {
	if x, ok := x.GetInstruction().(*SolanaVoteProgram_Unknown); ok {
		return x.Unknown
	}
	return nil
}

func (x *SolanaVoteProgram) GetInitialize() *SolanaVoteInitializeInstruction {
	if x, ok := x.GetInstruction().(*SolanaVoteProgram_Initialize); ok {
		return x.Initialize
	}
	return nil
}

func (x *SolanaVoteProgram) GetVote() *SolanaVoteVoteInstruction {
	if x, ok := x.GetInstruction().(*SolanaVoteProgram_Vote); ok {
		return x.Vote
	}
	return nil
}

func (x *SolanaVoteProgram) GetWithdraw() *SolanaVoteWithdrawInstruction {
	if x, ok := x.GetInstruction().(*SolanaVoteProgram_Withdraw); ok {
		return x.Withdraw
	}
	return nil
}

func (x *SolanaVoteProgram) GetCompactUpdateVoteState() *SolanaVoteCompactUpdateVoteStateInstruction {
	if x, ok := x.GetInstruction().(*SolanaVoteProgram_CompactUpdateVoteState); ok {
		return x.CompactUpdateVoteState
	}
	return nil
}

type isSolanaVoteProgram_Instruction interface {
	isSolanaVoteProgram_Instruction()
}

type SolanaVoteProgram_Unknown struct {
	Unknown *SolanaUnknownInstruction `protobuf:"bytes,100,opt,name=unknown,proto3,oneof"`
}

type SolanaVoteProgram_Initialize struct {
	Initialize *SolanaVoteInitializeInstruction `protobuf:"bytes,101,opt,name=initialize,proto3,oneof"`
}

type SolanaVoteProgram_Vote struct {
	Vote *SolanaVoteVoteInstruction `protobuf:"bytes,102,opt,name=vote,proto3,oneof"`
}

type SolanaVoteProgram_Withdraw struct {
	Withdraw *SolanaVoteWithdrawInstruction `protobuf:"bytes,103,opt,name=withdraw,proto3,oneof"`
}

type SolanaVoteProgram_CompactUpdateVoteState struct {
	CompactUpdateVoteState *SolanaVoteCompactUpdateVoteStateInstruction `protobuf:"bytes,104,opt,name=compact_update_vote_state,json=compactUpdateVoteState,proto3,oneof"`
}

func (*SolanaVoteProgram_Unknown) isSolanaVoteProgram_Instruction() {}

func (*SolanaVoteProgram_Initialize) isSolanaVoteProgram_Instruction() {}

func (*SolanaVoteProgram_Vote) isSolanaVoteProgram_Instruction() {}

func (*SolanaVoteProgram_Withdraw) isSolanaVoteProgram_Instruction() {}

func (*SolanaVoteProgram_CompactUpdateVoteState) isSolanaVoteProgram_Instruction() {}

type SolanaSystemProgram struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstructionType SolanaSystemProgram_InstructionType `protobuf:"varint,1,opt,name=instruction_type,json=instructionType,proto3,enum=coinbase.chainstorage.SolanaSystemProgram_InstructionType" json:"instruction_type,omitempty"`
	// Types that are assignable to Instruction:
	//
	//	*SolanaSystemProgram_Unknown
	//	*SolanaSystemProgram_CreateAccount
	//	*SolanaSystemProgram_Transfer
	//	*SolanaSystemProgram_CreateAccountWithSeed
	//	*SolanaSystemProgram_TransferWithSeed
	Instruction isSolanaSystemProgram_Instruction `protobuf_oneof:"instruction"`
}

func (x *SolanaSystemProgram) Reset() {
	*x = SolanaSystemProgram{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SolanaSystemProgram) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SolanaSystemProgram) ProtoMessage() {}

func (x *SolanaSystemProgram) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SolanaSystemProgram.ProtoReflect.Descriptor instead.
func (*SolanaSystemProgram) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_solana_proto_rawDescGZIP(), []int{27}
}

func (x *SolanaSystemProgram) GetInstructionType() SolanaSystemProgram_InstructionType {
	if x != nil {
		return x.InstructionType
	}
	return SolanaSystemProgram_UNKNOWN
}

func (m *SolanaSystemProgram) GetInstruction() isSolanaSystemProgram_Instruction {
	if m != nil {
		return m.Instruction
	}
	return nil
}

func (x *SolanaSystemProgram) GetUnknown() *SolanaUnknownInstruction {
	if x, ok := x.GetInstruction().(*SolanaSystemProgram_Unknown); ok {
		return x.Unknown
	}
	return nil
}

func (x *SolanaSystemProgram) GetCreateAccount() *SolanaSystemCreateAccountInstruction {
	if x, ok := x.GetInstruction().(*SolanaSystemProgram_CreateAccount); ok {
		return x.CreateAccount
	}
	return nil
}

func (x *SolanaSystemProgram) GetTransfer() *SolanaSystemTransferInstruction {
	if x, ok := x.GetInstruction().(*SolanaSystemProgram_Transfer); ok {
		return x.Transfer
	}
	return nil
}

func (x *SolanaSystemProgram) GetCreateAccountWithSeed() *SolanaSystemCreateAccountWithSeedInstruction {
	if x, ok := x.GetInstruction().(*SolanaSystemProgram_CreateAccountWithSeed); ok {
		return x.CreateAccountWithSeed
	}
	return nil
}

func (x *SolanaSystemProgram) GetTransferWithSeed() *SolanaSystemTransferWithSeedInstruction {
	if x, ok := x.GetInstruction().(*SolanaSystemProgram_TransferWithSeed); ok {
		return x.TransferWithSeed
	}
	return nil
}

type isSolanaSystemProgram_Instruction interface {
	isSolanaSystemProgram_Instruction()
}

type SolanaSystemProgram_Unknown struct {
	Unknown *SolanaUnknownInstruction `protobuf:"bytes,100,opt,name=unknown,proto3,oneof"`
}

type SolanaSystemProgram_CreateAccount struct {
	CreateAccount *SolanaSystemCreateAccountInstruction `protobuf:"bytes,101,opt,name=create_account,json=createAccount,proto3,oneof"`
}

type SolanaSystemProgram_Transfer struct {
	Transfer *SolanaSystemTransferInstruction `protobuf:"bytes,102,opt,name=transfer,proto3,oneof"`
}

type SolanaSystemProgram_CreateAccountWithSeed struct {
	CreateAccountWithSeed *SolanaSystemCreateAccountWithSeedInstruction `protobuf:"bytes,103,opt,name=create_account_with_seed,json=createAccountWithSeed,proto3,oneof"`
}

type SolanaSystemProgram_TransferWithSeed struct {
	TransferWithSeed *SolanaSystemTransferWithSeedInstruction `protobuf:"bytes,104,opt,name=transfer_with_seed,json=transferWithSeed,proto3,oneof"`
}

func (*SolanaSystemProgram_Unknown) isSolanaSystemProgram_Instruction() {}

func (*SolanaSystemProgram_CreateAccount) isSolanaSystemProgram_Instruction() {}

func (*SolanaSystemProgram_Transfer) isSolanaSystemProgram_Instruction() {}

func (*SolanaSystemProgram_CreateAccountWithSeed) isSolanaSystemProgram_Instruction() {}

func (*SolanaSystemProgram_TransferWithSeed) isSolanaSystemProgram_Instruction() {}

type SolanaStakeProgram struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstructionType SolanaStakeProgram_InstructionType `protobuf:"varint,1,opt,name=instruction_type,json=instructionType,proto3,enum=coinbase.chainstorage.SolanaStakeProgram_InstructionType" json:"instruction_type,omitempty"`
	// Types that are assignable to Instruction:
	//
	//	*SolanaStakeProgram_Unknown
	//	*SolanaStakeProgram_Initialize
	//	*SolanaStakeProgram_Delegate
	//	*SolanaStakeProgram_Deactivate
	//	*SolanaStakeProgram_Merge
	//	*SolanaStakeProgram_Split
	//	*SolanaStakeProgram_Withdraw
	Instruction isSolanaStakeProgram_Instruction `protobuf_oneof:"instruction"`
}

func (x *SolanaStakeProgram) Reset() {
	*x = SolanaStakeProgram{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SolanaStakeProgram) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SolanaStakeProgram) ProtoMessage() {}

func (x *SolanaStakeProgram) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SolanaStakeProgram.ProtoReflect.Descriptor instead.
func (*SolanaStakeProgram) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_solana_proto_rawDescGZIP(), []int{28}
}

func (x *SolanaStakeProgram) GetInstructionType() SolanaStakeProgram_InstructionType {
	if x != nil {
		return x.InstructionType
	}
	return SolanaStakeProgram_UNKNOWN
}

func (m *SolanaStakeProgram) GetInstruction() isSolanaStakeProgram_Instruction {
	if m != nil {
		return m.Instruction
	}
	return nil
}

func (x *SolanaStakeProgram) GetUnknown() *SolanaUnknownInstruction {
	if x, ok := x.GetInstruction().(*SolanaStakeProgram_Unknown); ok {
		return x.Unknown
	}
	return nil
}

func (x *SolanaStakeProgram) GetInitialize() *SolanaStakeInitializeInstruction {
	if x, ok := x.GetInstruction().(*SolanaStakeProgram_Initialize); ok {
		return x.Initialize
	}
	return nil
}

func (x *SolanaStakeProgram) GetDelegate() *SolanaStakeDelegateInstruction {
	if x, ok := x.GetInstruction().(*SolanaStakeProgram_Delegate); ok {
		return x.Delegate
	}
	return nil
}

func (x *SolanaStakeProgram) GetDeactivate() *SolanaStakeDeactivateInstruction {
	if x, ok := x.GetInstruction().(*SolanaStakeProgram_Deactivate); ok {
		return x.Deactivate
	}
	return nil
}

func (x *SolanaStakeProgram) GetMerge() *SolanaStakeMergeInstruction {
	if x, ok := x.GetInstruction().(*SolanaStakeProgram_Merge); ok {
		return x.Merge
	}
	return nil
}

func (x *SolanaStakeProgram) GetSplit() *SolanaStakeSplitInstruction {
	if x, ok := x.GetInstruction().(*SolanaStakeProgram_Split); ok {
		return x.Split
	}
	return nil
}

func (x *SolanaStakeProgram) GetWithdraw() *SolanaStakeWithdrawInstruction {
	if x, ok := x.GetInstruction().(*SolanaStakeProgram_Withdraw); ok {
		return x.Withdraw
	}
	return nil
}

type isSolanaStakeProgram_Instruction interface {
	isSolanaStakeProgram_Instruction()
}

type SolanaStakeProgram_Unknown struct {
	Unknown *SolanaUnknownInstruction `protobuf:"bytes,100,opt,name=unknown,proto3,oneof"`
}

type SolanaStakeProgram_Initialize struct {
	Initialize *SolanaStakeInitializeInstruction `protobuf:"bytes,101,opt,name=initialize,proto3,oneof"`
}

type SolanaStakeProgram_Delegate struct {
	Delegate *SolanaStakeDelegateInstruction `protobuf:"bytes,102,opt,name=delegate,proto3,oneof"`
}

type SolanaStakeProgram_Deactivate struct {
	Deactivate *SolanaStakeDeactivateInstruction `protobuf:"bytes,103,opt,name=deactivate,proto3,oneof"`
}

type SolanaStakeProgram_Merge struct {
	Merge *SolanaStakeMergeInstruction `protobuf:"bytes,104,opt,name=merge,proto3,oneof"`
}

type SolanaStakeProgram_Split struct {
	Split *SolanaStakeSplitInstruction `protobuf:"bytes,105,opt,name=split,proto3,oneof"`
}

type SolanaStakeProgram_Withdraw struct {
	Withdraw *SolanaStakeWithdrawInstruction `protobuf:"bytes,106,opt,name=withdraw,proto3,oneof"`
}

func (*SolanaStakeProgram_Unknown) isSolanaStakeProgram_Instruction() {}

func (*SolanaStakeProgram_Initialize) isSolanaStakeProgram_Instruction() {}

func (*SolanaStakeProgram_Delegate) isSolanaStakeProgram_Instruction() {}

func (*SolanaStakeProgram_Deactivate) isSolanaStakeProgram_Instruction() {}

func (*SolanaStakeProgram_Merge) isSolanaStakeProgram_Instruction() {}

func (*SolanaStakeProgram_Split) isSolanaStakeProgram_Instruction() {}

func (*SolanaStakeProgram_Withdraw) isSolanaStakeProgram_Instruction() {}

type SolanaSplMemoProgram struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstructionType SolanaSplMemoProgram_InstructionType `protobuf:"varint,1,opt,name=instruction_type,json=instructionType,proto3,enum=coinbase.chainstorage.SolanaSplMemoProgram_InstructionType" json:"instruction_type,omitempty"`
	// Types that are assignable to Instruction:
	//
	//	*SolanaSplMemoProgram_Memo
	Instruction isSolanaSplMemoProgram_Instruction `protobuf_oneof:"instruction"`
}

func (x *SolanaSplMemoProgram) Reset() {
	*x = SolanaSplMemoProgram{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SolanaSplMemoProgram) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SolanaSplMemoProgram) ProtoMessage() {}

func (x *SolanaSplMemoProgram) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SolanaSplMemoProgram.ProtoReflect.Descriptor instead.
func (*SolanaSplMemoProgram) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_solana_proto_rawDescGZIP(), []int{29}
}

func (x *SolanaSplMemoProgram) GetInstructionType() SolanaSplMemoProgram_InstructionType {
	if x != nil {
		return x.InstructionType
	}
	return SolanaSplMemoProgram_SPL_MEMO
}

func (m *SolanaSplMemoProgram) GetInstruction() isSolanaSplMemoProgram_Instruction {
	if m != nil {
		return m.Instruction
	}
	return nil
}

func (x *SolanaSplMemoProgram) GetMemo() *SolanaSplMemoInstruction {
	if x, ok := x.GetInstruction().(*SolanaSplMemoProgram_Memo); ok {
		return x.Memo
	}
	return nil
}

type isSolanaSplMemoProgram_Instruction interface {
	isSolanaSplMemoProgram_Instruction()
}

type SolanaSplMemoProgram_Memo struct {
	Memo *SolanaSplMemoInstruction `protobuf:"bytes,100,opt,name=memo,proto3,oneof"`
}

func (*SolanaSplMemoProgram_Memo) isSolanaSplMemoProgram_Instruction() {}

type SolanaSplTokenProgram struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstructionType SolanaSplTokenProgram_InstructionType `protobuf:"varint,1,opt,name=instruction_type,json=instructionType,proto3,enum=coinbase.chainstorage.SolanaSplTokenProgram_InstructionType" json:"instruction_type,omitempty"`
	// Types that are assignable to Instruction:
	//
	//	*SolanaSplTokenProgram_Unknown
	//	*SolanaSplTokenProgram_GetAccountDataSize
	//	*SolanaSplTokenProgram_InitializeImmutableOwner
	//	*SolanaSplTokenProgram_Transfer
	Instruction isSolanaSplTokenProgram_Instruction `protobuf_oneof:"instruction"`
}

func (x *SolanaSplTokenProgram) Reset() {
	*x = SolanaSplTokenProgram{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SolanaSplTokenProgram) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SolanaSplTokenProgram) ProtoMessage() {}

func (x *SolanaSplTokenProgram) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SolanaSplTokenProgram.ProtoReflect.Descriptor instead.
func (*SolanaSplTokenProgram) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_solana_proto_rawDescGZIP(), []int{30}
}

func (x *SolanaSplTokenProgram) GetInstructionType() SolanaSplTokenProgram_InstructionType {
	if x != nil {
		return x.InstructionType
	}
	return SolanaSplTokenProgram_UNKNOWN
}

func (m *SolanaSplTokenProgram) GetInstruction() isSolanaSplTokenProgram_Instruction {
	if m != nil {
		return m.Instruction
	}
	return nil
}

func (x *SolanaSplTokenProgram) GetUnknown() *SolanaUnknownInstruction {
	if x, ok := x.GetInstruction().(*SolanaSplTokenProgram_Unknown); ok {
		return x.Unknown
	}
	return nil
}

func (x *SolanaSplTokenProgram) GetGetAccountDataSize() *SolanaSplTokenGetAccountDataSizeInstruction {
	if x, ok := x.GetInstruction().(*SolanaSplTokenProgram_GetAccountDataSize); ok {
		return x.GetAccountDataSize
	}
	return nil
}

func (x *SolanaSplTokenProgram) GetInitializeImmutableOwner() *SolanaSplTokenInitializeImmutableOwnerInstruction {
	if x, ok := x.GetInstruction().(*SolanaSplTokenProgram_InitializeImmutableOwner); ok {
		return x.InitializeImmutableOwner
	}
	return nil
}

func (x *SolanaSplTokenProgram) GetTransfer() *SolanaSplTokenTransferInstruction {
	if x, ok := x.GetInstruction().(*SolanaSplTokenProgram_Transfer); ok {
		return x.Transfer
	}
	return nil
}

type isSolanaSplTokenProgram_Instruction interface {
	isSolanaSplTokenProgram_Instruction()
}

type SolanaSplTokenProgram_Unknown struct {
	Unknown *SolanaUnknownInstruction `protobuf:"bytes,100,opt,name=unknown,proto3,oneof"`
}

type SolanaSplTokenProgram_GetAccountDataSize struct {
	GetAccountDataSize *SolanaSplTokenGetAccountDataSizeInstruction `protobuf:"bytes,101,opt,name=get_account_data_size,json=getAccountDataSize,proto3,oneof"`
}

type SolanaSplTokenProgram_InitializeImmutableOwner struct {
	InitializeImmutableOwner *SolanaSplTokenInitializeImmutableOwnerInstruction `protobuf:"bytes,102,opt,name=initialize_immutable_owner,json=initializeImmutableOwner,proto3,oneof"`
}

type SolanaSplTokenProgram_Transfer struct {
	Transfer *SolanaSplTokenTransferInstruction `protobuf:"bytes,103,opt,name=transfer,proto3,oneof"`
}

func (*SolanaSplTokenProgram_Unknown) isSolanaSplTokenProgram_Instruction() {}

func (*SolanaSplTokenProgram_GetAccountDataSize) isSolanaSplTokenProgram_Instruction() {}

func (*SolanaSplTokenProgram_InitializeImmutableOwner) isSolanaSplTokenProgram_Instruction() {}

func (*SolanaSplTokenProgram_Transfer) isSolanaSplTokenProgram_Instruction() {}

type SolanaSplToken2022Program struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstructionType SolanaSplToken2022Program_InstructionType `protobuf:"varint,1,opt,name=instruction_type,json=instructionType,proto3,enum=coinbase.chainstorage.SolanaSplToken2022Program_InstructionType" json:"instruction_type,omitempty"`
	// Types that are assignable to Instruction:
	//
	//	*SolanaSplToken2022Program_Unknown
	Instruction isSolanaSplToken2022Program_Instruction `protobuf_oneof:"instruction"`
}

func (x *SolanaSplToken2022Program) Reset() {
	*x = SolanaSplToken2022Program{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SolanaSplToken2022Program) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SolanaSplToken2022Program) ProtoMessage() {}

func (x *SolanaSplToken2022Program) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SolanaSplToken2022Program.ProtoReflect.Descriptor instead.
func (*SolanaSplToken2022Program) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_solana_proto_rawDescGZIP(), []int{31}
}

func (x *SolanaSplToken2022Program) GetInstructionType() SolanaSplToken2022Program_InstructionType {
	if x != nil {
		return x.InstructionType
	}
	return SolanaSplToken2022Program_UNKNOWN
}

func (m *SolanaSplToken2022Program) GetInstruction() isSolanaSplToken2022Program_Instruction {
	if m != nil {
		return m.Instruction
	}
	return nil
}

func (x *SolanaSplToken2022Program) GetUnknown() *SolanaUnknownInstruction {
	if x, ok := x.GetInstruction().(*SolanaSplToken2022Program_Unknown); ok {
		return x.Unknown
	}
	return nil
}

type isSolanaSplToken2022Program_Instruction interface {
	isSolanaSplToken2022Program_Instruction()
}

type SolanaSplToken2022Program_Unknown struct {
	Unknown *SolanaUnknownInstruction `protobuf:"bytes,100,opt,name=unknown,proto3,oneof"`
}

func (*SolanaSplToken2022Program_Unknown) isSolanaSplToken2022Program_Instruction() {}

type SolanaSplAssociatedTokenAccountProgram struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstructionType SolanaSplAssociatedTokenAccountProgram_InstructionType `protobuf:"varint,1,opt,name=instruction_type,json=instructionType,proto3,enum=coinbase.chainstorage.SolanaSplAssociatedTokenAccountProgram_InstructionType" json:"instruction_type,omitempty"`
	// Types that are assignable to Instruction:
	//
	//	*SolanaSplAssociatedTokenAccountProgram_Unknown
	Instruction isSolanaSplAssociatedTokenAccountProgram_Instruction `protobuf_oneof:"instruction"`
}

func (x *SolanaSplAssociatedTokenAccountProgram) Reset() {
	*x = SolanaSplAssociatedTokenAccountProgram{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SolanaSplAssociatedTokenAccountProgram) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SolanaSplAssociatedTokenAccountProgram) ProtoMessage() {}

func (x *SolanaSplAssociatedTokenAccountProgram) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SolanaSplAssociatedTokenAccountProgram.ProtoReflect.Descriptor instead.
func (*SolanaSplAssociatedTokenAccountProgram) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_solana_proto_rawDescGZIP(), []int{32}
}

func (x *SolanaSplAssociatedTokenAccountProgram) GetInstructionType() SolanaSplAssociatedTokenAccountProgram_InstructionType {
	if x != nil {
		return x.InstructionType
	}
	return SolanaSplAssociatedTokenAccountProgram_UNKNOWN
}

func (m *SolanaSplAssociatedTokenAccountProgram) GetInstruction() isSolanaSplAssociatedTokenAccountProgram_Instruction {
	if m != nil {
		return m.Instruction
	}
	return nil
}

func (x *SolanaSplAssociatedTokenAccountProgram) GetUnknown() *SolanaUnknownInstruction {
	if x, ok := x.GetInstruction().(*SolanaSplAssociatedTokenAccountProgram_Unknown); ok {
		return x.Unknown
	}
	return nil
}

type isSolanaSplAssociatedTokenAccountProgram_Instruction interface {
	isSolanaSplAssociatedTokenAccountProgram_Instruction()
}

type SolanaSplAssociatedTokenAccountProgram_Unknown struct {
	Unknown *SolanaUnknownInstruction `protobuf:"bytes,100,opt,name=unknown,proto3,oneof"`
}

func (*SolanaSplAssociatedTokenAccountProgram_Unknown) isSolanaSplAssociatedTokenAccountProgram_Instruction() {
}

type SolanaUnknownInstruction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info []byte `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
}

func (x *SolanaUnknownInstruction) Reset() {
	*x = SolanaUnknownInstruction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SolanaUnknownInstruction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SolanaUnknownInstruction) ProtoMessage() {}

func (x *SolanaUnknownInstruction) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SolanaUnknownInstruction.ProtoReflect.Descriptor instead.
func (*SolanaUnknownInstruction) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_solana_proto_rawDescGZIP(), []int{33}
}

func (x *SolanaUnknownInstruction) GetInfo() []byte {
	if x != nil {
		return x.Info
	}
	return nil
}

type SolanaVoteInitializeInstruction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VoteAccount          string `protobuf:"bytes,1,opt,name=vote_account,json=voteAccount,proto3" json:"vote_account,omitempty"`
	RentSysvar           string `protobuf:"bytes,2,opt,name=rent_sysvar,json=rentSysvar,proto3" json:"rent_sysvar,omitempty"`
	ClockSysvar          string `protobuf:"bytes,3,opt,name=clock_sysvar,json=clockSysvar,proto3" json:"clock_sysvar,omitempty"`
	Node                 string `protobuf:"bytes,4,opt,name=node,proto3" json:"node,omitempty"`
	AuthorizedVoter      string `protobuf:"bytes,5,opt,name=authorized_voter,json=authorizedVoter,proto3" json:"authorized_voter,omitempty"`
	AuthorizedWithdrawer string `protobuf:"bytes,6,opt,name=authorized_withdrawer,json=authorizedWithdrawer,proto3" json:"authorized_withdrawer,omitempty"`
	Commission           uint32 `protobuf:"varint,7,opt,name=commission,proto3" json:"commission,omitempty"`
}

func (x *SolanaVoteInitializeInstruction) Reset() {
	*x = SolanaVoteInitializeInstruction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SolanaVoteInitializeInstruction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SolanaVoteInitializeInstruction) ProtoMessage() {}

func (x *SolanaVoteInitializeInstruction) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SolanaVoteInitializeInstruction.ProtoReflect.Descriptor instead.
func (*SolanaVoteInitializeInstruction) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_solana_proto_rawDescGZIP(), []int{34}
}

func (x *SolanaVoteInitializeInstruction) GetVoteAccount() string {
	if x != nil {
		return x.VoteAccount
	}
	return ""
}

func (x *SolanaVoteInitializeInstruction) GetRentSysvar() string {
	if x != nil {
		return x.RentSysvar
	}
	return ""
}

func (x *SolanaVoteInitializeInstruction) GetClockSysvar() string {
	if x != nil {
		return x.ClockSysvar
	}
	return ""
}

func (x *SolanaVoteInitializeInstruction) GetNode() string {
	if x != nil {
		return x.Node
	}
	return ""
}

func (x *SolanaVoteInitializeInstruction) GetAuthorizedVoter() string {
	if x != nil {
		return x.AuthorizedVoter
	}
	return ""
}

func (x *SolanaVoteInitializeInstruction) GetAuthorizedWithdrawer() string {
	if x != nil {
		return x.AuthorizedWithdrawer
	}
	return ""
}

func (x *SolanaVoteInitializeInstruction) GetCommission() uint32 {
	if x != nil {
		return x.Commission
	}
	return 0
}

type SolanaVoteVoteInstruction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VoteAccount      string                          `protobuf:"bytes,1,opt,name=vote_account,json=voteAccount,proto3" json:"vote_account,omitempty"`
	SlotHashesSysvar string                          `protobuf:"bytes,2,opt,name=slot_hashes_sysvar,json=slotHashesSysvar,proto3" json:"slot_hashes_sysvar,omitempty"`
	ClockSysvar      string                          `protobuf:"bytes,3,opt,name=clock_sysvar,json=clockSysvar,proto3" json:"clock_sysvar,omitempty"`
	VoteAuthority    string                          `protobuf:"bytes,4,opt,name=vote_authority,json=voteAuthority,proto3" json:"vote_authority,omitempty"`
	Vote             *SolanaVoteVoteInstruction_Vote `protobuf:"bytes,5,opt,name=vote,proto3" json:"vote,omitempty"`
}

func (x *SolanaVoteVoteInstruction) Reset() {
	*x = SolanaVoteVoteInstruction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SolanaVoteVoteInstruction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SolanaVoteVoteInstruction) ProtoMessage() {}

func (x *SolanaVoteVoteInstruction) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SolanaVoteVoteInstruction.ProtoReflect.Descriptor instead.
func (*SolanaVoteVoteInstruction) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_solana_proto_rawDescGZIP(), []int{35}
}

func (x *SolanaVoteVoteInstruction) GetVoteAccount() string {
	if x != nil {
		return x.VoteAccount
	}
	return ""
}

func (x *SolanaVoteVoteInstruction) GetSlotHashesSysvar() string {
	if x != nil {
		return x.SlotHashesSysvar
	}
	return ""
}

func (x *SolanaVoteVoteInstruction) GetClockSysvar() string {
	if x != nil {
		return x.ClockSysvar
	}
	return ""
}

func (x *SolanaVoteVoteInstruction) GetVoteAuthority() string {
	if x != nil {
		return x.VoteAuthority
	}
	return ""
}

func (x *SolanaVoteVoteInstruction) GetVote() *SolanaVoteVoteInstruction_Vote {
	if x != nil {
		return x.Vote
	}
	return nil
}

type SolanaVoteWithdrawInstruction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VoteAccount       string `protobuf:"bytes,1,opt,name=vote_account,json=voteAccount,proto3" json:"vote_account,omitempty"`
	Destination       string `protobuf:"bytes,2,opt,name=destination,proto3" json:"destination,omitempty"`
	WithdrawAuthority string `protobuf:"bytes,3,opt,name=withdraw_authority,json=withdrawAuthority,proto3" json:"withdraw_authority,omitempty"`
	Lamports          uint64 `protobuf:"varint,4,opt,name=lamports,proto3" json:"lamports,omitempty"`
}

func (x *SolanaVoteWithdrawInstruction) Reset() {
	*x = SolanaVoteWithdrawInstruction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SolanaVoteWithdrawInstruction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SolanaVoteWithdrawInstruction) ProtoMessage() {}

func (x *SolanaVoteWithdrawInstruction) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SolanaVoteWithdrawInstruction.ProtoReflect.Descriptor instead.
func (*SolanaVoteWithdrawInstruction) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_solana_proto_rawDescGZIP(), []int{36}
}

func (x *SolanaVoteWithdrawInstruction) GetVoteAccount() string {
	if x != nil {
		return x.VoteAccount
	}
	return ""
}

func (x *SolanaVoteWithdrawInstruction) GetDestination() string {
	if x != nil {
		return x.Destination
	}
	return ""
}

func (x *SolanaVoteWithdrawInstruction) GetWithdrawAuthority() string {
	if x != nil {
		return x.WithdrawAuthority
	}
	return ""
}

func (x *SolanaVoteWithdrawInstruction) GetLamports() uint64 {
	if x != nil {
		return x.Lamports
	}
	return 0
}

type SolanaVoteCompactUpdateVoteStateInstruction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VoteAccount     string                                                       `protobuf:"bytes,1,opt,name=vote_account,json=voteAccount,proto3" json:"vote_account,omitempty"`
	VoteAuthority   string                                                       `protobuf:"bytes,2,opt,name=vote_authority,json=voteAuthority,proto3" json:"vote_authority,omitempty"`
	VoteStateUpdate *SolanaVoteCompactUpdateVoteStateInstruction_VoteStateUpdate `protobuf:"bytes,3,opt,name=vote_state_update,json=voteStateUpdate,proto3" json:"vote_state_update,omitempty"`
}

func (x *SolanaVoteCompactUpdateVoteStateInstruction) Reset() {
	*x = SolanaVoteCompactUpdateVoteStateInstruction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SolanaVoteCompactUpdateVoteStateInstruction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SolanaVoteCompactUpdateVoteStateInstruction) ProtoMessage() {}

func (x *SolanaVoteCompactUpdateVoteStateInstruction) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SolanaVoteCompactUpdateVoteStateInstruction.ProtoReflect.Descriptor instead.
func (*SolanaVoteCompactUpdateVoteStateInstruction) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_solana_proto_rawDescGZIP(), []int{37}
}

func (x *SolanaVoteCompactUpdateVoteStateInstruction) GetVoteAccount() string {
	if x != nil {
		return x.VoteAccount
	}
	return ""
}

func (x *SolanaVoteCompactUpdateVoteStateInstruction) GetVoteAuthority() string {
	if x != nil {
		return x.VoteAuthority
	}
	return ""
}

func (x *SolanaVoteCompactUpdateVoteStateInstruction) GetVoteStateUpdate() *SolanaVoteCompactUpdateVoteStateInstruction_VoteStateUpdate {
	if x != nil {
		return x.VoteStateUpdate
	}
	return nil
}

type SolanaSystemCreateAccountInstruction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source     string `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	NewAccount string `protobuf:"bytes,2,opt,name=new_account,json=newAccount,proto3" json:"new_account,omitempty"`
	Lamports   uint64 `protobuf:"varint,3,opt,name=lamports,proto3" json:"lamports,omitempty"`
	Space      uint64 `protobuf:"varint,4,opt,name=space,proto3" json:"space,omitempty"`
	Owner      string `protobuf:"bytes,5,opt,name=owner,proto3" json:"owner,omitempty"`
}

func (x *SolanaSystemCreateAccountInstruction) Reset() {
	*x = SolanaSystemCreateAccountInstruction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SolanaSystemCreateAccountInstruction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SolanaSystemCreateAccountInstruction) ProtoMessage() {}

func (x *SolanaSystemCreateAccountInstruction) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SolanaSystemCreateAccountInstruction.ProtoReflect.Descriptor instead.
func (*SolanaSystemCreateAccountInstruction) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_solana_proto_rawDescGZIP(), []int{38}
}

func (x *SolanaSystemCreateAccountInstruction) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *SolanaSystemCreateAccountInstruction) GetNewAccount() string {
	if x != nil {
		return x.NewAccount
	}
	return ""
}

func (x *SolanaSystemCreateAccountInstruction) GetLamports() uint64 {
	if x != nil {
		return x.Lamports
	}
	return 0
}

func (x *SolanaSystemCreateAccountInstruction) GetSpace() uint64 {
	if x != nil {
		return x.Space
	}
	return 0
}

func (x *SolanaSystemCreateAccountInstruction) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

type SolanaSystemTransferInstruction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source      string `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	Destination string `protobuf:"bytes,2,opt,name=destination,proto3" json:"destination,omitempty"`
	Lamports    uint64 `protobuf:"varint,3,opt,name=lamports,proto3" json:"lamports,omitempty"`
}

func (x *SolanaSystemTransferInstruction) Reset() {
	*x = SolanaSystemTransferInstruction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SolanaSystemTransferInstruction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SolanaSystemTransferInstruction) ProtoMessage() {}

func (x *SolanaSystemTransferInstruction) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SolanaSystemTransferInstruction.ProtoReflect.Descriptor instead.
func (*SolanaSystemTransferInstruction) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_solana_proto_rawDescGZIP(), []int{39}
}

func (x *SolanaSystemTransferInstruction) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *SolanaSystemTransferInstruction) GetDestination() string {
	if x != nil {
		return x.Destination
	}
	return ""
}

func (x *SolanaSystemTransferInstruction) GetLamports() uint64 {
	if x != nil {
		return x.Lamports
	}
	return 0
}

type SolanaSystemCreateAccountWithSeedInstruction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source     string `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	NewAccount string `protobuf:"bytes,2,opt,name=new_account,json=newAccount,proto3" json:"new_account,omitempty"`
	Base       string `protobuf:"bytes,3,opt,name=base,proto3" json:"base,omitempty"`
	Seed       string `protobuf:"bytes,4,opt,name=seed,proto3" json:"seed,omitempty"`
	Lamports   uint64 `protobuf:"varint,5,opt,name=lamports,proto3" json:"lamports,omitempty"`
	Space      uint64 `protobuf:"varint,6,opt,name=space,proto3" json:"space,omitempty"`
	Owner      string `protobuf:"bytes,7,opt,name=owner,proto3" json:"owner,omitempty"`
}

func (x *SolanaSystemCreateAccountWithSeedInstruction) Reset() {
	*x = SolanaSystemCreateAccountWithSeedInstruction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SolanaSystemCreateAccountWithSeedInstruction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SolanaSystemCreateAccountWithSeedInstruction) ProtoMessage() {}

func (x *SolanaSystemCreateAccountWithSeedInstruction) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SolanaSystemCreateAccountWithSeedInstruction.ProtoReflect.Descriptor instead.
func (*SolanaSystemCreateAccountWithSeedInstruction) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_solana_proto_rawDescGZIP(), []int{40}
}

func (x *SolanaSystemCreateAccountWithSeedInstruction) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *SolanaSystemCreateAccountWithSeedInstruction) GetNewAccount() string {
	if x != nil {
		return x.NewAccount
	}
	return ""
}

func (x *SolanaSystemCreateAccountWithSeedInstruction) GetBase() string {
	if x != nil {
		return x.Base
	}
	return ""
}

func (x *SolanaSystemCreateAccountWithSeedInstruction) GetSeed() string {
	if x != nil {
		return x.Seed
	}
	return ""
}

func (x *SolanaSystemCreateAccountWithSeedInstruction) GetLamports() uint64 {
	if x != nil {
		return x.Lamports
	}
	return 0
}

func (x *SolanaSystemCreateAccountWithSeedInstruction) GetSpace() uint64 {
	if x != nil {
		return x.Space
	}
	return 0
}

func (x *SolanaSystemCreateAccountWithSeedInstruction) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

type SolanaSystemTransferWithSeedInstruction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source      string `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	SourceBase  string `protobuf:"bytes,2,opt,name=source_base,json=sourceBase,proto3" json:"source_base,omitempty"`
	Destination string `protobuf:"bytes,3,opt,name=destination,proto3" json:"destination,omitempty"`
	Lamports    uint64 `protobuf:"varint,4,opt,name=lamports,proto3" json:"lamports,omitempty"`
	SourceSeed  string `protobuf:"bytes,5,opt,name=source_seed,json=sourceSeed,proto3" json:"source_seed,omitempty"`
	SourceOwner string `protobuf:"bytes,6,opt,name=source_owner,json=sourceOwner,proto3" json:"source_owner,omitempty"`
}

func (x *SolanaSystemTransferWithSeedInstruction) Reset() {
	*x = SolanaSystemTransferWithSeedInstruction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SolanaSystemTransferWithSeedInstruction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SolanaSystemTransferWithSeedInstruction) ProtoMessage() {}

func (x *SolanaSystemTransferWithSeedInstruction) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SolanaSystemTransferWithSeedInstruction.ProtoReflect.Descriptor instead.
func (*SolanaSystemTransferWithSeedInstruction) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_solana_proto_rawDescGZIP(), []int{41}
}

func (x *SolanaSystemTransferWithSeedInstruction) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *SolanaSystemTransferWithSeedInstruction) GetSourceBase() string {
	if x != nil {
		return x.SourceBase
	}
	return ""
}

func (x *SolanaSystemTransferWithSeedInstruction) GetDestination() string {
	if x != nil {
		return x.Destination
	}
	return ""
}

func (x *SolanaSystemTransferWithSeedInstruction) GetLamports() uint64 {
	if x != nil {
		return x.Lamports
	}
	return 0
}

func (x *SolanaSystemTransferWithSeedInstruction) GetSourceSeed() string {
	if x != nil {
		return x.SourceSeed
	}
	return ""
}

func (x *SolanaSystemTransferWithSeedInstruction) GetSourceOwner() string {
	if x != nil {
		return x.SourceOwner
	}
	return ""
}

type SolanaStakeInitializeInstruction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StakeAccount string                                       `protobuf:"bytes,1,opt,name=stake_account,json=stakeAccount,proto3" json:"stake_account,omitempty"`
	RentSysvar   string                                       `protobuf:"bytes,2,opt,name=rent_sysvar,json=rentSysvar,proto3" json:"rent_sysvar,omitempty"`
	Authorized   *SolanaStakeInitializeInstruction_Authorized `protobuf:"bytes,3,opt,name=authorized,proto3" json:"authorized,omitempty"`
	Lockup       *SolanaStakeInitializeInstruction_Lockup     `protobuf:"bytes,4,opt,name=lockup,proto3" json:"lockup,omitempty"`
}

func (x *SolanaStakeInitializeInstruction) Reset() {
	*x = SolanaStakeInitializeInstruction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SolanaStakeInitializeInstruction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SolanaStakeInitializeInstruction) ProtoMessage() {}

func (x *SolanaStakeInitializeInstruction) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SolanaStakeInitializeInstruction.ProtoReflect.Descriptor instead.
func (*SolanaStakeInitializeInstruction) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_solana_proto_rawDescGZIP(), []int{42}
}

func (x *SolanaStakeInitializeInstruction) GetStakeAccount() string {
	if x != nil {
		return x.StakeAccount
	}
	return ""
}

func (x *SolanaStakeInitializeInstruction) GetRentSysvar() string {
	if x != nil {
		return x.RentSysvar
	}
	return ""
}

func (x *SolanaStakeInitializeInstruction) GetAuthorized() *SolanaStakeInitializeInstruction_Authorized {
	if x != nil {
		return x.Authorized
	}
	return nil
}

func (x *SolanaStakeInitializeInstruction) GetLockup() *SolanaStakeInitializeInstruction_Lockup {
	if x != nil {
		return x.Lockup
	}
	return nil
}

type SolanaStakeDelegateInstruction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StakeAccount       string `protobuf:"bytes,1,opt,name=stake_account,json=stakeAccount,proto3" json:"stake_account,omitempty"`
	VoteAccount        string `protobuf:"bytes,2,opt,name=vote_account,json=voteAccount,proto3" json:"vote_account,omitempty"`
	ClockSysvar        string `protobuf:"bytes,3,opt,name=clock_sysvar,json=clockSysvar,proto3" json:"clock_sysvar,omitempty"`
	StakeHistorySysvar string `protobuf:"bytes,4,opt,name=stake_history_sysvar,json=stakeHistorySysvar,proto3" json:"stake_history_sysvar,omitempty"`
	StakeConfigAccount string `protobuf:"bytes,5,opt,name=stake_config_account,json=stakeConfigAccount,proto3" json:"stake_config_account,omitempty"`
	StakeAuthority     string `protobuf:"bytes,6,opt,name=stake_authority,json=stakeAuthority,proto3" json:"stake_authority,omitempty"`
}

func (x *SolanaStakeDelegateInstruction) Reset() {
	*x = SolanaStakeDelegateInstruction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SolanaStakeDelegateInstruction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SolanaStakeDelegateInstruction) ProtoMessage() {}

func (x *SolanaStakeDelegateInstruction) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SolanaStakeDelegateInstruction.ProtoReflect.Descriptor instead.
func (*SolanaStakeDelegateInstruction) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_solana_proto_rawDescGZIP(), []int{43}
}

func (x *SolanaStakeDelegateInstruction) GetStakeAccount() string {
	if x != nil {
		return x.StakeAccount
	}
	return ""
}

func (x *SolanaStakeDelegateInstruction) GetVoteAccount() string {
	if x != nil {
		return x.VoteAccount
	}
	return ""
}

func (x *SolanaStakeDelegateInstruction) GetClockSysvar() string {
	if x != nil {
		return x.ClockSysvar
	}
	return ""
}

func (x *SolanaStakeDelegateInstruction) GetStakeHistorySysvar() string {
	if x != nil {
		return x.StakeHistorySysvar
	}
	return ""
}

func (x *SolanaStakeDelegateInstruction) GetStakeConfigAccount() string {
	if x != nil {
		return x.StakeConfigAccount
	}
	return ""
}

func (x *SolanaStakeDelegateInstruction) GetStakeAuthority() string {
	if x != nil {
		return x.StakeAuthority
	}
	return ""
}

type SolanaStakeDeactivateInstruction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StakeAccount   string `protobuf:"bytes,1,opt,name=stake_account,json=stakeAccount,proto3" json:"stake_account,omitempty"`
	ClockSysvar    string `protobuf:"bytes,2,opt,name=clock_sysvar,json=clockSysvar,proto3" json:"clock_sysvar,omitempty"`
	StakeAuthority string `protobuf:"bytes,3,opt,name=stake_authority,json=stakeAuthority,proto3" json:"stake_authority,omitempty"`
}

func (x *SolanaStakeDeactivateInstruction) Reset() {
	*x = SolanaStakeDeactivateInstruction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SolanaStakeDeactivateInstruction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SolanaStakeDeactivateInstruction) ProtoMessage() {}

func (x *SolanaStakeDeactivateInstruction) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SolanaStakeDeactivateInstruction.ProtoReflect.Descriptor instead.
func (*SolanaStakeDeactivateInstruction) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_solana_proto_rawDescGZIP(), []int{44}
}

func (x *SolanaStakeDeactivateInstruction) GetStakeAccount() string {
	if x != nil {
		return x.StakeAccount
	}
	return ""
}

func (x *SolanaStakeDeactivateInstruction) GetClockSysvar() string {
	if x != nil {
		return x.ClockSysvar
	}
	return ""
}

func (x *SolanaStakeDeactivateInstruction) GetStakeAuthority() string {
	if x != nil {
		return x.StakeAuthority
	}
	return ""
}

type SolanaStakeMergeInstruction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Destination        string `protobuf:"bytes,1,opt,name=destination,proto3" json:"destination,omitempty"`
	Source             string `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`
	ClockSysvar        string `protobuf:"bytes,3,opt,name=clock_sysvar,json=clockSysvar,proto3" json:"clock_sysvar,omitempty"`
	StakeHistorySysvar string `protobuf:"bytes,4,opt,name=stake_history_sysvar,json=stakeHistorySysvar,proto3" json:"stake_history_sysvar,omitempty"`
	StakeAuthority     string `protobuf:"bytes,5,opt,name=stake_authority,json=stakeAuthority,proto3" json:"stake_authority,omitempty"`
}

func (x *SolanaStakeMergeInstruction) Reset() {
	*x = SolanaStakeMergeInstruction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SolanaStakeMergeInstruction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SolanaStakeMergeInstruction) ProtoMessage() {}

func (x *SolanaStakeMergeInstruction) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SolanaStakeMergeInstruction.ProtoReflect.Descriptor instead.
func (*SolanaStakeMergeInstruction) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_solana_proto_rawDescGZIP(), []int{45}
}

func (x *SolanaStakeMergeInstruction) GetDestination() string {
	if x != nil {
		return x.Destination
	}
	return ""
}

func (x *SolanaStakeMergeInstruction) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *SolanaStakeMergeInstruction) GetClockSysvar() string {
	if x != nil {
		return x.ClockSysvar
	}
	return ""
}

func (x *SolanaStakeMergeInstruction) GetStakeHistorySysvar() string {
	if x != nil {
		return x.StakeHistorySysvar
	}
	return ""
}

func (x *SolanaStakeMergeInstruction) GetStakeAuthority() string {
	if x != nil {
		return x.StakeAuthority
	}
	return ""
}

type SolanaStakeSplitInstruction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StakeAccount    string `protobuf:"bytes,1,opt,name=stake_account,json=stakeAccount,proto3" json:"stake_account,omitempty"`
	NewSplitAccount string `protobuf:"bytes,2,opt,name=new_split_account,json=newSplitAccount,proto3" json:"new_split_account,omitempty"`
	StakeAuthority  string `protobuf:"bytes,3,opt,name=stake_authority,json=stakeAuthority,proto3" json:"stake_authority,omitempty"`
	Lamports        uint64 `protobuf:"varint,4,opt,name=lamports,proto3" json:"lamports,omitempty"`
}

func (x *SolanaStakeSplitInstruction) Reset() {
	*x = SolanaStakeSplitInstruction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SolanaStakeSplitInstruction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SolanaStakeSplitInstruction) ProtoMessage() {}

func (x *SolanaStakeSplitInstruction) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SolanaStakeSplitInstruction.ProtoReflect.Descriptor instead.
func (*SolanaStakeSplitInstruction) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_solana_proto_rawDescGZIP(), []int{46}
}

func (x *SolanaStakeSplitInstruction) GetStakeAccount() string {
	if x != nil {
		return x.StakeAccount
	}
	return ""
}

func (x *SolanaStakeSplitInstruction) GetNewSplitAccount() string {
	if x != nil {
		return x.NewSplitAccount
	}
	return ""
}

func (x *SolanaStakeSplitInstruction) GetStakeAuthority() string {
	if x != nil {
		return x.StakeAuthority
	}
	return ""
}

func (x *SolanaStakeSplitInstruction) GetLamports() uint64 {
	if x != nil {
		return x.Lamports
	}
	return 0
}

type SolanaStakeWithdrawInstruction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StakeAccount       string `protobuf:"bytes,1,opt,name=stake_account,json=stakeAccount,proto3" json:"stake_account,omitempty"`
	Destination        string `protobuf:"bytes,2,opt,name=destination,proto3" json:"destination,omitempty"`
	ClockSysvar        string `protobuf:"bytes,3,opt,name=clock_sysvar,json=clockSysvar,proto3" json:"clock_sysvar,omitempty"`
	StakeHistorySysvar string `protobuf:"bytes,4,opt,name=stake_history_sysvar,json=stakeHistorySysvar,proto3" json:"stake_history_sysvar,omitempty"`
	WithdrawAuthority  string `protobuf:"bytes,5,opt,name=withdraw_authority,json=withdrawAuthority,proto3" json:"withdraw_authority,omitempty"`
	Lamports           uint64 `protobuf:"varint,6,opt,name=lamports,proto3" json:"lamports,omitempty"`
}

func (x *SolanaStakeWithdrawInstruction) Reset() {
	*x = SolanaStakeWithdrawInstruction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SolanaStakeWithdrawInstruction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SolanaStakeWithdrawInstruction) ProtoMessage() {}

func (x *SolanaStakeWithdrawInstruction) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SolanaStakeWithdrawInstruction.ProtoReflect.Descriptor instead.
func (*SolanaStakeWithdrawInstruction) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_solana_proto_rawDescGZIP(), []int{47}
}

func (x *SolanaStakeWithdrawInstruction) GetStakeAccount() string {
	if x != nil {
		return x.StakeAccount
	}
	return ""
}

func (x *SolanaStakeWithdrawInstruction) GetDestination() string {
	if x != nil {
		return x.Destination
	}
	return ""
}

func (x *SolanaStakeWithdrawInstruction) GetClockSysvar() string {
	if x != nil {
		return x.ClockSysvar
	}
	return ""
}

func (x *SolanaStakeWithdrawInstruction) GetStakeHistorySysvar() string {
	if x != nil {
		return x.StakeHistorySysvar
	}
	return ""
}

func (x *SolanaStakeWithdrawInstruction) GetWithdrawAuthority() string {
	if x != nil {
		return x.WithdrawAuthority
	}
	return ""
}

func (x *SolanaStakeWithdrawInstruction) GetLamports() uint64 {
	if x != nil {
		return x.Lamports
	}
	return 0
}

type SolanaSplMemoInstruction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Memo string `protobuf:"bytes,1,opt,name=memo,proto3" json:"memo,omitempty"`
}

func (x *SolanaSplMemoInstruction) Reset() {
	*x = SolanaSplMemoInstruction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SolanaSplMemoInstruction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SolanaSplMemoInstruction) ProtoMessage() {}

func (x *SolanaSplMemoInstruction) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SolanaSplMemoInstruction.ProtoReflect.Descriptor instead.
func (*SolanaSplMemoInstruction) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_solana_proto_rawDescGZIP(), []int{48}
}

func (x *SolanaSplMemoInstruction) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

type SolanaSplTokenGetAccountDataSizeInstruction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mint           string   `protobuf:"bytes,1,opt,name=mint,proto3" json:"mint,omitempty"`
	ExtensionTypes []string `protobuf:"bytes,2,rep,name=extension_types,json=extensionTypes,proto3" json:"extension_types,omitempty"`
}

func (x *SolanaSplTokenGetAccountDataSizeInstruction) Reset() {
	*x = SolanaSplTokenGetAccountDataSizeInstruction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SolanaSplTokenGetAccountDataSizeInstruction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SolanaSplTokenGetAccountDataSizeInstruction) ProtoMessage() {}

func (x *SolanaSplTokenGetAccountDataSizeInstruction) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SolanaSplTokenGetAccountDataSizeInstruction.ProtoReflect.Descriptor instead.
func (*SolanaSplTokenGetAccountDataSizeInstruction) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_solana_proto_rawDescGZIP(), []int{49}
}

func (x *SolanaSplTokenGetAccountDataSizeInstruction) GetMint() string {
	if x != nil {
		return x.Mint
	}
	return ""
}

func (x *SolanaSplTokenGetAccountDataSizeInstruction) GetExtensionTypes() []string {
	if x != nil {
		return x.ExtensionTypes
	}
	return nil
}

type SolanaSplTokenInitializeImmutableOwnerInstruction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Account string `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
}

func (x *SolanaSplTokenInitializeImmutableOwnerInstruction) Reset() {
	*x = SolanaSplTokenInitializeImmutableOwnerInstruction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SolanaSplTokenInitializeImmutableOwnerInstruction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SolanaSplTokenInitializeImmutableOwnerInstruction) ProtoMessage() {}

func (x *SolanaSplTokenInitializeImmutableOwnerInstruction) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SolanaSplTokenInitializeImmutableOwnerInstruction.ProtoReflect.Descriptor instead.
func (*SolanaSplTokenInitializeImmutableOwnerInstruction) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_solana_proto_rawDescGZIP(), []int{50}
}

func (x *SolanaSplTokenInitializeImmutableOwnerInstruction) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

type SolanaSplTokenTransferInstruction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source      string `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	Destination string `protobuf:"bytes,2,opt,name=destination,proto3" json:"destination,omitempty"`
	Authority   string `protobuf:"bytes,3,opt,name=authority,proto3" json:"authority,omitempty"`
	Amount      string `protobuf:"bytes,4,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *SolanaSplTokenTransferInstruction) Reset() {
	*x = SolanaSplTokenTransferInstruction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SolanaSplTokenTransferInstruction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SolanaSplTokenTransferInstruction) ProtoMessage() {}

func (x *SolanaSplTokenTransferInstruction) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SolanaSplTokenTransferInstruction.ProtoReflect.Descriptor instead.
func (*SolanaSplTokenTransferInstruction) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_solana_proto_rawDescGZIP(), []int{51}
}

func (x *SolanaSplTokenTransferInstruction) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *SolanaSplTokenTransferInstruction) GetDestination() string {
	if x != nil {
		return x.Destination
	}
	return ""
}

func (x *SolanaSplTokenTransferInstruction) GetAuthority() string {
	if x != nil {
		return x.Authority
	}
	return ""
}

func (x *SolanaSplTokenTransferInstruction) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

type SolanaAccount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublicKey string `protobuf:"bytes,1,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	Signer    bool   `protobuf:"varint,2,opt,name=signer,proto3" json:"signer,omitempty"`
	Writable  bool   `protobuf:"varint,3,opt,name=writable,proto3" json:"writable,omitempty"`
}

func (x *SolanaAccount) Reset() {
	*x = SolanaAccount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SolanaAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SolanaAccount) ProtoMessage() {}

func (x *SolanaAccount) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SolanaAccount.ProtoReflect.Descriptor instead.
func (*SolanaAccount) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_solana_proto_rawDescGZIP(), []int{52}
}

func (x *SolanaAccount) GetPublicKey() string {
	if x != nil {
		return x.PublicKey
	}
	return ""
}

func (x *SolanaAccount) GetSigner() bool {
	if x != nil {
		return x.Signer
	}
	return false
}

func (x *SolanaAccount) GetWritable() bool {
	if x != nil {
		return x.Writable
	}
	return false
}

type SolanaVoteVoteInstruction_Vote struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Slots     []uint64               `protobuf:"varint,1,rep,packed,name=slots,proto3" json:"slots,omitempty"`
	Hash      string                 `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *SolanaVoteVoteInstruction_Vote) Reset() {
	*x = SolanaVoteVoteInstruction_Vote{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SolanaVoteVoteInstruction_Vote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SolanaVoteVoteInstruction_Vote) ProtoMessage() {}

func (x *SolanaVoteVoteInstruction_Vote) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SolanaVoteVoteInstruction_Vote.ProtoReflect.Descriptor instead.
func (*SolanaVoteVoteInstruction_Vote) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_solana_proto_rawDescGZIP(), []int{35, 0}
}

func (x *SolanaVoteVoteInstruction_Vote) GetSlots() []uint64 {
	if x != nil {
		return x.Slots
	}
	return nil
}

func (x *SolanaVoteVoteInstruction_Vote) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *SolanaVoteVoteInstruction_Vote) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

type SolanaVoteCompactUpdateVoteStateInstruction_Lockout struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConfirmationCount uint64 `protobuf:"varint,1,opt,name=confirmation_count,json=confirmationCount,proto3" json:"confirmation_count,omitempty"`
	Slot              uint64 `protobuf:"varint,2,opt,name=slot,proto3" json:"slot,omitempty"`
}

func (x *SolanaVoteCompactUpdateVoteStateInstruction_Lockout) Reset() {
	*x = SolanaVoteCompactUpdateVoteStateInstruction_Lockout{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SolanaVoteCompactUpdateVoteStateInstruction_Lockout) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SolanaVoteCompactUpdateVoteStateInstruction_Lockout) ProtoMessage() {}

func (x *SolanaVoteCompactUpdateVoteStateInstruction_Lockout) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SolanaVoteCompactUpdateVoteStateInstruction_Lockout.ProtoReflect.Descriptor instead.
func (*SolanaVoteCompactUpdateVoteStateInstruction_Lockout) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_solana_proto_rawDescGZIP(), []int{37, 0}
}

func (x *SolanaVoteCompactUpdateVoteStateInstruction_Lockout) GetConfirmationCount() uint64 {
	if x != nil {
		return x.ConfirmationCount
	}
	return 0
}

func (x *SolanaVoteCompactUpdateVoteStateInstruction_Lockout) GetSlot() uint64 {
	if x != nil {
		return x.Slot
	}
	return 0
}

type SolanaVoteCompactUpdateVoteStateInstruction_VoteStateUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash      string                                                 `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	Lockouts  []*SolanaVoteCompactUpdateVoteStateInstruction_Lockout `protobuf:"bytes,2,rep,name=lockouts,proto3" json:"lockouts,omitempty"`
	Root      uint64                                                 `protobuf:"varint,3,opt,name=root,proto3" json:"root,omitempty"`
	Timestamp *timestamppb.Timestamp                                 `protobuf:"bytes,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *SolanaVoteCompactUpdateVoteStateInstruction_VoteStateUpdate) Reset() {
	*x = SolanaVoteCompactUpdateVoteStateInstruction_VoteStateUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SolanaVoteCompactUpdateVoteStateInstruction_VoteStateUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SolanaVoteCompactUpdateVoteStateInstruction_VoteStateUpdate) ProtoMessage() {}

func (x *SolanaVoteCompactUpdateVoteStateInstruction_VoteStateUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SolanaVoteCompactUpdateVoteStateInstruction_VoteStateUpdate.ProtoReflect.Descriptor instead.
func (*SolanaVoteCompactUpdateVoteStateInstruction_VoteStateUpdate) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_solana_proto_rawDescGZIP(), []int{37, 1}
}

func (x *SolanaVoteCompactUpdateVoteStateInstruction_VoteStateUpdate) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *SolanaVoteCompactUpdateVoteStateInstruction_VoteStateUpdate) GetLockouts() []*SolanaVoteCompactUpdateVoteStateInstruction_Lockout {
	if x != nil {
		return x.Lockouts
	}
	return nil
}

func (x *SolanaVoteCompactUpdateVoteStateInstruction_VoteStateUpdate) GetRoot() uint64 {
	if x != nil {
		return x.Root
	}
	return 0
}

func (x *SolanaVoteCompactUpdateVoteStateInstruction_VoteStateUpdate) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

type SolanaStakeInitializeInstruction_Authorized struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Staker     string `protobuf:"bytes,1,opt,name=staker,proto3" json:"staker,omitempty"`
	Withdrawer string `protobuf:"bytes,2,opt,name=withdrawer,proto3" json:"withdrawer,omitempty"`
}

func (x *SolanaStakeInitializeInstruction_Authorized) Reset() {
	*x = SolanaStakeInitializeInstruction_Authorized{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SolanaStakeInitializeInstruction_Authorized) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SolanaStakeInitializeInstruction_Authorized) ProtoMessage() {}

func (x *SolanaStakeInitializeInstruction_Authorized) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SolanaStakeInitializeInstruction_Authorized.ProtoReflect.Descriptor instead.
func (*SolanaStakeInitializeInstruction_Authorized) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_solana_proto_rawDescGZIP(), []int{42, 0}
}

func (x *SolanaStakeInitializeInstruction_Authorized) GetStaker() string {
	if x != nil {
		return x.Staker
	}
	return ""
}

func (x *SolanaStakeInitializeInstruction_Authorized) GetWithdrawer() string {
	if x != nil {
		return x.Withdrawer
	}
	return ""
}

type SolanaStakeInitializeInstruction_Lockup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UnixTimestamp int64  `protobuf:"varint,1,opt,name=unix_timestamp,json=unixTimestamp,proto3" json:"unix_timestamp,omitempty"`
	Epoch         uint64 `protobuf:"varint,2,opt,name=epoch,proto3" json:"epoch,omitempty"`
	Custodian     string `protobuf:"bytes,3,opt,name=custodian,proto3" json:"custodian,omitempty"`
}

func (x *SolanaStakeInitializeInstruction_Lockup) Reset() {
	*x = SolanaStakeInitializeInstruction_Lockup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SolanaStakeInitializeInstruction_Lockup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SolanaStakeInitializeInstruction_Lockup) ProtoMessage() {}

func (x *SolanaStakeInitializeInstruction_Lockup) ProtoReflect() protoreflect.Message {
	mi := &file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SolanaStakeInitializeInstruction_Lockup.ProtoReflect.Descriptor instead.
func (*SolanaStakeInitializeInstruction_Lockup) Descriptor() ([]byte, []int) {
	return file_coinbase_chainstorage_blockchain_solana_proto_rawDescGZIP(), []int{42, 1}
}

func (x *SolanaStakeInitializeInstruction_Lockup) GetUnixTimestamp() int64 {
	if x != nil {
		return x.UnixTimestamp
	}
	return 0
}

func (x *SolanaStakeInitializeInstruction_Lockup) GetEpoch() uint64 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *SolanaStakeInitializeInstruction_Lockup) GetCustodian() string {
	if x != nil {
		return x.Custodian
	}
	return ""
}

var File_coinbase_chainstorage_blockchain_solana_proto protoreflect.FileDescriptor

var file_coinbase_chainstorage_blockchain_solana_proto_rawDesc = []byte{
	0x0a, 0x2d, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x5f, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x15, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x28, 0x0a, 0x0e, 0x53, 0x6f, 0x6c, 0x61, 0x6e,
	0x61, 0x42, 0x6c, 0x6f, 0x62, 0x64, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x22, 0xd7, 0x01, 0x0a, 0x0b, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x12, 0x3b, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x4c,
	0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x6f, 0x6c,
	0x61, 0x6e, 0x61, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3d, 0x0a, 0x07,
	0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x52, 0x07, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x22, 0xdb, 0x01, 0x0a, 0x0d,
	0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x56, 0x32, 0x12, 0x3b, 0x0a,
	0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x4e, 0x0a, 0x0c, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x32, 0x52, 0x0c, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3d, 0x0a, 0x07, 0x72, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f,
	0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x52, 0x07, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x22, 0xf0, 0x01, 0x0a, 0x0c, 0x53, 0x6f,
	0x6c, 0x61, 0x6e, 0x61, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x72, 0x65,
	0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x6f,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x12, 0x1f, 0x0a,
	0x0b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x39,
	0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0xe1, 0x01, 0x0a,
	0x11, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x49, 0x0a, 0x07, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x69,
	0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x07, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x12, 0x40, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e,
	0x61, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61,
	0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x22, 0xe7, 0x01, 0x0a, 0x13, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x32, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x4b, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x31, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x56, 0x32, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x42, 0x0a, 0x04,
	0x6d, 0x65, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x69,
	0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x56, 0x32, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61,
	0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xf7, 0x03, 0x0a, 0x15, 0x53,
	0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x65, 0x74, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x65, 0x72, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x65, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x03, 0x66, 0x65, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x5f,
	0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0b,
	0x70, 0x72, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x70,
	0x6f, 0x73, 0x74, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x04, 0x52, 0x0c, 0x70, 0x6f, 0x73, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x12, 0x57, 0x0a, 0x12, 0x70, 0x72, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x62, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63,
	0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x10, 0x70, 0x72, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x59, 0x0a, 0x13, 0x70, 0x6f, 0x73,
	0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x53,
	0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x52, 0x11, 0x70, 0x6f, 0x73, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x73, 0x12, 0x5c, 0x0a, 0x12, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x49,
	0x6e, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x11, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x6f, 0x67, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x6f, 0x67, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x3d, 0x0a, 0x07, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73,
	0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x53,
	0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x07, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x73, 0x22, 0xfb, 0x03, 0x0a, 0x17, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x56, 0x32,
	0x12, 0x10, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65,
	0x72, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x65, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x03, 0x66, 0x65, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x5f, 0x62, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x6f, 0x73, 0x74, 0x5f,
	0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0c,
	0x70, 0x6f, 0x73, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x57, 0x0a, 0x12,
	0x70, 0x72, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x52, 0x10, 0x70, 0x72, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x59, 0x0a, 0x13, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e,
	0x61, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x11, 0x70,
	0x6f, 0x73, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x12, 0x5e, 0x0a, 0x12, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63,
	0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x49, 0x6e, 0x6e, 0x65, 0x72,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x32, 0x52, 0x11, 0x69,
	0x6e, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x6f, 0x67, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x6f, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x12, 0x3d, 0x0a, 0x07, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x09,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x6f, 0x6c,
	0x61, 0x6e, 0x61, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x07, 0x72, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x73, 0x22, 0xb0, 0x01, 0x0a, 0x12, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x12,
	0x0a, 0x04, 0x6d, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x69,
	0x6e, 0x74, 0x12, 0x4b, 0x0a, 0x0c, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x0b, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x22, 0x71, 0x0a, 0x11, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x73, 0x12, 0x28,
	0x0a, 0x10, 0x75, 0x69, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x75, 0x69, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x22, 0x7c, 0x0a, 0x16, 0x53, 0x6f, 0x6c, 0x61,
	0x6e, 0x61, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x4c, 0x0a, 0x0c, 0x69, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x49, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x80, 0x01, 0x0a, 0x18, 0x53, 0x6f, 0x6c, 0x61, 0x6e,
	0x61, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x56, 0x32, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x4e, 0x0a, 0x0c, 0x69, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x49, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x32, 0x52, 0x0c, 0x69, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xbf, 0x01, 0x0a, 0x0c, 0x53, 0x6f,
	0x6c, 0x61, 0x6e, 0x61, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x75,
	0x62, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x70, 0x75, 0x62, 0x6b,
	0x65, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6c, 0x61, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x21,
	0x0a, 0x0c, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x70, 0x6f, 0x73, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x20, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x42, 0x15, 0x0a, 0x13, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x7a, 0x0a, 0x18, 0x53,
	0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x7e, 0x0a, 0x1a, 0x53, 0x6f, 0x6c, 0x61, 0x6e,
	0x61, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x56, 0x32, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x53,
	0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x56, 0x32, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x8f, 0x02, 0x0a, 0x0d, 0x53, 0x6f, 0x6c, 0x61,
	0x6e, 0x61, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x42, 0x0a, 0x06, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x69, 0x6e,
	0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x2a, 0x0a,
	0x11, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61,
	0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x4c, 0x0a, 0x0c, 0x69, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x49, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x40, 0x0a, 0x08, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x69, 0x6e,
	0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x08, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x22, 0xb2, 0x02, 0x0a, 0x0f, 0x53, 0x6f,
	0x6c, 0x61, 0x6e, 0x61, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x56, 0x32, 0x12, 0x44, 0x0a,
	0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4b,
	0x65, 0x79, 0x73, 0x12, 0x5d, 0x0a, 0x15, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x13, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x6f, 0x6f, 0x6b, 0x75,
	0x70, 0x73, 0x12, 0x4e, 0x0a, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x56, 0x32, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72,
	0x65, 0x63, 0x65, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x22, 0x70,
	0x0a, 0x0a, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x16, 0x0a, 0x06,
	0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x75,
	0x62, 0x6b, 0x65, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x77, 0x72, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x77, 0x72, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x22, 0x8b, 0x01, 0x0a, 0x12, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x61, 0x64,
	0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x04, 0x52, 0x0f, 0x72, 0x65, 0x61, 0x64, 0x6f, 0x6e, 0x6c, 0x79, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x77, 0x72, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0f, 0x77,
	0x72, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x22, 0xd3,
	0x01, 0x0a, 0x13, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x17, 0x6e, 0x75, 0x6d, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x6e, 0x75, 0x6d, 0x52, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x3f,
	0x0a, 0x1c, 0x6e, 0x75, 0x6d, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x73,
	0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x19, 0x6e, 0x75, 0x6d, 0x52, 0x65, 0x61, 0x64, 0x6f, 0x6e, 0x6c,
	0x79, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12,
	0x43, 0x0a, 0x1e, 0x6e, 0x75, 0x6d, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x6f, 0x6e, 0x6c, 0x79, 0x5f,
	0x75, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1b, 0x6e, 0x75, 0x6d, 0x52, 0x65, 0x61, 0x64,
	0x6f, 0x6e, 0x6c, 0x79, 0x55, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x22, 0xaf, 0x01, 0x0a, 0x11, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x72,
	0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x49, 0x64, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x04, 0x52, 0x08, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61,
	0x6d, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6b,
	0x65, 0x79, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x4b, 0x65, 0x79, 0x73, 0x22, 0x46, 0x0a, 0x14, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61,
	0x52, 0x61, 0x77, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a,
	0x0a, 0x08, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x08, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xdd,
	0x09, 0x0a, 0x13, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x56, 0x32, 0x12, 0x3e, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61,
	0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e,
	0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x52, 0x07, 0x70,
	0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61,
	0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x67,
	0x72, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x56, 0x0a, 0x0f, 0x72, 0x61, 0x77, 0x5f, 0x69, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x52, 0x61, 0x77,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0e, 0x72,
	0x61, 0x77, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x79, 0x0a,
	0x1c, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x5f,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x18, 0x65, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x6f, 0x6c, 0x61,
	0x6e, 0x61, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x48, 0x00, 0x52, 0x19, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x12, 0x5d, 0x0a, 0x12, 0x62, 0x70, 0x66, 0x5f,
	0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x18, 0x66,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x6f, 0x6c,
	0x61, 0x6e, 0x61, 0x42, 0x70, 0x66, 0x4c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x67,
	0x72, 0x61, 0x6d, 0x48, 0x00, 0x52, 0x10, 0x62, 0x70, 0x66, 0x4c, 0x6f, 0x61, 0x64, 0x65, 0x72,
	0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x12, 0x7f, 0x0a, 0x1e, 0x62, 0x70, 0x66, 0x5f, 0x75,
	0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x65,
	0x72, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x18, 0x67, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x38, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x42, 0x70,
	0x66, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x6f, 0x61, 0x64,
	0x65, 0x72, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x48, 0x00, 0x52, 0x1b, 0x62, 0x70, 0x66,
	0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x65,
	0x72, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x12, 0x4d, 0x0a, 0x0c, 0x76, 0x6f, 0x74, 0x65,
	0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x18, 0x68, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x56, 0x6f, 0x74,
	0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x48, 0x00, 0x52, 0x0b, 0x76, 0x6f, 0x74, 0x65,
	0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x12, 0x53, 0x0a, 0x0e, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x18, 0x69, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x48, 0x00, 0x52, 0x0d, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x12, 0x50, 0x0a, 0x0d,
	0x73, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x18, 0x6a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x6f, 0x6c, 0x61,
	0x6e, 0x61, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x48, 0x00,
	0x52, 0x0c, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x12, 0x57,
	0x0a, 0x10, 0x73, 0x70, 0x6c, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72,
	0x61, 0x6d, 0x18, 0x6b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x53, 0x70, 0x6c, 0x4d, 0x65, 0x6d, 0x6f, 0x50, 0x72,
	0x6f, 0x67, 0x72, 0x61, 0x6d, 0x48, 0x00, 0x52, 0x0e, 0x73, 0x70, 0x6c, 0x4d, 0x65, 0x6d, 0x6f,
	0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x12, 0x5a, 0x0a, 0x11, 0x73, 0x70, 0x6c, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x18, 0x6c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e,
	0x61, 0x53, 0x70, 0x6c, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d,
	0x48, 0x00, 0x52, 0x0f, 0x73, 0x70, 0x6c, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x50, 0x72, 0x6f, 0x67,
	0x72, 0x61, 0x6d, 0x12, 0x67, 0x0a, 0x16, 0x73, 0x70, 0x6c, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x5f, 0x32, 0x30, 0x32, 0x32, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x18, 0x6d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x6f, 0x6c, 0x61,
	0x6e, 0x61, 0x53, 0x70, 0x6c, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x32, 0x30, 0x32, 0x32, 0x50, 0x72,
	0x6f, 0x67, 0x72, 0x61, 0x6d, 0x48, 0x00, 0x52, 0x13, 0x73, 0x70, 0x6c, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x32, 0x30, 0x32, 0x32, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x12, 0x8f, 0x01, 0x0a,
	0x24, 0x73, 0x70, 0x6c, 0x5f, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x70, 0x72,
	0x6f, 0x67, 0x72, 0x61, 0x6d, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x63, 0x6f,
	0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x53, 0x70, 0x6c, 0x41, 0x73, 0x73,
	0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x48, 0x00, 0x52, 0x20, 0x73, 0x70,
	0x6c, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x42, 0x0e,
	0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x22, 0x90,
	0x02, 0x0a, 0x1f, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72,
	0x61, 0x6d, 0x12, 0x71, 0x0a, 0x10, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x46, 0x2e, 0x63,
	0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f,
	0x67, 0x72, 0x61, 0x6d, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4b, 0x0a, 0x07, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x53,
	0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x07, 0x75, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x22, 0x1e, 0x0a, 0x0f, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x42, 0x0d, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0xfe, 0x01, 0x0a, 0x16, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x42, 0x70, 0x66, 0x4c,
	0x6f, 0x61, 0x64, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x12, 0x68, 0x0a, 0x10,
	0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3d, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x53,
	0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x42, 0x70, 0x66, 0x4c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x50, 0x72,
	0x6f, 0x67, 0x72, 0x61, 0x6d, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4b, 0x0a, 0x07, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e,
	0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x49, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x07, 0x75, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x22, 0x1e, 0x0a, 0x0f, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x42, 0x0d, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x94, 0x02, 0x0a, 0x21, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x42, 0x70, 0x66,
	0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x65,
	0x72, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x12, 0x73, 0x0a, 0x10, 0x69, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x48, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e,
	0x61, 0x42, 0x70, 0x66, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x4c,
	0x6f, 0x61, 0x64, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x2e, 0x49, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x69, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4b, 0x0a,
	0x07, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f,
	0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x55, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x00, 0x52, 0x07, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x22, 0x1e, 0x0a, 0x0f, 0x49, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a,
	0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x42, 0x0d, 0x0a, 0x0b, 0x69, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xb2, 0x05, 0x0a, 0x11, 0x53, 0x6f,
	0x6c, 0x61, 0x6e, 0x61, 0x56, 0x6f, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x12,
	0x63, 0x0a, 0x10, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x63, 0x6f, 0x69, 0x6e,
	0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x56, 0x6f, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x67,
	0x72, 0x61, 0x6d, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x4b, 0x0a, 0x07, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x18,
	0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65,
	0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x6f,
	0x6c, 0x61, 0x6e, 0x61, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x07, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x12, 0x58, 0x0a, 0x0a, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x18,
	0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65,
	0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x6f,
	0x6c, 0x61, 0x6e, 0x61, 0x56, 0x6f, 0x74, 0x65, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52,
	0x0a, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x12, 0x46, 0x0a, 0x04, 0x76,
	0x6f, 0x74, 0x65, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x6f, 0x69, 0x6e,
	0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x56, 0x6f, 0x74, 0x65, 0x56, 0x6f, 0x74, 0x65,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x04, 0x76,
	0x6f, 0x74, 0x65, 0x12, 0x52, 0x0a, 0x08, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x18,
	0x67, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65,
	0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x6f,
	0x6c, 0x61, 0x6e, 0x61, 0x56, 0x6f, 0x74, 0x65, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x08, 0x77,
	0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x12, 0x7f, 0x0a, 0x19, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x63, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x76, 0x6f, 0x74, 0x65, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x68, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x63, 0x6f, 0x69,
	0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x56, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x63, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x6f, 0x74, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00,
	0x52, 0x16, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56,
	0x6f, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x65, 0x0a, 0x0f, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x49, 0x4e, 0x49, 0x54,
	0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x56, 0x4f, 0x54, 0x45,
	0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x57, 0x49, 0x54, 0x48, 0x44, 0x52, 0x41, 0x57, 0x10, 0x03,
	0x12, 0x1d, 0x0a, 0x19, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x43, 0x54, 0x5f, 0x55, 0x50, 0x44, 0x41,
	0x54, 0x45, 0x5f, 0x56, 0x4f, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x10, 0x04, 0x42,
	0x0d, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xfc,
	0x05, 0x0a, 0x13, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x50,
	0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x12, 0x65, 0x0a, 0x10, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x3a, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x2e, 0x49, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x69, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4b, 0x0a,
	0x07, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f,
	0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x55, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x00, 0x52, 0x07, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x12, 0x64, 0x0a, 0x0e, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x65, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e,
	0x61, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x00, 0x52, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x54, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x18, 0x66, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x36, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e,
	0x61, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x08, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x7e, 0x0a, 0x18, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x73, 0x65,
	0x65, 0x64, 0x18, 0x67, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x57, 0x69, 0x74, 0x68, 0x53, 0x65,
	0x65, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52,
	0x15, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x57, 0x69,
	0x74, 0x68, 0x53, 0x65, 0x65, 0x64, 0x12, 0x6e, 0x0a, 0x12, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x73, 0x65, 0x65, 0x64, 0x18, 0x68, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e,
	0x61, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x57,
	0x69, 0x74, 0x68, 0x53, 0x65, 0x65, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x00, 0x52, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x57, 0x69,
	0x74, 0x68, 0x53, 0x65, 0x65, 0x64, 0x22, 0x76, 0x0a, 0x0f, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45,
	0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x52,
	0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x52, 0x45, 0x41,
	0x54, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f,
	0x53, 0x45, 0x45, 0x44, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46,
	0x45, 0x52, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x53, 0x45, 0x45, 0x44, 0x10, 0x04, 0x42, 0x0d,
	0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xc0, 0x06,
	0x0a, 0x12, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x50, 0x72, 0x6f,
	0x67, 0x72, 0x61, 0x6d, 0x12, 0x64, 0x0a, 0x10, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x39,
	0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x53, 0x74, 0x61,
	0x6b, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x69, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4b, 0x0a, 0x07, 0x75, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f,
	0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x07,
	0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x12, 0x59, 0x0a, 0x0a, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x61, 0x6c, 0x69, 0x7a, 0x65, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x63, 0x6f,
	0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x49,
	0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0a, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x12, 0x53, 0x0a, 0x08, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x18, 0x66,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x6f, 0x6c,
	0x61, 0x6e, 0x61, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x08, 0x64,
	0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x12, 0x59, 0x0a, 0x0a, 0x64, 0x65, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x18, 0x67, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x63, 0x6f,
	0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x44,
	0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0a, 0x64, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x12, 0x4a, 0x0a, 0x05, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x18, 0x68, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x32, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61,
	0x53, 0x74, 0x61, 0x6b, 0x65, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x05, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x12, 0x4a,
	0x0a, 0x05, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x18, 0x69, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e,
	0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x53, 0x74, 0x61, 0x6b,
	0x65, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x00, 0x52, 0x05, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x12, 0x53, 0x0a, 0x08, 0x77, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x18, 0x6a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63,
	0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x53, 0x74, 0x61, 0x6b, 0x65,
	0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x08, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x22,
	0x70, 0x0a, 0x0f, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x0e, 0x0a, 0x0a, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x10, 0x01, 0x12,
	0x0c, 0x0a, 0x08, 0x44, 0x45, 0x4c, 0x45, 0x47, 0x41, 0x54, 0x45, 0x10, 0x02, 0x12, 0x0e, 0x0a,
	0x0a, 0x44, 0x45, 0x41, 0x43, 0x54, 0x49, 0x56, 0x41, 0x54, 0x45, 0x10, 0x03, 0x12, 0x09, 0x0a,
	0x05, 0x4d, 0x45, 0x52, 0x47, 0x45, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x50, 0x4c, 0x49,
	0x54, 0x10, 0x05, 0x12, 0x0c, 0x0a, 0x08, 0x57, 0x49, 0x54, 0x48, 0x44, 0x52, 0x41, 0x57, 0x10,
	0x06, 0x42, 0x0d, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0xf5, 0x01, 0x0a, 0x14, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x53, 0x70, 0x6c, 0x4d, 0x65,
	0x6d, 0x6f, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x12, 0x66, 0x0a, 0x10, 0x69, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x3b, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x6f, 0x6c, 0x61,
	0x6e, 0x61, 0x53, 0x70, 0x6c, 0x4d, 0x65, 0x6d, 0x6f, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d,
	0x2e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x45, 0x0a, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2f, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x53, 0x70,
	0x6c, 0x4d, 0x65, 0x6d, 0x6f, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x00, 0x52, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x22, 0x1f, 0x0a, 0x0f, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x53,
	0x50, 0x4c, 0x5f, 0x4d, 0x45, 0x4d, 0x4f, 0x10, 0x00, 0x42, 0x0d, 0x0a, 0x0b, 0x69, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xa1, 0x05, 0x0a, 0x15, 0x53, 0x6f, 0x6c,
	0x61, 0x6e, 0x61, 0x53, 0x70, 0x6c, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x50, 0x72, 0x6f, 0x67, 0x72,
	0x61, 0x6d, 0x12, 0x67, 0x0a, 0x10, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3c, 0x2e, 0x63,
	0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x53, 0x70, 0x6c, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x69, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4b, 0x0a, 0x07, 0x75,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63,
	0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x55, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52,
	0x07, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x12, 0x77, 0x0a, 0x15, 0x67, 0x65, 0x74, 0x5f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e,
	0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x53, 0x70, 0x6c, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x47, 0x65,
	0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x53, 0x69, 0x7a, 0x65,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x12, 0x67,
	0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x88, 0x01, 0x0a, 0x1a, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65,
	0x5f, 0x69, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x18, 0x66, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x53,
	0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x53, 0x70, 0x6c, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x69,
	0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x49, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x4f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x00, 0x52, 0x18, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x49, 0x6d,
	0x6d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x56, 0x0a, 0x08,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x18, 0x67, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38,
	0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x53, 0x70, 0x6c,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x08, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x22, 0x67, 0x0a, 0x0f, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x47, 0x45, 0x54, 0x5f, 0x41, 0x43, 0x43, 0x4f,
	0x55, 0x4e, 0x54, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x10, 0x01, 0x12,
	0x1e, 0x0a, 0x1a, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x5f, 0x49, 0x4d,
	0x4d, 0x55, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x4f, 0x57, 0x4e, 0x45, 0x52, 0x10, 0x02, 0x12,
	0x0c, 0x0a, 0x08, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x10, 0x03, 0x42, 0x0d, 0x0a,
	0x0b, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x84, 0x02, 0x0a,
	0x19, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x53, 0x70, 0x6c, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x32,
	0x30, 0x32, 0x32, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x12, 0x6b, 0x0a, 0x10, 0x69, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x40, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x6f, 0x6c,
	0x61, 0x6e, 0x61, 0x53, 0x70, 0x6c, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x32, 0x30, 0x32, 0x32, 0x50,
	0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4b, 0x0a, 0x07, 0x75, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x49, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x07, 0x75, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x22, 0x1e, 0x0a, 0x0f, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x42, 0x0d, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x9e, 0x02, 0x0a, 0x26, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x53, 0x70,
	0x6c, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x12, 0x78,
	0x0a, 0x10, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4d, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x53, 0x70, 0x6c, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69,
	0x61, 0x74, 0x65, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4b, 0x0a, 0x07, 0x75, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x69, 0x6e,
	0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x07, 0x75, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x22, 0x1e, 0x0a, 0x0f, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x00, 0x42, 0x0d, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x2e, 0x0a, 0x18, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x55, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x12, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04,
	0x69, 0x6e, 0x66, 0x6f, 0x22, 0x9c, 0x02, 0x0a, 0x1f, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x56,
	0x6f, 0x74, 0x65, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x49, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x76, 0x6f, 0x74, 0x65,
	0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x76, 0x6f, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x72,
	0x65, 0x6e, 0x74, 0x5f, 0x73, 0x79, 0x73, 0x76, 0x61, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x79, 0x73, 0x76, 0x61, 0x72, 0x12, 0x21, 0x0a, 0x0c,
	0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x79, 0x73, 0x76, 0x61, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x79, 0x73, 0x76, 0x61, 0x72, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x6f, 0x64, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65,
	0x64, 0x5f, 0x76, 0x6f, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x56, 0x6f, 0x74, 0x65, 0x72, 0x12, 0x33,
	0x0a, 0x15, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x77, 0x69, 0x74,
	0x68, 0x64, 0x72, 0x61, 0x77, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61,
	0x77, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x22, 0xed, 0x02, 0x0a, 0x19, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x56, 0x6f,
	0x74, 0x65, 0x56, 0x6f, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x76, 0x6f, 0x74, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x76, 0x6f, 0x74, 0x65, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x68, 0x61, 0x73,
	0x68, 0x65, 0x73, 0x5f, 0x73, 0x79, 0x73, 0x76, 0x61, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x73, 0x6c, 0x6f, 0x74, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x53, 0x79, 0x73, 0x76,
	0x61, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x79, 0x73, 0x76,
	0x61, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x53,
	0x79, 0x73, 0x76, 0x61, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x76, 0x6f, 0x74, 0x65, 0x5f, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x76,
	0x6f, 0x74, 0x65, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x49, 0x0a, 0x04,
	0x76, 0x6f, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63, 0x6f, 0x69,
	0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x56, 0x6f, 0x74, 0x65, 0x56, 0x6f, 0x74,
	0x65, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x56, 0x6f, 0x74,
	0x65, 0x52, 0x04, 0x76, 0x6f, 0x74, 0x65, 0x1a, 0x6a, 0x0a, 0x04, 0x56, 0x6f, 0x74, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x04, 0x52, 0x05,
	0x73, 0x6c, 0x6f, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x22, 0xaf, 0x01, 0x0a, 0x1d, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x56, 0x6f,
	0x74, 0x65, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x76, 0x6f, 0x74, 0x65, 0x5f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x76, 0x6f, 0x74,
	0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x12, 0x77, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6d,
	0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6c, 0x61, 0x6d,
	0x70, 0x6f, 0x72, 0x74, 0x73, 0x22, 0xa3, 0x04, 0x0a, 0x2b, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61,
	0x56, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x56, 0x6f, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x76, 0x6f, 0x74, 0x65, 0x5f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x76, 0x6f, 0x74,
	0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x76, 0x6f, 0x74, 0x65,
	0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x76, 0x6f, 0x74, 0x65, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12,
	0x7e, 0x0a, 0x11, 0x76, 0x6f, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x52, 0x2e, 0x63, 0x6f, 0x69,
	0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x56, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x63, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x6f, 0x74, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x56,
	0x6f, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x0f,
	0x76, 0x6f, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x1a,
	0x4c, 0x0a, 0x07, 0x4c, 0x6f, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x12, 0x2d, 0x0a, 0x12, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x6f,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x1a, 0xdb, 0x01,
	0x0a, 0x0f, 0x56, 0x6f, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x66, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x6b, 0x6f, 0x75, 0x74,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e,
	0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x56, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63,
	0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x6f, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4c, 0x6f, 0x63, 0x6b,
	0x6f, 0x75, 0x74, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x72, 0x6f, 0x6f,
	0x74, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0xa7, 0x01, 0x0a, 0x24,
	0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x6e, 0x65, 0x77, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x6e, 0x65, 0x77, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x6c, 0x61, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x08, 0x6c, 0x61, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x22, 0x77, 0x0a, 0x1f, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6c, 0x61, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x22, 0xd7,
	0x01, 0x0a, 0x2c, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x57, 0x69, 0x74, 0x68,
	0x53, 0x65, 0x65, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x65, 0x77, 0x5f, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x65,
	0x77, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x65, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x65, 0x65, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x08, 0x6c, 0x61, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x22, 0xe4, 0x01, 0x0a, 0x27, 0x53, 0x6f, 0x6c,
	0x61, 0x6e, 0x61, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x57, 0x69, 0x74, 0x68, 0x53, 0x65, 0x65, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x61, 0x73, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x08, 0x6c, 0x61, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x73, 0x65, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x65, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x22,
	0xcf, 0x03, 0x0a, 0x20, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x49,
	0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74, 0x61,
	0x6b, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x6e,
	0x74, 0x5f, 0x73, 0x79, 0x73, 0x76, 0x61, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x72, 0x65, 0x6e, 0x74, 0x53, 0x79, 0x73, 0x76, 0x61, 0x72, 0x12, 0x62, 0x0a, 0x0a, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42,
	0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x53, 0x74, 0x61,
	0x6b, 0x65, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x65, 0x64, 0x52, 0x0a, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x12, 0x56,
	0x0a, 0x06, 0x6c, 0x6f, 0x63, 0x6b, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e,
	0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x53, 0x74, 0x61,
	0x6b, 0x65, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4c, 0x6f, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x06,
	0x6c, 0x6f, 0x63, 0x6b, 0x75, 0x70, 0x1a, 0x44, 0x0a, 0x0a, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a,
	0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x65, 0x72, 0x1a, 0x63, 0x0a, 0x06,
	0x4c, 0x6f, 0x63, 0x6b, 0x75, 0x70, 0x12, 0x25, 0x0a, 0x0e, 0x75, 0x6e, 0x69, 0x78, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d,
	0x75, 0x6e, 0x69, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x14, 0x0a,
	0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x65, 0x70,
	0x6f, 0x63, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x64, 0x69, 0x61, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x64, 0x69, 0x61,
	0x6e, 0x22, 0x98, 0x02, 0x0a, 0x1e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x53, 0x74, 0x61, 0x6b,
	0x65, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74, 0x61,
	0x6b, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x76, 0x6f, 0x74,
	0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x76, 0x6f, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c,
	0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x79, 0x73, 0x76, 0x61, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x79, 0x73, 0x76, 0x61, 0x72, 0x12,
	0x30, 0x0a, 0x14, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x5f, 0x73, 0x79, 0x73, 0x76, 0x61, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x73,
	0x74, 0x61, 0x6b, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x79, 0x73, 0x76, 0x61,
	0x72, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x12, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x74,
	0x61, 0x6b, 0x65, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x22, 0x93, 0x01, 0x0a,
	0x20, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x44, 0x65, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x5f,
	0x73, 0x79, 0x73, 0x76, 0x61, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c,
	0x6f, 0x63, 0x6b, 0x53, 0x79, 0x73, 0x76, 0x61, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x74, 0x61,
	0x6b, 0x65, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x22, 0xd5, 0x01, 0x0a, 0x1b, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x53, 0x74, 0x61,
	0x6b, 0x65, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x79, 0x73, 0x76, 0x61, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x79, 0x73, 0x76, 0x61, 0x72, 0x12,
	0x30, 0x0a, 0x14, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x5f, 0x73, 0x79, 0x73, 0x76, 0x61, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x73,
	0x74, 0x61, 0x6b, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x79, 0x73, 0x76, 0x61,
	0x72, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x6b,
	0x65, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x22, 0xb3, 0x01, 0x0a, 0x1b, 0x53,
	0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74,
	0x61, 0x6b, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x2a, 0x0a, 0x11, 0x6e, 0x65, 0x77, 0x5f, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x5f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6e, 0x65, 0x77, 0x53,
	0x70, 0x6c, 0x69, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x73,
	0x74, 0x61, 0x6b, 0x65, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x41, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6c, 0x61, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x73,
	0x22, 0x87, 0x02, 0x0a, 0x1e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x53, 0x74, 0x61, 0x6b, 0x65,
	0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x6b,
	0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6c,
	0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x79, 0x73, 0x76, 0x61, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x79, 0x73, 0x76, 0x61, 0x72, 0x12, 0x30, 0x0a,
	0x14, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x73,
	0x79, 0x73, 0x76, 0x61, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x73, 0x74, 0x61,
	0x6b, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x79, 0x73, 0x76, 0x61, 0x72, 0x12,
	0x2d, 0x0a, 0x12, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x77, 0x69, 0x74,
	0x68, 0x64, 0x72, 0x61, 0x77, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x1a,
	0x0a, 0x08, 0x6c, 0x61, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x08, 0x6c, 0x61, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x22, 0x2e, 0x0a, 0x18, 0x53, 0x6f,
	0x6c, 0x61, 0x6e, 0x61, 0x53, 0x70, 0x6c, 0x4d, 0x65, 0x6d, 0x6f, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x22, 0x6a, 0x0a, 0x2b, 0x53, 0x6f,
	0x6c, 0x61, 0x6e, 0x61, 0x53, 0x70, 0x6c, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x47, 0x65, 0x74, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x53, 0x69, 0x7a, 0x65, 0x49, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x69, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x69, 0x6e, 0x74, 0x12, 0x27, 0x0a,
	0x0f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x73, 0x22, 0x4d, 0x0a, 0x31, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61,
	0x53, 0x70, 0x6c, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x49, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x93, 0x01, 0x0a, 0x21, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61,
	0x53, 0x70, 0x6c, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x62, 0x0a, 0x0d, 0x53,
	0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x69, 0x67, 0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x69, 0x67,
	0x6e, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x77, 0x72, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x77, 0x72, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2a,
	0xe0, 0x01, 0x0a, 0x0d, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61,
	0x6d, 0x12, 0x07, 0x0a, 0x03, 0x52, 0x41, 0x57, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x44,
	0x44, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x4c, 0x4f, 0x4f, 0x4b, 0x55, 0x50, 0x5f, 0x54, 0x41, 0x42,
	0x4c, 0x45, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x42, 0x50, 0x46, 0x5f, 0x4c, 0x6f, 0x61, 0x64,
	0x65, 0x72, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x42, 0x50, 0x46, 0x5f, 0x55, 0x50, 0x47, 0x52,
	0x41, 0x44, 0x45, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x4c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x10, 0x03,
	0x12, 0x08, 0x0a, 0x04, 0x56, 0x4f, 0x54, 0x45, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x59,
	0x53, 0x54, 0x45, 0x4d, 0x10, 0x05, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x54, 0x41, 0x4b, 0x45, 0x10,
	0x06, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x50, 0x4c, 0x5f, 0x4d, 0x45, 0x4d, 0x4f, 0x10, 0x07, 0x12,
	0x0d, 0x0a, 0x09, 0x53, 0x50, 0x4c, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x10, 0x08, 0x12, 0x12,
	0x0a, 0x0e, 0x53, 0x50, 0x4c, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x5f, 0x32, 0x30, 0x32, 0x32,
	0x10, 0x09, 0x12, 0x20, 0x0a, 0x1c, 0x53, 0x50, 0x4c, 0x5f, 0x41, 0x53, 0x53, 0x4f, 0x43, 0x49,
	0x41, 0x54, 0x45, 0x44, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55,
	0x4e, 0x54, 0x10, 0x0a, 0x12, 0x0c, 0x0a, 0x08, 0x55, 0x4e, 0x50, 0x41, 0x52, 0x53, 0x45, 0x44,
	0x10, 0x0b, 0x42, 0x3f, 0x5a, 0x3d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x63, 0x6f,
	0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_coinbase_chainstorage_blockchain_solana_proto_rawDescOnce sync.Once
	file_coinbase_chainstorage_blockchain_solana_proto_rawDescData = file_coinbase_chainstorage_blockchain_solana_proto_rawDesc
)

func file_coinbase_chainstorage_blockchain_solana_proto_rawDescGZIP() []byte {
	file_coinbase_chainstorage_blockchain_solana_proto_rawDescOnce.Do(func() {
		file_coinbase_chainstorage_blockchain_solana_proto_rawDescData = protoimpl.X.CompressGZIP(file_coinbase_chainstorage_blockchain_solana_proto_rawDescData)
	})
	return file_coinbase_chainstorage_blockchain_solana_proto_rawDescData
}

var file_coinbase_chainstorage_blockchain_solana_proto_enumTypes = make([]protoimpl.EnumInfo, 11)
var file_coinbase_chainstorage_blockchain_solana_proto_msgTypes = make([]protoimpl.MessageInfo, 58)
var file_coinbase_chainstorage_blockchain_solana_proto_goTypes = []interface{}{
	(SolanaProgram)(0), // 0: coinbase.chainstorage.SolanaProgram
	(SolanaAddressLookupTableProgram_InstructionType)(0),                // 1: coinbase.chainstorage.SolanaAddressLookupTableProgram.InstructionType
	(SolanaBpfLoaderProgram_InstructionType)(0),                         // 2: coinbase.chainstorage.SolanaBpfLoaderProgram.InstructionType
	(SolanaBpfUpgradeableLoaderProgram_InstructionType)(0),              // 3: coinbase.chainstorage.SolanaBpfUpgradeableLoaderProgram.InstructionType
	(SolanaVoteProgram_InstructionType)(0),                              // 4: coinbase.chainstorage.SolanaVoteProgram.InstructionType
	(SolanaSystemProgram_InstructionType)(0),                            // 5: coinbase.chainstorage.SolanaSystemProgram.InstructionType
	(SolanaStakeProgram_InstructionType)(0),                             // 6: coinbase.chainstorage.SolanaStakeProgram.InstructionType
	(SolanaSplMemoProgram_InstructionType)(0),                           // 7: coinbase.chainstorage.SolanaSplMemoProgram.InstructionType
	(SolanaSplTokenProgram_InstructionType)(0),                          // 8: coinbase.chainstorage.SolanaSplTokenProgram.InstructionType
	(SolanaSplToken2022Program_InstructionType)(0),                      // 9: coinbase.chainstorage.SolanaSplToken2022Program.InstructionType
	(SolanaSplAssociatedTokenAccountProgram_InstructionType)(0),         // 10: coinbase.chainstorage.SolanaSplAssociatedTokenAccountProgram.InstructionType
	(*SolanaBlobdata)(nil),                                              // 11: coinbase.chainstorage.SolanaBlobdata
	(*SolanaBlock)(nil),                                                 // 12: coinbase.chainstorage.SolanaBlock
	(*SolanaBlockV2)(nil),                                               // 13: coinbase.chainstorage.SolanaBlockV2
	(*SolanaHeader)(nil),                                                // 14: coinbase.chainstorage.SolanaHeader
	(*SolanaTransaction)(nil),                                           // 15: coinbase.chainstorage.SolanaTransaction
	(*SolanaTransactionV2)(nil),                                         // 16: coinbase.chainstorage.SolanaTransactionV2
	(*SolanaTransactionMeta)(nil),                                       // 17: coinbase.chainstorage.SolanaTransactionMeta
	(*SolanaTransactionMetaV2)(nil),                                     // 18: coinbase.chainstorage.SolanaTransactionMetaV2
	(*SolanaTokenBalance)(nil),                                          // 19: coinbase.chainstorage.SolanaTokenBalance
	(*SolanaTokenAmount)(nil),                                           // 20: coinbase.chainstorage.SolanaTokenAmount
	(*SolanaInnerInstruction)(nil),                                      // 21: coinbase.chainstorage.SolanaInnerInstruction
	(*SolanaInnerInstructionV2)(nil),                                    // 22: coinbase.chainstorage.SolanaInnerInstructionV2
	(*SolanaReward)(nil),                                                // 23: coinbase.chainstorage.SolanaReward
	(*SolanaTransactionPayload)(nil),                                    // 24: coinbase.chainstorage.SolanaTransactionPayload
	(*SolanaTransactionPayloadV2)(nil),                                  // 25: coinbase.chainstorage.SolanaTransactionPayloadV2
	(*SolanaMessage)(nil),                                               // 26: coinbase.chainstorage.SolanaMessage
	(*SolanaMessageV2)(nil),                                             // 27: coinbase.chainstorage.SolanaMessageV2
	(*AccountKey)(nil),                                                  // 28: coinbase.chainstorage.AccountKey
	(*AddressTableLookup)(nil),                                          // 29: coinbase.chainstorage.AddressTableLookup
	(*SolanaMessageHeader)(nil),                                         // 30: coinbase.chainstorage.SolanaMessageHeader
	(*SolanaInstruction)(nil),                                           // 31: coinbase.chainstorage.SolanaInstruction
	(*SolanaRawInstruction)(nil),                                        // 32: coinbase.chainstorage.SolanaRawInstruction
	(*SolanaInstructionV2)(nil),                                         // 33: coinbase.chainstorage.SolanaInstructionV2
	(*SolanaAddressLookupTableProgram)(nil),                             // 34: coinbase.chainstorage.SolanaAddressLookupTableProgram
	(*SolanaBpfLoaderProgram)(nil),                                      // 35: coinbase.chainstorage.SolanaBpfLoaderProgram
	(*SolanaBpfUpgradeableLoaderProgram)(nil),                           // 36: coinbase.chainstorage.SolanaBpfUpgradeableLoaderProgram
	(*SolanaVoteProgram)(nil),                                           // 37: coinbase.chainstorage.SolanaVoteProgram
	(*SolanaSystemProgram)(nil),                                         // 38: coinbase.chainstorage.SolanaSystemProgram
	(*SolanaStakeProgram)(nil),                                          // 39: coinbase.chainstorage.SolanaStakeProgram
	(*SolanaSplMemoProgram)(nil),                                        // 40: coinbase.chainstorage.SolanaSplMemoProgram
	(*SolanaSplTokenProgram)(nil),                                       // 41: coinbase.chainstorage.SolanaSplTokenProgram
	(*SolanaSplToken2022Program)(nil),                                   // 42: coinbase.chainstorage.SolanaSplToken2022Program
	(*SolanaSplAssociatedTokenAccountProgram)(nil),                      // 43: coinbase.chainstorage.SolanaSplAssociatedTokenAccountProgram
	(*SolanaUnknownInstruction)(nil),                                    // 44: coinbase.chainstorage.SolanaUnknownInstruction
	(*SolanaVoteInitializeInstruction)(nil),                             // 45: coinbase.chainstorage.SolanaVoteInitializeInstruction
	(*SolanaVoteVoteInstruction)(nil),                                   // 46: coinbase.chainstorage.SolanaVoteVoteInstruction
	(*SolanaVoteWithdrawInstruction)(nil),                               // 47: coinbase.chainstorage.SolanaVoteWithdrawInstruction
	(*SolanaVoteCompactUpdateVoteStateInstruction)(nil),                 // 48: coinbase.chainstorage.SolanaVoteCompactUpdateVoteStateInstruction
	(*SolanaSystemCreateAccountInstruction)(nil),                        // 49: coinbase.chainstorage.SolanaSystemCreateAccountInstruction
	(*SolanaSystemTransferInstruction)(nil),                             // 50: coinbase.chainstorage.SolanaSystemTransferInstruction
	(*SolanaSystemCreateAccountWithSeedInstruction)(nil),                // 51: coinbase.chainstorage.SolanaSystemCreateAccountWithSeedInstruction
	(*SolanaSystemTransferWithSeedInstruction)(nil),                     // 52: coinbase.chainstorage.SolanaSystemTransferWithSeedInstruction
	(*SolanaStakeInitializeInstruction)(nil),                            // 53: coinbase.chainstorage.SolanaStakeInitializeInstruction
	(*SolanaStakeDelegateInstruction)(nil),                              // 54: coinbase.chainstorage.SolanaStakeDelegateInstruction
	(*SolanaStakeDeactivateInstruction)(nil),                            // 55: coinbase.chainstorage.SolanaStakeDeactivateInstruction
	(*SolanaStakeMergeInstruction)(nil),                                 // 56: coinbase.chainstorage.SolanaStakeMergeInstruction
	(*SolanaStakeSplitInstruction)(nil),                                 // 57: coinbase.chainstorage.SolanaStakeSplitInstruction
	(*SolanaStakeWithdrawInstruction)(nil),                              // 58: coinbase.chainstorage.SolanaStakeWithdrawInstruction
	(*SolanaSplMemoInstruction)(nil),                                    // 59: coinbase.chainstorage.SolanaSplMemoInstruction
	(*SolanaSplTokenGetAccountDataSizeInstruction)(nil),                 // 60: coinbase.chainstorage.SolanaSplTokenGetAccountDataSizeInstruction
	(*SolanaSplTokenInitializeImmutableOwnerInstruction)(nil),           // 61: coinbase.chainstorage.SolanaSplTokenInitializeImmutableOwnerInstruction
	(*SolanaSplTokenTransferInstruction)(nil),                           // 62: coinbase.chainstorage.SolanaSplTokenTransferInstruction
	(*SolanaAccount)(nil),                                               // 63: coinbase.chainstorage.SolanaAccount
	(*SolanaVoteVoteInstruction_Vote)(nil),                              // 64: coinbase.chainstorage.SolanaVoteVoteInstruction.Vote
	(*SolanaVoteCompactUpdateVoteStateInstruction_Lockout)(nil),         // 65: coinbase.chainstorage.SolanaVoteCompactUpdateVoteStateInstruction.Lockout
	(*SolanaVoteCompactUpdateVoteStateInstruction_VoteStateUpdate)(nil), // 66: coinbase.chainstorage.SolanaVoteCompactUpdateVoteStateInstruction.VoteStateUpdate
	(*SolanaStakeInitializeInstruction_Authorized)(nil),                 // 67: coinbase.chainstorage.SolanaStakeInitializeInstruction.Authorized
	(*SolanaStakeInitializeInstruction_Lockup)(nil),                     // 68: coinbase.chainstorage.SolanaStakeInitializeInstruction.Lockup
	(*timestamppb.Timestamp)(nil),                                       // 69: google.protobuf.Timestamp
}
var file_coinbase_chainstorage_blockchain_solana_proto_depIdxs = []int32{
	14, // 0: coinbase.chainstorage.SolanaBlock.header:type_name -> coinbase.chainstorage.SolanaHeader
	15, // 1: coinbase.chainstorage.SolanaBlock.transactions:type_name -> coinbase.chainstorage.SolanaTransaction
	23, // 2: coinbase.chainstorage.SolanaBlock.rewards:type_name -> coinbase.chainstorage.SolanaReward
	14, // 3: coinbase.chainstorage.SolanaBlockV2.header:type_name -> coinbase.chainstorage.SolanaHeader
	16, // 4: coinbase.chainstorage.SolanaBlockV2.transactions:type_name -> coinbase.chainstorage.SolanaTransactionV2
	23, // 5: coinbase.chainstorage.SolanaBlockV2.rewards:type_name -> coinbase.chainstorage.SolanaReward
	69, // 6: coinbase.chainstorage.SolanaHeader.block_time:type_name -> google.protobuf.Timestamp
	24, // 7: coinbase.chainstorage.SolanaTransaction.payload:type_name -> coinbase.chainstorage.SolanaTransactionPayload
	17, // 8: coinbase.chainstorage.SolanaTransaction.meta:type_name -> coinbase.chainstorage.SolanaTransactionMeta
	25, // 9: coinbase.chainstorage.SolanaTransactionV2.payload:type_name -> coinbase.chainstorage.SolanaTransactionPayloadV2
	18, // 10: coinbase.chainstorage.SolanaTransactionV2.meta:type_name -> coinbase.chainstorage.SolanaTransactionMetaV2
	19, // 11: coinbase.chainstorage.SolanaTransactionMeta.pre_token_balances:type_name -> coinbase.chainstorage.SolanaTokenBalance
	19, // 12: coinbase.chainstorage.SolanaTransactionMeta.post_token_balances:type_name -> coinbase.chainstorage.SolanaTokenBalance
	21, // 13: coinbase.chainstorage.SolanaTransactionMeta.inner_instructions:type_name -> coinbase.chainstorage.SolanaInnerInstruction
	23, // 14: coinbase.chainstorage.SolanaTransactionMeta.rewards:type_name -> coinbase.chainstorage.SolanaReward
	19, // 15: coinbase.chainstorage.SolanaTransactionMetaV2.pre_token_balances:type_name -> coinbase.chainstorage.SolanaTokenBalance
	19, // 16: coinbase.chainstorage.SolanaTransactionMetaV2.post_token_balances:type_name -> coinbase.chainstorage.SolanaTokenBalance
	22, // 17: coinbase.chainstorage.SolanaTransactionMetaV2.inner_instructions:type_name -> coinbase.chainstorage.SolanaInnerInstructionV2
	23, // 18: coinbase.chainstorage.SolanaTransactionMetaV2.rewards:type_name -> coinbase.chainstorage.SolanaReward
	20, // 19: coinbase.chainstorage.SolanaTokenBalance.token_amount:type_name -> coinbase.chainstorage.SolanaTokenAmount
	31, // 20: coinbase.chainstorage.SolanaInnerInstruction.instructions:type_name -> coinbase.chainstorage.SolanaInstruction
	33, // 21: coinbase.chainstorage.SolanaInnerInstructionV2.instructions:type_name -> coinbase.chainstorage.SolanaInstructionV2
	26, // 22: coinbase.chainstorage.SolanaTransactionPayload.message:type_name -> coinbase.chainstorage.SolanaMessage
	27, // 23: coinbase.chainstorage.SolanaTransactionPayloadV2.message:type_name -> coinbase.chainstorage.SolanaMessageV2
	30, // 24: coinbase.chainstorage.SolanaMessage.header:type_name -> coinbase.chainstorage.SolanaMessageHeader
	31, // 25: coinbase.chainstorage.SolanaMessage.instructions:type_name -> coinbase.chainstorage.SolanaInstruction
	63, // 26: coinbase.chainstorage.SolanaMessage.accounts:type_name -> coinbase.chainstorage.SolanaAccount
	28, // 27: coinbase.chainstorage.SolanaMessageV2.account_keys:type_name -> coinbase.chainstorage.AccountKey
	29, // 28: coinbase.chainstorage.SolanaMessageV2.address_table_lookups:type_name -> coinbase.chainstorage.AddressTableLookup
	33, // 29: coinbase.chainstorage.SolanaMessageV2.instructions:type_name -> coinbase.chainstorage.SolanaInstructionV2
	0,  // 30: coinbase.chainstorage.SolanaInstructionV2.program:type_name -> coinbase.chainstorage.SolanaProgram
	32, // 31: coinbase.chainstorage.SolanaInstructionV2.raw_instruction:type_name -> coinbase.chainstorage.SolanaRawInstruction
	34, // 32: coinbase.chainstorage.SolanaInstructionV2.address_lookup_table_program:type_name -> coinbase.chainstorage.SolanaAddressLookupTableProgram
	35, // 33: coinbase.chainstorage.SolanaInstructionV2.bpf_loader_program:type_name -> coinbase.chainstorage.SolanaBpfLoaderProgram
	36, // 34: coinbase.chainstorage.SolanaInstructionV2.bpf_upgradeable_loader_program:type_name -> coinbase.chainstorage.SolanaBpfUpgradeableLoaderProgram
	37, // 35: coinbase.chainstorage.SolanaInstructionV2.vote_program:type_name -> coinbase.chainstorage.SolanaVoteProgram
	38, // 36: coinbase.chainstorage.SolanaInstructionV2.system_program:type_name -> coinbase.chainstorage.SolanaSystemProgram
	39, // 37: coinbase.chainstorage.SolanaInstructionV2.stake_program:type_name -> coinbase.chainstorage.SolanaStakeProgram
	40, // 38: coinbase.chainstorage.SolanaInstructionV2.spl_memo_program:type_name -> coinbase.chainstorage.SolanaSplMemoProgram
	41, // 39: coinbase.chainstorage.SolanaInstructionV2.spl_token_program:type_name -> coinbase.chainstorage.SolanaSplTokenProgram
	42, // 40: coinbase.chainstorage.SolanaInstructionV2.spl_token_2022_program:type_name -> coinbase.chainstorage.SolanaSplToken2022Program
	43, // 41: coinbase.chainstorage.SolanaInstructionV2.spl_associated_token_account_program:type_name -> coinbase.chainstorage.SolanaSplAssociatedTokenAccountProgram
	1,  // 42: coinbase.chainstorage.SolanaAddressLookupTableProgram.instruction_type:type_name -> coinbase.chainstorage.SolanaAddressLookupTableProgram.InstructionType
	44, // 43: coinbase.chainstorage.SolanaAddressLookupTableProgram.unknown:type_name -> coinbase.chainstorage.SolanaUnknownInstruction
	2,  // 44: coinbase.chainstorage.SolanaBpfLoaderProgram.instruction_type:type_name -> coinbase.chainstorage.SolanaBpfLoaderProgram.InstructionType
	44, // 45: coinbase.chainstorage.SolanaBpfLoaderProgram.unknown:type_name -> coinbase.chainstorage.SolanaUnknownInstruction
	3,  // 46: coinbase.chainstorage.SolanaBpfUpgradeableLoaderProgram.instruction_type:type_name -> coinbase.chainstorage.SolanaBpfUpgradeableLoaderProgram.InstructionType
	44, // 47: coinbase.chainstorage.SolanaBpfUpgradeableLoaderProgram.unknown:type_name -> coinbase.chainstorage.SolanaUnknownInstruction
	4,  // 48: coinbase.chainstorage.SolanaVoteProgram.instruction_type:type_name -> coinbase.chainstorage.SolanaVoteProgram.InstructionType
	44, // 49: coinbase.chainstorage.SolanaVoteProgram.unknown:type_name -> coinbase.chainstorage.SolanaUnknownInstruction
	45, // 50: coinbase.chainstorage.SolanaVoteProgram.initialize:type_name -> coinbase.chainstorage.SolanaVoteInitializeInstruction
	46, // 51: coinbase.chainstorage.SolanaVoteProgram.vote:type_name -> coinbase.chainstorage.SolanaVoteVoteInstruction
	47, // 52: coinbase.chainstorage.SolanaVoteProgram.withdraw:type_name -> coinbase.chainstorage.SolanaVoteWithdrawInstruction
	48, // 53: coinbase.chainstorage.SolanaVoteProgram.compact_update_vote_state:type_name -> coinbase.chainstorage.SolanaVoteCompactUpdateVoteStateInstruction
	5,  // 54: coinbase.chainstorage.SolanaSystemProgram.instruction_type:type_name -> coinbase.chainstorage.SolanaSystemProgram.InstructionType
	44, // 55: coinbase.chainstorage.SolanaSystemProgram.unknown:type_name -> coinbase.chainstorage.SolanaUnknownInstruction
	49, // 56: coinbase.chainstorage.SolanaSystemProgram.create_account:type_name -> coinbase.chainstorage.SolanaSystemCreateAccountInstruction
	50, // 57: coinbase.chainstorage.SolanaSystemProgram.transfer:type_name -> coinbase.chainstorage.SolanaSystemTransferInstruction
	51, // 58: coinbase.chainstorage.SolanaSystemProgram.create_account_with_seed:type_name -> coinbase.chainstorage.SolanaSystemCreateAccountWithSeedInstruction
	52, // 59: coinbase.chainstorage.SolanaSystemProgram.transfer_with_seed:type_name -> coinbase.chainstorage.SolanaSystemTransferWithSeedInstruction
	6,  // 60: coinbase.chainstorage.SolanaStakeProgram.instruction_type:type_name -> coinbase.chainstorage.SolanaStakeProgram.InstructionType
	44, // 61: coinbase.chainstorage.SolanaStakeProgram.unknown:type_name -> coinbase.chainstorage.SolanaUnknownInstruction
	53, // 62: coinbase.chainstorage.SolanaStakeProgram.initialize:type_name -> coinbase.chainstorage.SolanaStakeInitializeInstruction
	54, // 63: coinbase.chainstorage.SolanaStakeProgram.delegate:type_name -> coinbase.chainstorage.SolanaStakeDelegateInstruction
	55, // 64: coinbase.chainstorage.SolanaStakeProgram.deactivate:type_name -> coinbase.chainstorage.SolanaStakeDeactivateInstruction
	56, // 65: coinbase.chainstorage.SolanaStakeProgram.merge:type_name -> coinbase.chainstorage.SolanaStakeMergeInstruction
	57, // 66: coinbase.chainstorage.SolanaStakeProgram.split:type_name -> coinbase.chainstorage.SolanaStakeSplitInstruction
	58, // 67: coinbase.chainstorage.SolanaStakeProgram.withdraw:type_name -> coinbase.chainstorage.SolanaStakeWithdrawInstruction
	7,  // 68: coinbase.chainstorage.SolanaSplMemoProgram.instruction_type:type_name -> coinbase.chainstorage.SolanaSplMemoProgram.InstructionType
	59, // 69: coinbase.chainstorage.SolanaSplMemoProgram.memo:type_name -> coinbase.chainstorage.SolanaSplMemoInstruction
	8,  // 70: coinbase.chainstorage.SolanaSplTokenProgram.instruction_type:type_name -> coinbase.chainstorage.SolanaSplTokenProgram.InstructionType
	44, // 71: coinbase.chainstorage.SolanaSplTokenProgram.unknown:type_name -> coinbase.chainstorage.SolanaUnknownInstruction
	60, // 72: coinbase.chainstorage.SolanaSplTokenProgram.get_account_data_size:type_name -> coinbase.chainstorage.SolanaSplTokenGetAccountDataSizeInstruction
	61, // 73: coinbase.chainstorage.SolanaSplTokenProgram.initialize_immutable_owner:type_name -> coinbase.chainstorage.SolanaSplTokenInitializeImmutableOwnerInstruction
	62, // 74: coinbase.chainstorage.SolanaSplTokenProgram.transfer:type_name -> coinbase.chainstorage.SolanaSplTokenTransferInstruction
	9,  // 75: coinbase.chainstorage.SolanaSplToken2022Program.instruction_type:type_name -> coinbase.chainstorage.SolanaSplToken2022Program.InstructionType
	44, // 76: coinbase.chainstorage.SolanaSplToken2022Program.unknown:type_name -> coinbase.chainstorage.SolanaUnknownInstruction
	10, // 77: coinbase.chainstorage.SolanaSplAssociatedTokenAccountProgram.instruction_type:type_name -> coinbase.chainstorage.SolanaSplAssociatedTokenAccountProgram.InstructionType
	44, // 78: coinbase.chainstorage.SolanaSplAssociatedTokenAccountProgram.unknown:type_name -> coinbase.chainstorage.SolanaUnknownInstruction
	64, // 79: coinbase.chainstorage.SolanaVoteVoteInstruction.vote:type_name -> coinbase.chainstorage.SolanaVoteVoteInstruction.Vote
	66, // 80: coinbase.chainstorage.SolanaVoteCompactUpdateVoteStateInstruction.vote_state_update:type_name -> coinbase.chainstorage.SolanaVoteCompactUpdateVoteStateInstruction.VoteStateUpdate
	67, // 81: coinbase.chainstorage.SolanaStakeInitializeInstruction.authorized:type_name -> coinbase.chainstorage.SolanaStakeInitializeInstruction.Authorized
	68, // 82: coinbase.chainstorage.SolanaStakeInitializeInstruction.lockup:type_name -> coinbase.chainstorage.SolanaStakeInitializeInstruction.Lockup
	69, // 83: coinbase.chainstorage.SolanaVoteVoteInstruction.Vote.timestamp:type_name -> google.protobuf.Timestamp
	65, // 84: coinbase.chainstorage.SolanaVoteCompactUpdateVoteStateInstruction.VoteStateUpdate.lockouts:type_name -> coinbase.chainstorage.SolanaVoteCompactUpdateVoteStateInstruction.Lockout
	69, // 85: coinbase.chainstorage.SolanaVoteCompactUpdateVoteStateInstruction.VoteStateUpdate.timestamp:type_name -> google.protobuf.Timestamp
	86, // [86:86] is the sub-list for method output_type
	86, // [86:86] is the sub-list for method input_type
	86, // [86:86] is the sub-list for extension type_name
	86, // [86:86] is the sub-list for extension extendee
	0,  // [0:86] is the sub-list for field type_name
}

func init() { file_coinbase_chainstorage_blockchain_solana_proto_init() }
func file_coinbase_chainstorage_blockchain_solana_proto_init() {
	if File_coinbase_chainstorage_blockchain_solana_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SolanaBlobdata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SolanaBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SolanaBlockV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SolanaHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SolanaTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SolanaTransactionV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SolanaTransactionMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SolanaTransactionMetaV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SolanaTokenBalance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SolanaTokenAmount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SolanaInnerInstruction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SolanaInnerInstructionV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SolanaReward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SolanaTransactionPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SolanaTransactionPayloadV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SolanaMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SolanaMessageV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddressTableLookup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SolanaMessageHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SolanaInstruction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SolanaRawInstruction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SolanaInstructionV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SolanaAddressLookupTableProgram); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SolanaBpfLoaderProgram); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SolanaBpfUpgradeableLoaderProgram); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SolanaVoteProgram); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SolanaSystemProgram); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SolanaStakeProgram); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SolanaSplMemoProgram); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SolanaSplTokenProgram); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SolanaSplToken2022Program); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SolanaSplAssociatedTokenAccountProgram); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SolanaUnknownInstruction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SolanaVoteInitializeInstruction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SolanaVoteVoteInstruction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SolanaVoteWithdrawInstruction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SolanaVoteCompactUpdateVoteStateInstruction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SolanaSystemCreateAccountInstruction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SolanaSystemTransferInstruction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SolanaSystemCreateAccountWithSeedInstruction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SolanaSystemTransferWithSeedInstruction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SolanaStakeInitializeInstruction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SolanaStakeDelegateInstruction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SolanaStakeDeactivateInstruction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SolanaStakeMergeInstruction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SolanaStakeSplitInstruction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SolanaStakeWithdrawInstruction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SolanaSplMemoInstruction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SolanaSplTokenGetAccountDataSizeInstruction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SolanaSplTokenInitializeImmutableOwnerInstruction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SolanaSplTokenTransferInstruction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SolanaAccount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SolanaVoteVoteInstruction_Vote); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SolanaVoteCompactUpdateVoteStateInstruction_Lockout); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SolanaVoteCompactUpdateVoteStateInstruction_VoteStateUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SolanaStakeInitializeInstruction_Authorized); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SolanaStakeInitializeInstruction_Lockup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[12].OneofWrappers = []interface{}{
		(*SolanaReward_Commission)(nil),
	}
	file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[22].OneofWrappers = []interface{}{
		(*SolanaInstructionV2_RawInstruction)(nil),
		(*SolanaInstructionV2_AddressLookupTableProgram)(nil),
		(*SolanaInstructionV2_BpfLoaderProgram)(nil),
		(*SolanaInstructionV2_BpfUpgradeableLoaderProgram)(nil),
		(*SolanaInstructionV2_VoteProgram)(nil),
		(*SolanaInstructionV2_SystemProgram)(nil),
		(*SolanaInstructionV2_StakeProgram)(nil),
		(*SolanaInstructionV2_SplMemoProgram)(nil),
		(*SolanaInstructionV2_SplTokenProgram)(nil),
		(*SolanaInstructionV2_SplToken_2022Program)(nil),
		(*SolanaInstructionV2_SplAssociatedTokenAccountProgram)(nil),
	}
	file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[23].OneofWrappers = []interface{}{
		(*SolanaAddressLookupTableProgram_Unknown)(nil),
	}
	file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[24].OneofWrappers = []interface{}{
		(*SolanaBpfLoaderProgram_Unknown)(nil),
	}
	file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[25].OneofWrappers = []interface{}{
		(*SolanaBpfUpgradeableLoaderProgram_Unknown)(nil),
	}
	file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[26].OneofWrappers = []interface{}{
		(*SolanaVoteProgram_Unknown)(nil),
		(*SolanaVoteProgram_Initialize)(nil),
		(*SolanaVoteProgram_Vote)(nil),
		(*SolanaVoteProgram_Withdraw)(nil),
		(*SolanaVoteProgram_CompactUpdateVoteState)(nil),
	}
	file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[27].OneofWrappers = []interface{}{
		(*SolanaSystemProgram_Unknown)(nil),
		(*SolanaSystemProgram_CreateAccount)(nil),
		(*SolanaSystemProgram_Transfer)(nil),
		(*SolanaSystemProgram_CreateAccountWithSeed)(nil),
		(*SolanaSystemProgram_TransferWithSeed)(nil),
	}
	file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[28].OneofWrappers = []interface{}{
		(*SolanaStakeProgram_Unknown)(nil),
		(*SolanaStakeProgram_Initialize)(nil),
		(*SolanaStakeProgram_Delegate)(nil),
		(*SolanaStakeProgram_Deactivate)(nil),
		(*SolanaStakeProgram_Merge)(nil),
		(*SolanaStakeProgram_Split)(nil),
		(*SolanaStakeProgram_Withdraw)(nil),
	}
	file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[29].OneofWrappers = []interface{}{
		(*SolanaSplMemoProgram_Memo)(nil),
	}
	file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[30].OneofWrappers = []interface{}{
		(*SolanaSplTokenProgram_Unknown)(nil),
		(*SolanaSplTokenProgram_GetAccountDataSize)(nil),
		(*SolanaSplTokenProgram_InitializeImmutableOwner)(nil),
		(*SolanaSplTokenProgram_Transfer)(nil),
	}
	file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[31].OneofWrappers = []interface{}{
		(*SolanaSplToken2022Program_Unknown)(nil),
	}
	file_coinbase_chainstorage_blockchain_solana_proto_msgTypes[32].OneofWrappers = []interface{}{
		(*SolanaSplAssociatedTokenAccountProgram_Unknown)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_coinbase_chainstorage_blockchain_solana_proto_rawDesc,
			NumEnums:      11,
			NumMessages:   58,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_coinbase_chainstorage_blockchain_solana_proto_goTypes,
		DependencyIndexes: file_coinbase_chainstorage_blockchain_solana_proto_depIdxs,
		EnumInfos:         file_coinbase_chainstorage_blockchain_solana_proto_enumTypes,
		MessageInfos:      file_coinbase_chainstorage_blockchain_solana_proto_msgTypes,
	}.Build()
	File_coinbase_chainstorage_blockchain_solana_proto = out.File
	file_coinbase_chainstorage_blockchain_solana_proto_rawDesc = nil
	file_coinbase_chainstorage_blockchain_solana_proto_goTypes = nil
	file_coinbase_chainstorage_blockchain_solana_proto_depIdxs = nil
}
