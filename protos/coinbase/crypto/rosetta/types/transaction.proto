// (-- api-linter: core::0140::abbreviations=disabled
//     aip.dev/not-precedent: Matching the naming convention of rosetta --)
syntax = "proto3";

// The stable release for rosetta types
package coinbase.crypto.rosetta.types;
option go_package = "github.com/coinbase/chainstorage/protos/coinbase/crypto/rosetta/types";

import "google/protobuf/any.proto";
import "coinbase/crypto/rosetta/types/operation.proto";
import "coinbase/crypto/rosetta/types/network_identifier.proto";

// Transactions contain an array of Operations that are attributable to the same TransactionIdentifier.
message Transaction {
  // The transaction_identifier uniquely identifies a transaction in a particular network and block
  // or in the mempool.
  TransactionIdentifier transaction_identifier = 1;
  // The operations is an array of Operations that are associated with the transaction
  repeated Operation operations = 2;
  // The related_transaction allows implementations to link together multiple transactions.
  // An unpopulated network identifier indicates that the related transaction is on the same network.
  repeated RelatedTransaction related_transactions = 3;
  // Transactions that are related to other transactions (like a cross-shard transaction) should
  // include the tranaction_identifier of these transactions in the metadata.
  map<string, google.protobuf.Any> metadata = 4;
}

// TransactionIdentifier uniquely identifies a transaction in a particular network and block or in
// the mempool.
message TransactionIdentifier {
  // The hash of the transaction.  Any transactions that are attributable only to a block (ex: a
  // block event) should use the hash of the block as the identifier.
  string hash = 1;
}

// RelatedTransaction allows implementations to link together multiple transactions.
message RelatedTransaction {
  // The network_identifier specifies which network a particular object is associated with.
  // An unpopulated network identifier indicates that the related transaction is on the same network.
  NetworkIdentifier network_identifier = 1;
  // The transaction_identifier uniquely identifies a transaction in a particular network and block
  // or in the mempool.
  TransactionIdentifier transaction_identifier = 2;

  // Used by RelatedTransaction to indicate the direction of the relation (i.e. cross-shard/cross-network
  // sends may reference backward to an earlier transaction and async execution may reference forward).
  // Can be used to indicate if a transaction relation is from child to parent or the reverse.
  enum Direction {
    // DIRECTION_UNSPECIFIED indicating the direction is not specified.
    DIRECTION_UNSPECIFIED = 0;
    // FORWARD indicating a transaction relation is from parent to child.
    FORWARD = 1;
    // BACKWARD indicating a transaction relation is from child to parent.
    BACKWARD = 2;
  }
  // Used by RelatedTransaction to indicate the direction of the relation.
  // Can be used to indicate if a transaction relation is from child to parent or the reverse.
  Direction direction = 3;
}
