// Code generated for package config by go-bindata DO NOT EDIT. (@generated)
// sources:
// config/chainstorage/arbitrum/mainnet/base.yml
// config/chainstorage/arbitrum/mainnet/development.yml
// config/chainstorage/arbitrum/mainnet/local.yml
// config/chainstorage/arbitrum/mainnet/production.yml
// config/chainstorage/avacchain/mainnet/base.yml
// config/chainstorage/avacchain/mainnet/development.yml
// config/chainstorage/avacchain/mainnet/production.yml
// config/chainstorage/bitcoin/mainnet/base.yml
// config/chainstorage/bitcoin/mainnet/development.yml
// config/chainstorage/bitcoin/mainnet/local.yml
// config/chainstorage/bitcoin/mainnet/production.yml
// config/chainstorage/bsc/mainnet/base.yml
// config/chainstorage/bsc/mainnet/development.yml
// config/chainstorage/bsc/mainnet/local.yml
// config/chainstorage/bsc/mainnet/production.yml
// config/chainstorage/dogecoin/mainnet/base.yml
// config/chainstorage/dogecoin/mainnet/development.yml
// config/chainstorage/dogecoin/mainnet/local.yml
// config/chainstorage/dogecoin/mainnet/production.yml
// config/chainstorage/ethereum/goerli/base.yml
// config/chainstorage/ethereum/goerli/development.yml
// config/chainstorage/ethereum/goerli/local.yml
// config/chainstorage/ethereum/goerli/production.yml
// config/chainstorage/ethereum/mainnet/base.yml
// config/chainstorage/ethereum/mainnet/development.yml
// config/chainstorage/ethereum/mainnet/local.yml
// config/chainstorage/ethereum/mainnet/production.yml
// config/chainstorage/optimism/mainnet/base.yml
// config/chainstorage/optimism/mainnet/development.yml
// config/chainstorage/optimism/mainnet/local.yml
// config/chainstorage/optimism/mainnet/production.yml
// config/chainstorage/polygon/mainnet/base.yml
// config/chainstorage/polygon/mainnet/development.yml
// config/chainstorage/polygon/mainnet/local.yml
// config/chainstorage/polygon/mainnet/production.yml
// config/chainstorage/solana/mainnet/base.yml
// config/chainstorage/solana/mainnet/development.yml
// config/chainstorage/solana/mainnet/local.yml
// config/chainstorage/solana/mainnet/production.yml
package config

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configChainstorageArbitrumMainnetBaseYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x57\x5b\x6f\x1b\xb7\x12\x7e\xdf\x5f\x31\xf0\x79\xb6\x75\x71\x9c\x73\xb2\xc0\x79\xc8\x0d\xad\x91\xc6\x2e\x02\x17\x05\xfa\x42\xcc\x92\xb3\x5a\x42\xbc\x6c\xc8\x59\x45\xea\xaf\x2f\xb8\xdc\xf5\x4a\xae\x6c\x25\x48\x53\xbf\xad\xc8\xb9\x71\xbe\x8f\xdf\x50\xff\x81\xbb\x46\x47\xa8\xb5\x21\xd0\x11\x56\xe4\x28\x20\x93\x82\x6a\x07\x67\x16\xd7\x04\xd2\xbb\x5a\xaf\xce\x2e\xe0\xdd\x2d\xdc\xdc\xde\xc1\xfb\x77\xd7\x77\x17\x05\xb6\xba\x2c\x00\x2c\x6e\x85\xeb\xac\xa8\x8c\x97\x6b\x91\xa2\xc4\x12\x16\xf3\xf9\xfc\xe1\x5e\x2c\xe1\x2a\x2d\xa6\x85\x2f\x3e\xac\x29\xf4\x86\x05\x40\xe4\x40\x68\xb5\x5b\x89\x0a\x59\x36\x22\xea\x3f\x69\x30\x9e\xb6\xb4\x63\x0a\x1b\x34\x25\x2c\xe2\xc1\x46\x9f\xc4\x0b\xda\x90\x63\xc1\xda\x52\x8a\x6a\x0b\xfc\x12\x53\x79\xf8\x25\x0a\x94\xd2\x77\x8e\x4b\x50\xb4\x21\xe3\x5b\x4b\x8e\x0b\x80\xaa\x93\x6b\xe2\x12\xce\xce\x0a\x00\x65\x3e\x27\x73\x00\x45\x06\x77\x22\x92\x8c\x25\xbc\xea\x4f\x01\xe0\x30\x45\xa5\x2d\xda\xd6\x90\x90\x0d\x6a\x17\xd9\x07\x5c\xd1\x70\x34\x81\xa1\xd2\x1c\x3a\x2b\x2c\x6a\xe7\x88\x85\x32\x9f\x7b\xd7\x8d\x8e\xba\xd2\x46\xf3\xae\xaf\xcd\x77\x3c\xc4\x7e\xd9\xc7\x56\x3b\x87\xd6\xab\x2a\xe7\xce\x3d\x64\xac\xcc\x37\xa6\xeb\xbd\x87\x0e\x9c\xf2\xce\x9d\x3a\x1d\x43\x34\xa4\x57\x0d\x0b\xed\x14\x6d\xbf\x26\x60\xb5\x1b\x5d\x8e\x86\xde\x50\x88\xda\x3b\x52\xe2\x74\xa1\x93\xed\xe9\x92\x8f\xc6\x1d\xfc\x9e\xaa\xfd\x91\x1c\xd5\x6e\xf4\x55\xc7\xf2\xb5\x81\xa2\x5e\x25\xaf\x2e\x18\x41\xdb\x56\x07\x64\xed\x5d\x09\x97\x73\x5b\x00\x04\x5a\xf5\xbf\xba\x78\x4e\x18\xf9\x7c\xd1\x73\xb5\xcf\x38\xf0\x0b\x19\x85\xf4\x36\x05\x8a\xbd\xe9\x4f\x7f\x5c\xff\x5a\x48\x54\xe4\x64\x6f\x83\x4a\xa5\xbd\x91\x98\x3e\x25\x2f\x61\xbf\xf6\xf3\xb1\xb0\xf3\xa9\xb0\x40\x4c\x2e\x55\x22\x5a\x0a\xda\xab\x12\xfe\x5b\xf4\x3e\x29\x64\x3e\x51\x64\x0c\x3c\x60\x54\xc2\xbc\x98\x08\xb7\xca\xb5\x19\x64\x8a\x5c\xc2\xa2\xff\x15\x07\x84\x16\x93\x61\x7f\xbb\xae\xe6\x73\x1b\xc7\xb5\x9c\x02\xde\xfc\x72\xfb\xf6\xc3\xdb\x9f\x5f\x5f\xdf\x88\xd7\x9f\xde\x5c\xdf\x7d\xfa\xed\x63\x01\x20\x8d\x26\xc7\x39\xb6\xc5\xc8\x14\xf2\x37\x00\x39\xd5\x7a\xed\x58\xac\x82\xef\xda\xe1\xa8\x00\xd1\xe0\x86\x4e\xd8\x6c\xd0\x68\x85\xec\x9f\x8e\x35\x72\xe1\xe4\xc9\x6a\x42\xee\xc2\x90\x34\xf8\x48\xcc\x28\x5a\x0c\x91\x42\x09\x35\x9a\x48\x05\x80\x0e\x81\x7a\xbe\x24\x6a\x29\x1d\x19\x13\x56\x49\xe6\x92\xa0\x11\x27\x3d\x2b\xe1\xe6\xfd\xdd\xef\xb7\x9f\x3e\xdc\x77\x40\x7c\x7c\x7d\x7d\x73\xf3\xfe\xae\xc8\x02\x2a\xb2\x8c\xfc\x8d\x54\x32\xf8\x3d\x90\x02\xba\x15\x0d\x12\xf8\xa2\xa8\x3b\x27\x13\xa8\x68\x44\x3e\xc0\xd9\x59\x11\xd5\x3a\x99\x1f\x90\xf9\x9e\x33\x0d\x73\x1b\xcb\xd9\xcc\xd5\x7c\x8e\xad\xbe\x90\x5e\xbb\x0a\x23\x5d\x48\x6f\x67\xd8\xea\x19\x6d\xdb\xd9\xbe\xeb\x6c\xac\x67\x36\xd4\x33\xdb\x2c\x8e\xaa\x74\xa0\xc8\x75\x67\x4a\xe0\xd0\x51\x11\x29\x6c\x32\x9c\x95\x76\x6a\xca\x6f\xbc\x44\xd3\xf8\xc8\xe5\xab\xf9\xab\x79\x11\x0d\x4e\x47\x1b\xd4\x41\x91\x61\x2c\x61\x39\x9f\x1f\x10\x6b\x5c\x5f\xd8\xcb\x79\xa2\x17\x6d\x5b\x92\x4c\xaa\x2f\xa3\x36\x3e\xeb\xf9\x39\x58\xef\x34\xfb\xd0\x7f\xb7\xde\x18\xca\x9f\x79\x20\x50\x98\xdd\x23\xff\xff\x74\x8e\x24\xb8\xbe\x16\x71\xe7\xa4\x70\x5e\xed\xa3\x97\x0b\x60\x9d\x80\x5e\xf6\x5f\x36\x35\xde\x49\x12\x06\x23\x67\x19\x28\x61\x69\x8b\x83\x0a\x2a\x94\xeb\x5a\xa7\xbc\x99\x33\x28\x59\x6f\x92\xbe\x07\xe2\xb0\x4b\xe3\x48\xdb\xce\x0a\x64\x26\xdb\x72\x2c\xe1\xf2\xd0\x2c\xca\x86\x54\x67\x48\xb0\x1f\x6e\xe4\x30\x18\x4a\xb8\xb2\x0f\x4c\xf3\xb6\x17\xd2\xf8\x48\x93\xdd\x62\x9e\x0d\xf7\xc7\xe5\xf2\x6a\x18\x56\xb2\x21\xb9\xce\x17\x62\x1c\xa4\xc3\x4e\x9a\x94\x81\xda\xe0\x25\xc5\x48\x2a\x09\x45\x9e\xb8\x49\xbc\xf2\xa0\xeb\xac\x90\xde\xc9\x2e\x84\xd4\x44\xda\x72\x40\xc9\x3e\x71\xe0\x72\x08\xc2\x18\xd7\xc2\xe8\xd8\x8f\xd3\x1a\x3b\x93\x55\x78\x6c\x91\x50\x24\x75\xd2\xb5\xa9\xda\xa5\x3d\xb4\xa0\x2d\xc9\x8e\x0f\x4d\x5e\x34\x87\x36\x5a\x25\x31\xe3\x5d\x79\xbf\x74\x31\xf5\x3d\x81\x40\x4e\x36\x16\x13\x3f\x9f\x1d\x05\xd9\x68\x33\xb1\x74\xef\x78\x8f\x39\xbe\x1c\x1c\x9f\xaf\x95\x53\xf7\x92\x90\x04\x1f\xa3\x78\x20\xab\x27\xfb\x79\xf5\x03\x59\x2d\xd7\xbe\xae\x1f\xbe\xf8\x0e\xe9\xbe\x78\x8c\xed\x8b\x91\xed\x2d\x06\x34\x86\x8c\x8e\x36\x29\xe9\x13\x0d\x1f\x8e\x3e\xcc\x4e\x49\x8e\xd3\xb4\xce\xaa\xf7\x6f\xc0\xf1\x00\x80\xf4\x70\xce\x1a\xf7\x95\x50\xfc\xef\x79\xa1\xb8\x7a\x5c\x77\xbe\x11\x88\x1f\xdf\xea\x69\x78\xe4\xd1\xf1\xa0\xc3\x0d\x61\xe0\x8a\xf0\x89\x96\x7d\x3f\x08\xcb\xef\x06\xe1\x32\x9e\xe0\x7e\x9d\xe6\x57\x9a\x79\xd3\x13\x26\xcb\xff\xf0\xff\x21\x15\x95\x26\x62\x9a\x00\x72\x27\xcd\xde\x85\x3a\x82\x56\xcc\x2f\x55\x21\x03\x21\x1f\x43\x65\x34\x20\x97\xde\x55\x6a\x3f\xe9\xb3\x21\x7d\xff\x34\x18\x1f\x06\xff\xb8\xae\x7d\x2d\x8e\xcb\x13\x30\x1e\xde\xa5\x13\x97\xe9\xd9\xfa\x39\xb6\xb1\xc8\x66\xe9\x5d\xd8\xbf\xbb\x8e\x14\xf4\x57\x00\x00\x00\xff\xff\xd9\x82\xb7\x1f\x52\x10\x00\x00")

func configChainstorageArbitrumMainnetBaseYmlBytes() ([]byte, error) {
	return bindataRead(
		_configChainstorageArbitrumMainnetBaseYml,
		"config/chainstorage/arbitrum/mainnet/base.yml",
	)
}

func configChainstorageArbitrumMainnetBaseYml() (*asset, error) {
	bytes, err := configChainstorageArbitrumMainnetBaseYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/chainstorage/arbitrum/mainnet/base.yml", size: 4178, mode: os.FileMode(420), modTime: time.Unix(1640048354, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configChainstorageArbitrumMainnetDevelopmentYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\xcc\xbb\x6e\xeb\x30\x10\x84\xe1\x9e\x4f\xb1\xf0\xa9\x45\xe8\xc4\x08\x02\xb3\x76\x8a\x34\x71\xa3\x5e\x58\x91\x63\x89\x10\x2f\x02\xb9\x92\x93\xb7\x0f\x4c\x04\x99\x69\x7f\x7c\xff\x68\x58\x7c\xa5\xbb\x0f\x20\x5f\x69\x46\x42\x61\x81\xa3\xe9\x9b\x4e\x91\x57\x90\xcd\xe9\xee\xe7\x93\xa6\xeb\x8d\x3e\x6f\x03\xbd\x5f\x3f\x06\xad\xf8\x51\x8d\x22\xe2\x47\x1d\xd9\xda\xbc\x27\x31\xe4\x70\x20\xe4\x2d\x22\x89\x22\x9a\x76\xbb\x42\x0c\xe1\x8b\xe3\x16\xd0\xd9\x85\x7d\xaa\x92\x0b\xcf\xe8\xb8\x4c\x5e\xca\x1e\xbb\xc8\x3e\x25\x48\xe7\x70\x28\xcb\x0e\xc9\xa2\xb9\xce\x15\xd4\x6a\x48\x10\xb7\x5c\x38\x3c\x03\xfd\x4b\x69\x9b\xa3\x79\x7b\x39\x9f\x55\x33\x9f\xfd\x14\xb2\x5d\xc7\x2a\x5c\x64\x5c\xe0\xe7\x45\x0c\xfd\x7f\xed\xdb\x54\x45\x39\x50\x5a\xe6\x93\x1b\xff\xec\x5e\xb7\x9b\x4b\x7f\xe9\xd5\x4f\x00\x00\x00\xff\xff\xb0\x89\x54\x72\x09\x01\x00\x00")

func configChainstorageArbitrumMainnetDevelopmentYmlBytes() ([]byte, error) {
	return bindataRead(
		_configChainstorageArbitrumMainnetDevelopmentYml,
		"config/chainstorage/arbitrum/mainnet/development.yml",
	)
}

func configChainstorageArbitrumMainnetDevelopmentYml() (*asset, error) {
	bytes, err := configChainstorageArbitrumMainnetDevelopmentYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/chainstorage/arbitrum/mainnet/development.yml", size: 265, mode: os.FileMode(420), modTime: time.Unix(1640048354, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configChainstorageArbitrumMainnetLocalYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\xb1\x0e\xc2\x20\x10\x06\xe0\x9d\xa7\xf8\x53\xf7\xa6\x6b\x99\xeb\xe0\x62\x17\x76\x73\xc2\x01\x97\x9e\x90\x70\x38\xf8\xf6\x7e\x37\x84\x2a\x86\x2c\xca\x10\x43\xe1\xc6\x83\x26\x27\xbc\x7f\x58\x3e\x74\x31\x62\x6f\x59\xca\xb2\xe2\x38\xf1\x3c\x03\xee\xc7\x23\xac\xce\xd2\xe5\x1d\x10\x2b\x49\xb3\xd9\x07\x15\x7e\x51\x4a\x83\xcd\x3c\xb4\x47\xd2\xda\x6d\xfa\x7d\xdb\x37\x07\x0c\xb6\x99\xbf\xea\x91\x49\x8d\xdd\x3f\x00\x00\xff\xff\xb5\x38\xa5\xc8\x75\x00\x00\x00")

func configChainstorageArbitrumMainnetLocalYmlBytes() ([]byte, error) {
	return bindataRead(
		_configChainstorageArbitrumMainnetLocalYml,
		"config/chainstorage/arbitrum/mainnet/local.yml",
	)
}

func configChainstorageArbitrumMainnetLocalYml() (*asset, error) {
	bytes, err := configChainstorageArbitrumMainnetLocalYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/chainstorage/arbitrum/mainnet/local.yml", size: 117, mode: os.FileMode(420), modTime: time.Unix(1640048354, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configChainstorageArbitrumMainnetProductionYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\xcc\xb1\x6e\xc3\x30\x0c\x84\xe1\x5d\x4f\x71\x48\x67\x1b\x46\x33\x14\xd1\x9c\x0e\x5d\x9a\xc5\x7b\x40\x53\x8c\x43\xc4\xa2\x0c\x4a\x6e\xda\xb7\x2f\x12\x14\xc5\xad\xf7\x7f\x2f\x18\xaf\x5a\x71\xd1\x45\xa0\x15\xb3\x98\x38\x35\x49\x98\x7e\xb0\xcb\x74\x13\x70\xb1\x8b\xce\xbb\x1e\xc7\x13\x3e\x4f\x23\xde\x8f\x1f\x63\x1f\xe8\x5e\x63\x00\xe8\x5e\xcf\xc4\x5c\x36\x6b\x11\xab\x97\xb4\x71\xd3\x62\x01\x98\x36\xbe\x49\x8b\x90\x6f\xca\xeb\x22\x1d\x5f\x49\xad\xb6\xe2\x34\x4b\x47\x3e\x69\xf3\x2d\x77\x99\xd4\x4c\x5a\xf7\x48\x03\x53\x12\x63\x79\xba\x29\xb9\xd4\x1a\xd1\x24\xaf\xc5\x69\xe9\xff\x9c\x9e\x4b\x8e\x6f\xaf\xfb\x7d\xa8\xe2\x5f\xe2\x8f\xf3\xa4\x96\xce\xff\xc5\xd0\x3f\x17\x0f\xc3\x61\x08\xbf\x01\x00\x00\xff\xff\x86\xa4\x5c\x69\xdf\x00\x00\x00")

func configChainstorageArbitrumMainnetProductionYmlBytes() ([]byte, error) {
	return bindataRead(
		_configChainstorageArbitrumMainnetProductionYml,
		"config/chainstorage/arbitrum/mainnet/production.yml",
	)
}

func configChainstorageArbitrumMainnetProductionYml() (*asset, error) {
	bytes, err := configChainstorageArbitrumMainnetProductionYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/chainstorage/arbitrum/mainnet/production.yml", size: 223, mode: os.FileMode(420), modTime: time.Unix(1640048354, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configChainstorageAvacchainMainnetBaseYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x57\x4d\x6f\x1b\x37\x10\xbd\xef\xaf\x18\xb8\x67\x5b\x1f\x89\xd3\x66\x81\x1e\xdc\x24\x68\x8d\xb4\x76\x51\x18\x2d\xd0\x0b\x31\x4b\xce\x6a\x09\x71\xc9\x0d\x39\xab\x48\xfd\xf5\x05\x97\x94\x56\x8a\x65\xcb\x41\xea\xfa\xb6\x22\x87\xc3\xe1\xbc\xc7\xf7\xa8\xef\xe0\xae\xd1\x01\x6a\x6d\x08\x74\x80\x05\x59\xf2\xc8\xa4\xa0\xda\xc0\x59\x8b\x4b\x02\xe9\x6c\xad\x17\x67\x17\xf0\xfe\x16\x6e\x6e\xef\xe0\xc3\xfb\xeb\xbb\x8b\x02\x3b\x5d\x16\x00\x2d\xae\x85\xed\x5b\x51\x19\x27\x97\x22\x66\x09\x25\xcc\xa6\xd3\xe9\x97\x73\xa1\x84\xcb\x38\x18\x07\x3e\x3b\xbf\x24\x3f\x04\x16\x00\x81\x3d\x61\xab\xed\x42\x54\xc8\xb2\x11\x41\xff\x43\x39\x78\x9c\xd2\x96\xc9\xaf\xd0\x94\x30\x0b\x07\x13\xc3\x26\x4e\xd0\x8a\x2c\x0b\xd6\x2d\xc5\xac\x6d\x81\x9f\x43\x2c\x0f\x3f\x07\x81\x52\xba\xde\x72\x09\x8a\x56\x64\x5c\xd7\x92\xe5\x02\xa0\xea\xe5\x92\xb8\x84\xb3\xb3\x02\x40\x99\x4f\x31\x1c\x40\x91\xc1\x8d\x08\x24\x43\x09\x6f\x87\x53\x00\x58\x8c\x59\x69\x8d\x6d\x67\x48\xc8\x06\xb5\x0d\xec\x3c\x2e\x28\x1f\x4d\xe0\x0a\xe5\x30\x2e\x5a\xd4\xd6\x12\x0b\x65\x3e\x0d\x6b\x57\x3a\xe8\x4a\x1b\xcd\x9b\xa1\x38\xd7\x73\x4e\xfe\x66\x48\xae\x36\x16\x5b\xa7\xaa\xb4\x79\x6a\x22\x63\x65\xbe\x76\xbf\x61\x79\xee\xc1\xa9\xe5\xa9\x57\x4f\x48\x22\x1a\xd2\x8b\x86\x85\xb6\x8a\xd6\x4f\xc9\x58\x6d\xb6\x4b\x8e\xe7\x5e\x91\x0f\xda\x59\x52\xe2\x74\xa9\x63\xec\x13\x8a\x3e\x9a\x38\x2f\x7c\xac\xfa\x07\x36\xa9\x36\xdb\xb5\xea\xe8\x86\x9d\xa7\xa0\x17\x71\x59\xef\x8d\xa0\x75\xa7\x3d\xb2\x76\xb6\x84\x57\xd3\xb6\x00\xf0\xb4\x18\x7e\xf5\xe1\x9c\x30\xf0\xf9\x6c\x60\xec\xb0\x65\x66\x19\x32\x0a\xe9\xda\x98\x28\x0c\xa1\x3f\xff\x7d\xfd\x7b\x21\x51\x91\x95\x43\x0c\x2a\x15\xe7\xb6\xf4\x74\x71\xf3\x12\xf6\x8b\x3f\xdf\x55\x76\x3e\x56\xe6\x89\xc9\xc6\x52\x44\x47\x5e\x3b\x55\xc2\xf7\xc5\x10\x13\x73\xa6\x33\x05\x46\xcf\x19\xa7\x12\xa6\xc5\x48\xbb\x45\x2a\xce\x20\x53\xe0\x12\x66\xc3\xaf\x90\x41\x9a\x8d\x81\xc3\x25\x9b\x87\xed\x40\xca\x0f\x3f\xfd\x7a\xfb\xee\xe3\xbb\x5f\xae\xae\x6f\xc4\xd5\x9f\x57\xef\x86\xaf\x02\x40\x1a\x4d\x96\x53\xe6\x16\x03\x93\x4f\xdf\x00\x64\x55\xe7\xb4\x65\xb1\xf0\xae\xef\xf2\x49\x01\x82\xc1\x15\x9d\x88\x59\xa1\xd1\x0a\xd9\x3d\x9e\x6b\xcb\x85\x93\xe7\xaa\x09\xb9\xf7\x79\x53\xef\x02\x31\xa3\xe8\xd0\x07\xf2\x25\xd4\x68\x02\x15\x00\xda\x7b\x1a\xf8\x12\xa9\xa5\x74\x60\x8c\x50\x45\xad\x8b\xaa\x46\x1c\x45\xad\x84\x9b\x0f\x77\x7f\xdd\xfe\xf1\x71\x6c\x81\xf8\xed\xea\xfa\xe6\xe6\xc3\x5d\x91\x64\x54\x24\x31\xb9\xcf\x2a\xe9\xdd\x1e\x48\x1e\xed\x82\xb2\x12\xbe\x2e\xea\xde\xca\x08\x2a\x1a\x91\x8e\x70\x76\x56\x04\xb5\x8c\xe1\x07\x74\xde\x91\xa6\x61\xee\x42\x39\x99\xd8\x9a\xcf\xb1\xd3\x17\xd2\x69\x5b\x61\xa0\x0b\xe9\xda\x09\x76\x7a\x42\xeb\x6e\xb2\xbf\x74\xb2\x2b\x68\x92\x0b\x9a\xac\x66\x47\xd5\xda\x53\xe0\xba\x37\x25\xb0\xef\xa9\x08\xe4\x57\x09\xd1\x4a\x5b\x35\x16\x60\x9c\x44\xd3\xb8\xc0\xe5\xdb\xe9\xdb\x69\x11\x0c\x8e\x67\xcb\x12\xa1\xc8\x30\x96\x30\x9f\x1e\x10\x6b\x3b\x7c\x19\xef\x11\xad\x3b\x92\x4c\x6a\x28\xa1\x36\x2e\x69\xfa\x39\xb4\xce\x6a\x76\x7e\xf8\xee\x9c\x31\x94\x3e\x93\x29\x90\x9f\xec\x80\xff\x71\x36\x4c\xc4\xeb\x66\x70\x49\x93\x1d\xd3\xf3\x84\xf4\x2e\x04\xb1\x63\x53\x01\x10\x05\xda\xd5\x22\x6c\xac\x14\xd6\xa9\x7d\xa4\x07\x47\x62\x1d\x39\x31\x1f\xbe\xda\x88\x90\x95\x24\x0c\x06\x4e\x8a\x91\xcc\xe7\xa0\xdc\x0a\xe5\xb2\xd6\xb1\xc8\xc4\x2f\x94\xac\x57\xd1\x0f\x3c\xb1\xdf\x44\xff\xd2\x6d\xdf\x0a\x64\xa6\xb6\xe3\x50\xc2\xab\xc3\xb0\x20\x1b\x52\xbd\x21\xc1\x2e\xdf\xdd\x6c\x24\xb9\x49\xfb\xa1\x69\xda\x09\x69\x5c\xa0\x31\x6e\x36\x4d\x81\xfb\xfe\x3a\xbf\xcc\xee\x26\x1b\x92\xcb\x74\x79\xb6\xce\x9b\x67\xa2\xb5\x7a\xea\xbc\x93\x14\x02\xa9\x28\x29\xc9\xa2\xa3\xce\x25\x67\xec\x5b\x21\x9d\x95\xbd\xf7\xb1\xe3\xb4\x66\x8f\x92\x5d\x22\x4b\x0a\x61\x0c\x4b\x61\x74\x18\xfc\xb7\xc6\xde\x24\xc5\xde\xb6\x48\x28\x92\x3a\x4a\xe0\x58\xed\xbc\x3d\x8c\xa0\x35\xc9\x9e\x0f\x43\x5e\x37\x87\x31\x5a\x45\xd9\xe3\x4d\xb9\x1b\xba\x18\xfb\x1e\x41\x20\x2b\x9b\x16\x23\x91\x5f\x1c\x05\xd9\x68\x33\x52\x7a\xef\x78\x0f\x2d\x7c\x93\x17\xbe\x5c\x2b\xc7\xee\x45\xc9\x39\xbc\x34\x4f\xec\xe7\xe5\x33\xb2\x5a\x2e\x5d\x5d\xef\x3d\x11\x2f\xa7\xd3\x36\xdc\x63\xfc\x6c\xfa\x10\xe3\x77\x33\x1d\x7a\x34\x86\x8c\x0e\x6d\xd4\xdd\x47\x9a\x9e\x8f\x9f\x9d\x56\x92\xe5\x68\xee\xd9\x5b\x9e\x1f\x91\xfb\xc2\x95\x35\xf1\x89\x68\xfc\xf0\x3f\xa2\x31\x9b\xde\xc7\xe2\xf2\x61\xed\xf9\x4a\x20\x9e\xbf\xd7\xa3\xdb\x24\xaf\xf9\xa2\xc5\x0d\xa1\xe7\x8a\xf0\x91\x9e\x7d\x3b\x0a\xf3\x6f\x46\xe1\x55\x38\xc1\xfd\x3a\x9a\x58\xf4\xbd\xf1\xc9\x93\x2c\x20\xff\xe7\x88\x45\x45\x57\x8c\x2e\x20\x37\xd2\xd0\xa8\xf1\x47\xd0\x0a\xe9\x61\x2b\xa4\x27\xe4\x63\xa8\x6c\x03\xc8\xc6\x77\x98\xda\xdf\xf4\xc5\x90\xde\xbd\x25\xb6\x2f\x89\xff\x5c\xdb\x9e\x8a\xe3\xfc\x04\x8c\x87\x77\xe9\xc4\x65\x7a\xb1\x7e\x6e\xdb\x58\xa4\xb0\xf8\x88\x1c\x9e\x5d\x47\x0a\xfa\x37\x00\x00\xff\xff\x16\xb5\x06\x5f\x87\x10\x00\x00")

func configChainstorageAvacchainMainnetBaseYmlBytes() ([]byte, error) {
	return bindataRead(
		_configChainstorageAvacchainMainnetBaseYml,
		"config/chainstorage/avacchain/mainnet/base.yml",
	)
}

func configChainstorageAvacchainMainnetBaseYml() (*asset, error) {
	bytes, err := configChainstorageAvacchainMainnetBaseYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/chainstorage/avacchain/mainnet/base.yml", size: 4231, mode: os.FileMode(420), modTime: time.Unix(1640048354, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configChainstorageAvacchainMainnetDevelopmentYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x8f\xb1\x4e\xc4\x30\x0c\x86\xf7\x3c\x85\x75\xcc\xad\x0a\x27\x81\x2e\xf3\x31\xb0\x70\xcb\xed\x95\x9b\xb8\x6d\xd4\x24\xae\x62\x5f\x0b\x6f\x8f\x2e\x9c\xd8\xb0\x27\x5b\x9f\x3f\xeb\x7f\x82\xeb\x1c\x04\xc6\x10\x09\x82\xc0\x44\x99\x0a\x2a\x79\x18\xbe\xe1\x90\x70\x21\x70\x9c\xc7\x30\x1d\x5a\x38\x5f\xe0\xf3\x72\x85\xf7\xf3\xc7\xb5\x35\xb8\x8b\x35\x00\xb8\x4b\x8f\xce\xf1\x2d\xab\x05\x4f\x1b\x45\x5e\x13\x65\x35\x00\xc3\xcd\x2d\xa4\x16\xe8\x0b\xd3\x1a\xa9\x71\x33\x86\x2c\xca\x05\x27\x6a\x70\x43\x57\x17\x4d\xc2\x90\x33\x69\xe3\x69\x33\x0e\x3d\x65\x47\x55\xec\x7d\x21\x11\x0b\x4a\x69\xe5\x82\xf1\x0e\xb4\x0f\x57\xeb\x38\xd9\xb7\x97\xe3\xd1\x54\xc7\x9d\x1f\x22\xbb\xa5\x17\xc5\xa2\xfd\x4c\x61\x9a\xd5\xc2\xf3\x6b\x57\xcb\x08\x95\x8d\x4a\xc5\x42\xf6\xfd\x9f\xbb\x6b\x6b\xdb\x53\x77\xea\xcc\xce\x65\x19\x23\xff\xe6\x72\x85\x45\xfa\x0d\x63\xf0\xa8\x5c\x4f\x01\x1e\x63\xe0\xfc\xdf\xa3\x9f\x00\x00\x00\xff\xff\x23\xb5\x99\xb5\x4e\x01\x00\x00")

func configChainstorageAvacchainMainnetDevelopmentYmlBytes() ([]byte, error) {
	return bindataRead(
		_configChainstorageAvacchainMainnetDevelopmentYml,
		"config/chainstorage/avacchain/mainnet/development.yml",
	)
}

func configChainstorageAvacchainMainnetDevelopmentYml() (*asset, error) {
	bytes, err := configChainstorageAvacchainMainnetDevelopmentYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/chainstorage/avacchain/mainnet/development.yml", size: 334, mode: os.FileMode(420), modTime: time.Unix(1640048354, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configChainstorageAvacchainMainnetProductionYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\x8c\x31\x6f\xc2\x30\x10\x85\x77\xff\x8a\x27\x3a\xc7\x8a\xca\x50\xe1\x99\x0e\x5d\xca\x92\x1d\x5d\xce\x47\xb0\x88\xcf\x91\xcf\x81\xf6\xdf\x57\x44\x15\x7a\xdb\xd3\xf7\x7d\x6f\x18\xae\xc9\x70\x49\xb3\x20\x19\x26\x51\xa9\xd4\x24\x62\xfc\xc5\x2e\xd3\x4d\xc0\x45\x2f\x69\xda\x79\x1c\x4f\xf8\x3e\x0d\xf8\x3c\x7e\x0d\xde\xd1\xc3\x82\x03\xe8\x61\x67\x62\x2e\xab\xb6\x80\xa5\x96\xb8\x72\x4b\x45\x1d\x30\xae\x7c\x93\x16\x20\x3f\x94\x97\x59\x3a\xbe\x52\x52\x6b\xa5\xd2\x24\x1d\xdd\x89\xb7\xa3\xcb\x94\x54\xa5\x75\x4f\xd7\x31\x45\x51\x96\x2d\x1c\x63\x15\xb3\x80\x26\x79\x29\x95\x66\xff\x1f\xf2\x5c\x72\xf8\x78\xdf\xef\x9d\x49\xbd\x4b\x7d\xc2\x63\xd2\x78\x7e\x19\xbd\xdf\x16\x0e\xfd\xa1\x77\x7f\x01\x00\x00\xff\xff\xd2\xcf\x66\x71\xe0\x00\x00\x00")

func configChainstorageAvacchainMainnetProductionYmlBytes() ([]byte, error) {
	return bindataRead(
		_configChainstorageAvacchainMainnetProductionYml,
		"config/chainstorage/avacchain/mainnet/production.yml",
	)
}

func configChainstorageAvacchainMainnetProductionYml() (*asset, error) {
	bytes, err := configChainstorageAvacchainMainnetProductionYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/chainstorage/avacchain/mainnet/production.yml", size: 224, mode: os.FileMode(420), modTime: time.Unix(1640048354, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configChainstorageBitcoinMainnetBaseYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x57\xdb\x6e\x1b\x37\x13\xbe\xdf\xa7\x18\xf8\xbf\xb6\x75\x48\x94\xbf\xd9\xbb\x9c\xd0\x1a\x69\xed\xa2\x30\x50\xa0\x37\xc4\x88\x9c\xd5\x12\xe2\x92\x1b\x72\x56\x91\xfa\xf4\x05\x0f\xca\x4a\x8a\x1d\xd9\x68\x13\xdf\x2d\xc5\x39\x7f\x1f\x67\x46\xff\x83\xbb\x56\x07\x68\xb4\x21\xd0\x01\x56\x64\xc9\x23\x93\x82\xe5\x0e\x2e\x3a\x5c\x13\x48\x67\x1b\xbd\xba\xb8\x82\xf7\xb7\x70\x73\x7b\x07\x1f\xde\x5f\xdf\x5d\x55\xd8\xeb\xba\x02\xe8\x70\x2b\xec\xd0\x89\xa5\x71\x72\x2d\xa2\x95\x50\xc3\x6c\x3a\x9d\x9e\xde\x85\x1a\x16\x15\x40\x3c\x7f\x76\x7e\x4d\x3e\xc9\x55\x00\x81\x3d\x61\xa7\xed\x4a\x2c\x91\x65\x2b\x82\xfe\x9b\x6a\x58\x1c\x5f\x69\xcb\xe4\x37\x68\x6a\x98\x85\xa3\x8b\xe4\xc3\x09\xda\x90\x65\xc1\xba\xa3\x1a\x5e\x4c\xbb\x0a\x3f\x87\x18\x1d\x7e\x0e\x02\xa5\x74\x83\xe5\x1a\x14\x6d\xc8\xb8\xbe\x23\xcb\x15\xc0\x72\x90\x6b\xe2\x1a\x2e\x2e\x2a\x00\x65\x3e\x45\x71\x00\x45\x06\x77\x22\x90\x0c\x35\xbc\x4e\x49\x00\x58\x8c\x56\x69\x8b\x5d\x6f\x48\xc8\x16\xb5\x0d\xec\x3c\xae\xa8\x64\x26\x96\x9a\xa5\xd3\x56\x74\xa8\xad\x25\x16\xca\x7c\x4a\x9a\x1b\x1d\xf4\x52\x1b\xcd\xbb\x14\x9a\x1b\xb8\x98\x7e\x95\x4c\xab\x9d\xc5\xce\xa9\x65\x76\x9d\x2b\xc8\xb8\x34\x4f\xf3\x96\x94\x4b\xfe\xe7\x94\x73\x9d\xce\x9a\x10\x2d\xe9\x55\xcb\x42\x5b\x45\xdb\x47\xd9\xdb\xed\x55\xee\xb3\xbc\x21\x1f\xb4\xb3\xa4\xc4\xf9\x30\x47\xd9\xb3\x01\xdf\x6b\xb6\xa8\x7d\x2b\xf2\x87\x5c\xec\xf6\xba\xea\x1e\x77\xbd\xa7\xa0\x57\x51\x69\xf0\x46\xd0\xb6\xd7\x1e\x59\x3b\x9b\xe9\x06\xe0\x69\x95\x4e\x43\xb8\x24\x0c\x7c\x39\x4b\x2c\x4d\x0e\x0b\xb3\x90\x51\x48\xd7\x45\x43\x21\x89\xfe\xfc\xd7\xf5\xef\x95\x44\x45\x56\x26\x19\x54\x2a\xde\xed\x29\xe9\xa2\xf3\x1a\x0e\x43\xbf\x2c\x71\x5d\x8e\x71\x79\x62\xb2\x31\x10\xd1\x93\xd7\x4e\xd5\xf0\xff\x2a\xa9\x44\x8b\x39\x9f\xc0\xe8\xb9\xe0\x53\xc3\xb4\x1a\xa9\xb6\xca\xa1\x19\x64\x0a\x5c\xc3\x3c\x9d\x42\x81\x67\x3e\x0a\xa6\x67\x35\x4b\x79\xa6\x5f\xb2\x03\x78\xfb\xeb\xed\xbb\x8f\xef\x7e\x79\x73\x7d\x23\xde\x5e\xdf\xbd\xbb\xbd\xbe\xa9\x00\xa4\xd1\x64\x39\x1b\xee\x30\x30\xf9\xfc\x0d\x40\x56\xf5\x4e\x5b\x16\x2b\xef\x86\xbe\xa4\x09\x10\x0c\x6e\xe8\x8c\xcc\x06\x8d\x56\xc8\xee\xdb\xb6\xf6\x34\x38\x49\x6b\x7a\x94\x56\x3c\x35\x84\x3c\xf8\xe2\xd4\xbb\x40\xcc\x28\x7a\xf4\x81\x7c\x0d\x0d\x9a\x40\x15\x80\xf6\x9e\x12\x55\x22\xab\x94\x0e\x8c\x11\x27\x78\x11\x9b\x18\x71\xec\x61\x35\xdc\x7c\xb8\xfb\xf3\xf6\x8f\x8f\xfb\xf4\xc5\x6f\x6f\xae\x6f\x6e\x3e\xdc\x55\xb9\x65\x8a\xdc\x39\x4e\xc9\x24\xbd\x3b\x40\xc7\xa3\x5d\x51\x69\x7a\xb1\xe4\x4a\x87\xc4\x63\x65\x3e\x89\xde\x3b\x49\x21\x38\x5f\x03\xfb\x81\xaa\x66\xb0\x32\x62\x8d\x46\xe4\xd4\x2e\x2e\xaa\xa0\xd6\xd1\xd8\x11\xc3\xbf\x30\xa9\x65\xee\x43\x3d\x99\xd8\x86\x2f\xb1\xd7\x57\x31\x8e\x25\x06\xba\x92\xae\x9b\x60\xaf\x27\xb4\xed\x27\x87\xaa\x93\x12\xec\xa4\x04\x3b\xd9\xcc\xee\x6d\xda\x9e\x02\x37\x83\x29\x71\x05\xf2\x9b\x8c\xf3\x52\x5b\x35\xba\x37\x4e\xa2\x69\x5d\xe0\xfa\xf5\xf4\xf5\xb4\x0a\x06\xc7\xbc\x4b\xbf\x50\x64\x18\xf3\x68\x18\xc9\xb6\xff\x75\xd6\xe6\xc7\x45\xdb\x9e\x24\x93\x4a\x41\x34\xc6\xe5\xe6\x7e\x09\x9d\xb3\x9a\x9d\x4f\xdf\xbd\x33\x86\xf2\x67\x9e\x0e\xe9\x10\x5b\xae\x6b\x44\xd8\x59\x29\xac\x53\x87\x40\xa6\x3c\x58\x47\xc8\xe7\xe9\xab\x8b\x30\x58\x49\xc2\x60\xe0\xdc\x0b\xf6\x21\x1c\xf9\x5d\xa2\x5c\x37\x3a\x7a\xcb\x04\x42\xc9\x7a\x13\x7b\xbc\x27\xf6\xbb\x38\x91\x74\x37\x74\x02\x99\xa9\xeb\x39\x64\xca\x1c\x88\x05\xd9\x92\x1a\x0c\x09\x76\xe5\x6d\x96\xe1\x50\xc3\xa2\x3b\x11\xcd\xd7\x4e\x48\xe3\x02\x8d\x72\xf9\x2d\xc6\x50\xc6\x89\x39\x5f\x94\x79\x25\x5b\x92\xeb\xfc\x3a\xf6\xb3\xb4\xdc\xc4\x61\xe9\xa9\xb0\x8a\x54\x6c\x19\x79\xe8\xc6\x2e\x96\x67\xdd\xd0\x09\xe9\xac\x1c\xbc\x8f\x6f\x89\xb6\xec\x51\xb2\x8b\xb8\xcf\x67\x49\x82\x31\xac\x85\xd1\x21\x0d\xd4\x06\x07\x93\x9b\xf1\xbe\x42\x42\x91\xd4\xb1\xbf\x8d\xc1\xce\xbb\x63\x09\xda\x92\x1c\xf8\x58\xe4\x65\x7b\x2c\xa3\x55\xec\x6a\xbc\xab\xbf\xfc\x74\x35\x96\x3d\x62\x40\x56\xb6\x1d\x46\x4a\x3e\x3b\x08\xb2\xd5\x66\xa4\xe6\x41\x7a\x0f\x29\xbe\x2a\x8a\xcf\x57\xca\xb1\x7a\xb1\x75\x78\x17\x82\x38\x69\xb1\x67\xeb\xb9\xf8\x8e\xa4\x96\x6b\xd7\x34\xa7\x3b\xdf\x31\xdb\x67\x0f\x91\x7d\xb6\x27\x7b\x8f\x1e\x8d\x21\xa3\x43\x57\xc3\xcb\x6f\x15\xbc\xa4\x5e\x86\xa8\x24\xcb\x71\x6a\xe7\x06\xf1\x23\xe0\x38\x01\x20\x6e\xce\xb9\xb1\x3d\x12\x8a\x9f\x7e\x24\x14\xd3\xaf\xb1\x58\x3c\x00\xc5\x7c\xf1\x54\x24\xbe\x7f\xad\xc7\x91\x91\x07\xc6\x49\x89\x5b\x42\xcf\x4b\xc2\x83\x9a\xcd\x4e\x8b\xf6\xef\x61\x98\x3f\x12\x86\x17\x67\x61\x78\x98\xfe\x4d\x1c\x62\x71\xee\x8d\x1b\x4d\x1e\x00\xe5\x5f\x44\x8c\x2a\x4e\xc5\x38\x03\xe4\x4e\xc6\xd5\x68\xf1\x35\x5a\xe5\x0d\x84\xbc\xb3\x0a\xe9\x09\xf9\x3e\x58\xf6\x02\x64\xe3\xf2\xa2\x0e\x7d\x3e\x1b\xd4\x5f\x36\x82\xfd\x3e\xf0\x9f\x77\xb6\xc7\xe2\x38\x7f\xda\x6b\x7a\x78\x8c\x3f\x6f\x41\x0f\xf6\xaa\xfd\x36\x98\xf6\xad\x7b\x02\xfa\x27\x00\x00\xff\xff\xe7\x78\x99\x3a\x56\x10\x00\x00")

func configChainstorageBitcoinMainnetBaseYmlBytes() ([]byte, error) {
	return bindataRead(
		_configChainstorageBitcoinMainnetBaseYml,
		"config/chainstorage/bitcoin/mainnet/base.yml",
	)
}

func configChainstorageBitcoinMainnetBaseYml() (*asset, error) {
	bytes, err := configChainstorageBitcoinMainnetBaseYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/chainstorage/bitcoin/mainnet/base.yml", size: 4182, mode: os.FileMode(420), modTime: time.Unix(1640048354, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configChainstorageBitcoinMainnetDevelopmentYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\x8e\xbd\x6e\xc3\x30\x0c\x06\x77\x3d\x05\x91\xce\x36\xdc\x66\x28\xa2\x39\x1d\xba\x34\x4b\x76\x83\x96\xbe\xc4\x84\xf5\x63\x48\x8c\xd3\xf4\xe9\x0b\x3b\x45\xc1\x91\x77\x87\xef\x85\xce\xa3\x54\xba\x48\x00\x49\xa5\x2b\x12\x0a\x2b\x3c\x0d\x0f\xda\x45\x9e\x40\x2e\xa7\x8b\x5c\x77\x2d\x1d\x4f\xf4\x75\x3a\xd3\xc7\xf1\xf3\xdc\x1a\xbe\x57\x6b\x88\xf8\x5e\x7b\x76\x2e\xdf\x92\x5a\xf2\x58\x10\xf2\x1c\x91\xd4\x10\x0d\x37\x37\x41\x2d\xe1\x9b\xe3\x1c\xd0\xb8\x91\x25\x55\xcd\x85\xaf\x68\x06\x51\x97\x25\x35\x91\x25\x25\x68\xe3\xb1\x18\xc7\x1e\xc9\x61\xcb\x7a\x5f\x50\xab\x25\x45\x9c\x73\xe1\xb0\x02\xed\x5f\xa9\x75\x39\xda\xf7\xb7\xfd\xde\x54\x94\x05\x65\x15\x06\x49\xbe\xff\xb7\xba\x76\x3b\x7b\xe8\x0e\x9d\xb9\xe7\x32\x5d\x42\x7e\xee\x9d\x73\x08\x4f\x83\x88\x9d\xca\x22\xfa\xe8\x47\x70\xd1\x01\xac\xbd\x4a\x44\xbe\xa9\xa5\xd7\x2e\x6e\x8c\x1b\xe1\xa6\x39\x4b\xd2\xbe\xca\x0f\xd6\x47\x67\x7e\x03\x00\x00\xff\xff\xdc\x01\x01\x89\x34\x01\x00\x00")

func configChainstorageBitcoinMainnetDevelopmentYmlBytes() ([]byte, error) {
	return bindataRead(
		_configChainstorageBitcoinMainnetDevelopmentYml,
		"config/chainstorage/bitcoin/mainnet/development.yml",
	)
}

func configChainstorageBitcoinMainnetDevelopmentYml() (*asset, error) {
	bytes, err := configChainstorageBitcoinMainnetDevelopmentYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/chainstorage/bitcoin/mainnet/development.yml", size: 308, mode: os.FileMode(420), modTime: time.Unix(1640048354, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configChainstorageBitcoinMainnetLocalYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\xb1\x0e\xc2\x20\x10\x06\xe0\x9d\xa7\xf8\x53\xf7\xa6\x6b\x99\xeb\xe0\x62\x17\x76\x73\xc2\x01\x97\x9e\x90\x70\x38\xf8\xf6\x7e\x37\x84\x2a\x86\x2c\xca\x10\x43\xe1\xc6\x83\x26\x27\xbc\x7f\x58\x3e\x74\x31\x62\x6f\x59\xca\xb2\xe2\x38\xf1\x3c\x03\xee\xc7\x23\xac\xce\xd2\xe5\x1d\x10\x2b\x49\xb3\xd9\x07\x15\x7e\x51\x4a\x83\xcd\x3c\xb4\x47\xd2\xda\x6d\xfa\x7d\xdb\x37\x07\x0c\xb6\x99\xbf\xea\x91\x49\x8d\xdd\x3f\x00\x00\xff\xff\xb5\x38\xa5\xc8\x75\x00\x00\x00")

func configChainstorageBitcoinMainnetLocalYmlBytes() ([]byte, error) {
	return bindataRead(
		_configChainstorageBitcoinMainnetLocalYml,
		"config/chainstorage/bitcoin/mainnet/local.yml",
	)
}

func configChainstorageBitcoinMainnetLocalYml() (*asset, error) {
	bytes, err := configChainstorageBitcoinMainnetLocalYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/chainstorage/bitcoin/mainnet/local.yml", size: 117, mode: os.FileMode(420), modTime: time.Unix(1640048354, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configChainstorageBitcoinMainnetProductionYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\xcc\x31\x4f\xc3\x30\x10\xc5\xf1\xdd\x9f\xe2\xa9\xcc\xb1\x22\x3a\xa0\x7a\x2e\x03\x0b\x5d\xb2\x57\xe7\xf3\x35\x3d\x35\x3e\x47\xb6\x43\xe1\xdb\xa3\x56\x08\xbd\xf5\xfd\x7f\x2f\x98\xae\xda\x70\xd1\x45\xa0\x0d\xb3\x98\x54\xea\x92\x10\x7f\xb0\xcb\x74\x13\x70\xb1\x8b\xce\x3b\x8f\xe3\x09\x9f\xa7\x09\xef\xc7\x8f\xc9\x3b\xba\xb7\xe0\x00\xba\xb7\x33\x31\x97\xcd\x7a\xc0\x5a\x4b\xda\xb8\x6b\x31\x07\xc4\x8d\x6f\xd2\x03\xe4\x9b\xf2\xba\xc8\xc0\x57\x52\x6b\xbd\x54\x9a\x65\x88\xda\xb9\xa8\x0d\x99\xd4\x4c\xfa\xf0\x28\x1d\x53\x12\x63\x79\xb2\x29\x55\x69\x2d\xa0\x4b\x5e\x4b\xa5\xc5\xff\x31\x9e\x4b\x0e\x6f\xaf\xfb\xbd\x6b\x52\xbf\xa4\x3e\xce\x51\x2d\x9d\xff\x8b\xd1\x3f\x17\x0e\xe3\x61\x74\xbf\x01\x00\x00\xff\xff\x62\xf1\xd6\xf7\xde\x00\x00\x00")

func configChainstorageBitcoinMainnetProductionYmlBytes() ([]byte, error) {
	return bindataRead(
		_configChainstorageBitcoinMainnetProductionYml,
		"config/chainstorage/bitcoin/mainnet/production.yml",
	)
}

func configChainstorageBitcoinMainnetProductionYml() (*asset, error) {
	bytes, err := configChainstorageBitcoinMainnetProductionYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/chainstorage/bitcoin/mainnet/production.yml", size: 222, mode: os.FileMode(420), modTime: time.Unix(1640048354, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configChainstorageBscMainnetBaseYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x57\x5b\x6f\x1b\xb7\x12\x7e\xdf\x5f\x41\xf8\x3c\xdb\xba\x38\xce\x39\x59\xe0\x3c\xe4\x86\x73\x8c\xb4\x76\xd1\x1a\x28\xd0\x17\x62\x96\x9c\x95\x08\x71\xc9\x0d\x67\x56\x91\xfa\xeb\x8b\x59\xae\xbc\x92\x6a\xd9\x0e\x9a\xc4\x6f\x2b\x72\x38\xb7\xef\xe3\x37\xd4\xbf\xd4\xdd\xd2\x91\xaa\x9d\x47\xe5\x48\x2d\x30\x60\x02\x46\xab\xaa\xad\x3a\x6b\x60\x85\xca\xc4\x50\xbb\xc5\xd9\x85\xfa\x70\xab\x6e\x6e\xef\xd4\xc7\x0f\xd7\x77\x17\x05\xb4\xae\x2c\x94\x6a\x60\xa3\x43\xd7\xe8\xca\x47\xb3\xd2\xe2\x85\x4a\x35\x9b\x4e\xa7\xc7\x7b\x54\xaa\x2b\x59\x94\x85\x2f\x31\xad\x30\xf5\x86\x85\x52\xc4\x09\xa1\x71\x61\xa1\x2b\x60\xb3\xd4\xe4\xfe\xc4\xc1\x78\xdc\x72\x81\x31\xad\xc1\x97\x6a\x46\x07\x1b\x7d\x90\xa8\x71\x8d\x81\x35\xbb\x06\xc5\x6b\x53\xc0\x17\x92\xf4\xe0\x0b\x69\x30\x26\x76\x81\x4b\x65\x71\x8d\x3e\xb6\x0d\x06\x2e\x94\xaa\x3a\xb3\x42\x2e\xd5\xd9\x59\xa1\x94\xf5\x9f\xc5\x5c\x29\x8b\x1e\xb6\x9a\xd0\x50\xa9\xde\xf4\x55\x28\x15\x40\xbc\xe2\x06\x9a\xd6\xa3\x36\x4b\x70\x81\x38\x26\x58\xe0\x50\x9a\xae\xc8\xe8\x06\x5c\x08\xc8\xda\xfa\xcf\xfd\xa9\xb5\x23\x57\x39\xef\x78\xdb\xa7\x15\x3b\x1e\xdc\xbe\xee\xdd\xda\x6d\x80\x26\xda\x2a\x87\xcd\xed\x63\xa8\xfc\xf3\x23\xf5\x07\x87\xba\x9f\x3a\x98\xfb\xf3\xe8\x71\xbd\x44\xb7\x58\xb2\x76\xc1\xe2\xe6\x59\xbe\xb6\xbb\x23\xc7\x5e\xd7\x98\xc8\xc5\x80\x56\x3f\x9d\xde\x68\xfb\x68\xa2\x0f\xba\x1c\x8e\x3c\x96\xf1\x29\xf7\xdb\xdd\x59\x7b\x14\xaa\x4d\x48\x6e\x21\x07\xba\xe4\x35\x6e\x5a\x97\x80\x5d\x0c\xa5\xba\x9c\x36\x85\x52\x09\x17\xfd\xaf\x8e\xce\x11\x88\xcf\x67\x3d\x1b\xfb\x60\x03\x83\x80\x41\x9b\xd8\x88\x23\xea\x4d\xff\xf7\xc7\xf5\x2f\x85\x01\x8b\xc1\xf4\x36\x60\xad\xec\xed\xa8\x17\x25\x78\xa9\xf6\xd3\x3e\xaf\xc8\x9c\x8f\x39\x25\x64\x0c\x92\x84\x6e\x31\xb9\x68\x4b\xf5\xef\xa2\x37\x17\x6f\xb9\x0e\x62\x48\x3c\xe0\x51\xaa\x69\x31\x52\x6a\x91\xd3\xf2\xc0\x48\x5c\xaa\x79\xff\x8b\x06\x48\xe6\xa3\x61\x7f\x75\x2e\x69\xb7\x90\xfd\xab\x77\x3f\xdd\xbe\xff\xf4\xfe\xff\x6f\xaf\x6f\xf4\xbb\xdf\xde\x17\x4a\x19\xef\x30\x70\xf6\xd9\x00\x31\xa6\xfc\xad\x14\x06\xdb\x46\x17\x58\x2f\x52\xec\xda\xa1\x3a\xa5\xc8\xc3\x1a\x9f\xb0\x59\x83\x77\x16\x38\x3e\xee\x6b\x87\xfc\x51\x45\xb3\x83\x8a\xe4\x57\x8d\xc0\x5d\x1a\x82\xa6\x48\xc8\x0c\xba\x85\x44\x98\x4a\x55\x83\x27\x2c\x94\x72\x29\x61\xcf\x0e\x21\x92\x75\xc4\x20\xf0\x88\x76\x89\x4a\x21\x8b\x48\x95\xea\xe6\xe3\xdd\xef\xb7\xbf\x7e\x92\xe2\xf5\xcf\x6f\xaf\x6f\x6e\x3e\xde\x15\x59\x10\x75\x96\x85\x7d\xf6\x98\x14\xf7\x20\x49\x10\x16\x38\xa8\xd9\x2b\x01\xda\x51\x4f\xda\x10\x2d\x6a\x03\x01\xd2\x76\xcc\x66\xb7\xd9\x46\xef\x45\xd6\x4e\xed\x8f\xc2\x77\x68\x51\x77\xc1\x08\x43\xc0\xeb\xdc\x95\xb3\xb3\x82\xec\x4a\xb2\x39\xb8\x0f\xf7\xdc\x5b\x32\xb7\x54\x4e\x26\xa1\xe6\x73\x68\xdd\x85\x89\x2e\x54\x40\x78\x61\x62\x33\x81\xd6\x4d\x70\xd3\x4e\xf6\x8f\x4e\x2a\x32\x93\xa1\xd2\xc9\x7a\xf6\xa0\x94\x27\x24\xae\x3b\x5f\x2a\x4e\x1d\x16\x84\x69\x9d\xe9\x51\xb9\x60\xc7\xd0\x3e\x1a\xf0\xcb\x48\x5c\xbe\x99\xbe\x99\x16\xe4\x61\x6c\xda\xa0\x28\x16\x3d\xc3\x30\x04\x46\x7e\xee\x96\xe7\x72\x11\x71\xd3\xa2\x61\xb4\x7d\x0a\xb5\x8f\x59\xf0\xcf\x55\x13\x83\xe3\x98\xfa\x6f\xe9\x26\xe6\xcf\xdc\x38\x4c\x93\x7b\x16\xfd\x57\x6a\x10\x59\x8e\xb5\xa6\x6d\x30\x19\x98\x91\x09\x7d\x70\x76\xc2\x99\x79\xff\xd5\x08\x9a\xc1\xa0\xf6\x40\x9c\xf5\xa3\x54\x97\x4d\x71\x90\x40\x05\x66\x55\x3b\x09\x9b\xe9\x07\x86\xdd\x5a\x86\x40\x42\x4e\x5b\x19\x57\xae\xe9\x1a\x0d\xcc\xd8\xb4\x4c\xa5\xba\x3c\x34\x23\xb3\x44\xdb\x79\xd4\x1c\x87\x4b\x3d\x4c\x8f\x52\x5d\x35\x47\xa6\x79\x3b\x6a\xe3\x23\xe1\x68\x37\x9b\x66\xc3\xfd\x71\x3a\xbf\x1a\x86\x99\x59\xa2\x59\xe5\xbb\xb5\x1b\xb4\xc3\x8e\x4c\xd2\x84\x6d\x8a\x06\x89\xd0\x8a\xd6\xe4\x89\x2c\xd2\x97\x07\x61\xd7\x68\x13\x83\xe9\x52\x92\x1e\xe2\x86\x13\x18\x8e\x3d\xfc\xaf\x7b\x0b\x06\x5a\x69\xef\xa8\x9f\xb6\x35\x74\x3e\xab\xf7\xae\x43\xda\xa2\x71\x22\x8a\x63\xb2\xf3\xe6\xd0\x02\x37\x68\x3a\x3e\x34\x79\xb5\x3c\xb4\x71\x56\xe4\x90\xb7\xe5\xfd\xd2\xc5\xd8\x76\xc1\x00\x83\x59\x36\x20\xcc\x7c\x71\x10\xcc\xd2\xf9\x91\xa3\x7b\xe5\x9d\x3a\xf8\x7a\x38\xf8\x72\xad\x1c\xbb\x27\xea\x91\x22\x91\x3e\x12\xe8\x27\xfb\x79\xf5\x1d\x49\x6d\x56\xb1\xae\x8f\x1f\x84\x87\x6c\x9f\x9d\x22\xfb\x6c\x47\xf6\x16\x12\x78\x8f\xde\x51\x93\xd5\xf9\x64\xc3\x87\xd2\x87\xe9\x6b\x30\xb0\x8c\xfa\xac\x77\x3f\x02\x8e\x23\x00\xe4\x5d\x9d\x15\xee\x99\x50\xfc\xe7\x07\x42\x71\xf9\x77\x28\xae\x4e\xcb\xce\x57\x02\xf1\xfd\x5b\x3d\x8e\x8e\x3c\x38\x8e\x3a\xbc\x44\x48\x5c\x21\x3c\xd2\xb2\x7f\x0e\xc2\xfc\x5b\x81\x70\x9a\xfb\xb5\x8c\x2f\x99\x78\xe3\xf3\x22\xab\xff\xf0\x1f\x43\x92\x92\x79\x28\x03\xc0\x6c\x8d\xdf\xbb\x50\x0f\xa0\x45\xf9\x99\xab\x4d\x42\xe0\x87\x50\xd9\x19\x60\x90\x17\x8c\xdd\x0f\xfa\x62\x48\xdf\x3f\x0c\x76\xcf\x82\x6f\xae\x6b\xcf\xc5\x71\xfe\x55\x77\xe9\x89\xcb\xf4\x62\xfd\xdc\xb5\xb1\xc8\x66\xf2\x22\xec\x5f\x5d\x0f\x24\xf4\x57\x00\x00\x00\xff\xff\xfc\xb8\x0e\x26\x71\x10\x00\x00")

func configChainstorageBscMainnetBaseYmlBytes() ([]byte, error) {
	return bindataRead(
		_configChainstorageBscMainnetBaseYml,
		"config/chainstorage/bsc/mainnet/base.yml",
	)
}

func configChainstorageBscMainnetBaseYml() (*asset, error) {
	bytes, err := configChainstorageBscMainnetBaseYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/chainstorage/bsc/mainnet/base.yml", size: 4209, mode: os.FileMode(420), modTime: time.Unix(1640048354, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configChainstorageBscMainnetDevelopmentYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\xcc\x31\x6f\xc2\x30\x10\xc5\xf1\xdd\x9f\xe2\x44\xe7\x58\x51\x19\x2a\x3c\xd3\xa1\x4b\x59\xb2\xa3\xcb\xf9\x11\x2c\xe2\x73\xe4\x33\xa1\xfd\xf6\x15\x51\x85\xde\xfa\xfe\xbf\x37\x1a\xae\xc9\xe8\x92\x66\x50\x32\x9a\xa0\xa8\xdc\x10\x69\xfc\xa5\x5d\xe6\x1b\x48\x8a\x5e\xd2\xb4\xf3\x74\x3c\xd1\xf7\x69\xa0\xcf\xe3\xd7\xe0\x1d\x3f\x2c\x38\x22\x7e\xd8\x99\x45\xca\x5d\x5b\xa0\x88\x15\x73\x59\x32\xb4\x39\xa2\xf1\x2e\x37\xb4\x40\xf8\xe1\xbc\xcc\xe8\xe4\xca\x49\xad\x95\xca\x13\xba\xd1\xa4\xcb\x9c\x54\xd1\xba\x88\xd5\x09\x47\xa8\x60\x23\x63\xac\x30\x0b\xd4\x90\x97\x52\x79\x7e\x1e\xfc\xbf\xe2\xa5\xe4\xf0\xf1\xbe\xdf\x3b\x43\x5d\x51\x9f\xc1\x98\x34\x9e\x5f\x55\xef\xb7\x85\x43\x7f\xe8\xdd\x5f\x00\x00\x00\xff\xff\x5d\x3b\x11\x73\xde\x00\x00\x00")

func configChainstorageBscMainnetDevelopmentYmlBytes() ([]byte, error) {
	return bindataRead(
		_configChainstorageBscMainnetDevelopmentYml,
		"config/chainstorage/bsc/mainnet/development.yml",
	)
}

func configChainstorageBscMainnetDevelopmentYml() (*asset, error) {
	bytes, err := configChainstorageBscMainnetDevelopmentYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/chainstorage/bsc/mainnet/development.yml", size: 222, mode: os.FileMode(420), modTime: time.Unix(1640048354, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configChainstorageBscMainnetLocalYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\xb1\x0e\xc2\x20\x10\x06\xe0\x9d\xa7\xf8\x53\xf7\xa6\x6b\x99\xeb\xe0\x62\x17\x76\x73\xc2\x01\x97\x9e\x90\x70\x38\xf8\xf6\x7e\x37\x84\x2a\x86\x2c\xca\x10\x43\xe1\xc6\x83\x26\x27\xbc\x7f\x58\x3e\x74\x31\x62\x6f\x59\xca\xb2\xe2\x38\xf1\x3c\x03\xee\xc7\x23\xac\xce\xd2\xe5\x1d\x10\x2b\x49\xb3\xd9\x07\x15\x7e\x51\x4a\x83\xcd\x3c\xb4\x47\xd2\xda\x6d\xfa\x7d\xdb\x37\x07\x0c\xb6\x99\xbf\xea\x91\x49\x8d\xdd\x3f\x00\x00\xff\xff\xb5\x38\xa5\xc8\x75\x00\x00\x00")

func configChainstorageBscMainnetLocalYmlBytes() ([]byte, error) {
	return bindataRead(
		_configChainstorageBscMainnetLocalYml,
		"config/chainstorage/bsc/mainnet/local.yml",
	)
}

func configChainstorageBscMainnetLocalYml() (*asset, error) {
	bytes, err := configChainstorageBscMainnetLocalYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/chainstorage/bsc/mainnet/local.yml", size: 117, mode: os.FileMode(420), modTime: time.Unix(1640048354, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configChainstorageBscMainnetProductionYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\xcc\x31\x4f\xc3\x30\x10\xc5\xf1\xdd\x9f\xe2\xa9\xcc\xb1\x22\x3a\xa0\x7a\x2e\x03\x0b\x5d\xb2\x57\xe7\xf3\x35\xb5\x1a\x9f\x23\x9f\x43\xe1\xdb\xa3\x56\x08\xbd\xf5\xfd\x7f\x2f\x98\xae\xd9\x70\xc9\x8b\x20\x1b\x66\x51\x69\xd4\x25\x21\xfe\x60\x57\xe8\x26\xe0\xaa\x97\x3c\xef\x3c\x8e\x27\x7c\x9e\x26\xbc\x1f\x3f\x26\xef\xe8\x6e\xc1\x01\x74\xb7\x33\x31\xd7\x4d\x7b\xc0\xda\x6a\xda\xb8\xe7\xaa\x0e\x88\x1b\xdf\xa4\x07\xc8\x37\x95\x75\x91\x81\xaf\x94\xd5\x7a\x6d\x34\xcb\x10\x8d\x87\x42\x59\x55\xfa\xf0\xa8\x1c\x53\x12\x65\x79\x92\x29\x35\x31\x0b\xe8\x52\xd6\xda\x68\xf1\x7f\x84\xe7\x5a\xc2\xdb\xeb\x7e\xef\x4c\xda\x97\xb4\xc7\x39\x66\x4d\xe7\xff\x62\xf4\xcf\x85\xc3\x78\x18\xdd\x6f\x00\x00\x00\xff\xff\x23\xe5\xbe\x3c\xda\x00\x00\x00")

func configChainstorageBscMainnetProductionYmlBytes() ([]byte, error) {
	return bindataRead(
		_configChainstorageBscMainnetProductionYml,
		"config/chainstorage/bsc/mainnet/production.yml",
	)
}

func configChainstorageBscMainnetProductionYml() (*asset, error) {
	bytes, err := configChainstorageBscMainnetProductionYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/chainstorage/bsc/mainnet/production.yml", size: 218, mode: os.FileMode(420), modTime: time.Unix(1640048354, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configChainstorageDogecoinMainnetBaseYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x57\xdf\x6f\xdb\xb6\x13\x7f\xd7\x5f\x71\xc8\xf7\x39\xb1\x9d\x36\xfd\xae\x02\xf6\xd0\xb5\x41\x17\x74\x4b\x86\x21\xc0\x80\xbd\x10\x27\xf2\x64\x11\xa6\x48\x95\x3c\xb9\xf6\xfe\xfa\x81\x22\x65\xd9\x6e\x52\x37\x58\xdb\xbc\x59\xe4\xfd\xbe\xcf\x7d\x8e\xfe\x1f\xdc\x37\x3a\x40\xad\x0d\x81\x0e\xb0\x24\x4b\x1e\x99\x14\x54\x5b\x38\x6b\x71\x45\x20\x9d\xad\xf5\xf2\xec\x02\xde\xdd\xc1\xed\xdd\x3d\x5c\xbf\xbb\xb9\xbf\x28\xb0\xd3\x65\x01\xd0\xe2\x46\xd8\xbe\x15\x95\x71\x72\x25\xa2\x95\x50\xc2\x62\x3e\x9f\x1f\xdf\x85\x12\xae\xe2\x61\x3c\xf8\xe4\xfc\x8a\xfc\x20\x58\x00\x04\xf6\x84\xad\xb6\x4b\x51\x21\xcb\x46\x04\xfd\x0f\x65\xe1\xe9\x4a\x5b\x26\xbf\x46\x53\xc2\x22\x1c\x5c\x0c\x4e\x9c\xa0\x35\x59\x16\xac\x5b\x8a\x56\xdb\x02\x3f\x85\x18\x1e\x7e\x0a\x02\xa5\x74\xbd\xe5\x12\x14\xad\xc9\xb8\xae\x25\xcb\x05\x40\xd5\xcb\x15\x71\x09\x67\x67\x05\x80\x32\x1f\xa3\x38\x80\x22\x83\x5b\x11\x48\x86\x12\x5e\x0f\x59\x00\x58\x8c\x56\x69\x83\x6d\x67\x48\xc8\x06\xb5\x0d\xec\x3c\x2e\x29\xa7\x26\x94\x5b\x92\x74\xda\x8a\x16\xb5\xb5\xc4\x42\x99\x8f\x83\xea\x5a\x07\x5d\x69\xa3\x79\x3b\xc4\xe6\x7a\xce\xb6\x5f\x0d\xb6\xd5\xd6\x62\xeb\x54\x95\x7c\xa7\x1a\x32\x56\xe6\x89\xee\x06\xed\x5c\x81\x53\xda\xa9\x52\xa7\x6d\x88\x86\xf4\xb2\x61\xa1\xad\xa2\xcd\xd7\x18\xac\xb6\xa3\xca\x83\xa6\xd7\xe4\x83\x76\x96\x94\x38\x1d\xe8\x24\x7b\x3a\xe4\x07\xed\x66\xbd\x2f\xc5\xfe\x88\x8f\x6a\x3b\xea\xaa\x87\xfc\x75\x9e\x82\x5e\x46\xad\xde\x1b\x41\x9b\x4e\x7b\x64\xed\x6c\x09\x2f\xe6\x6d\x01\xe0\x69\x39\x7c\xf5\xe1\x9c\x30\xf0\xf9\x62\xc0\xea\xe0\x31\xe3\x0b\x19\x85\x74\x6d\x34\x14\x06\xd1\xf7\x7f\xdf\xfc\x51\x48\x54\x64\xe5\x20\x83\x4a\xc5\xbb\x11\x98\x2e\x3a\x2f\x61\x3f\xf6\xf3\x31\xb0\xf3\x29\x30\x4f\x4c\x36\x46\x22\x3a\xf2\xda\xa9\x12\xfe\x5f\x0c\x3a\xd1\x64\xca\x28\x30\x7a\xce\x3d\x2a\x61\x5e\x4c\x80\x5b\xa6\xd8\x0c\x32\x05\x2e\x61\x31\x7c\x85\xdc\xa1\xc5\x24\x98\xa6\xab\x1d\x0f\x92\x7d\xf8\xe5\xb7\xbb\xb7\x1f\xde\xfe\xfa\xe6\xe6\x56\xbc\xbb\x7b\x7f\xfd\xf6\xee\xe6\xb6\x00\x90\x46\x93\xe5\x64\xb8\xc5\xc0\xe4\xd3\x6f\x00\xb2\xaa\x73\xda\xb2\x58\x7a\xd7\x77\x39\x4f\x80\x60\x70\x4d\x27\x64\xd6\x68\xb4\x42\x76\x5f\xb6\x35\x02\xe1\x28\xad\xf9\x41\x5a\xf1\xab\x26\xe4\xde\x67\xa7\xde\x05\x62\x46\xd1\xa1\x0f\xe4\x4b\x60\xdf\x53\x01\xa0\xbd\xa7\x01\x2b\x11\x56\x4a\x07\xc6\xd8\xa7\x48\x71\x91\xcc\x88\x23\x97\x95\x70\x7b\x7d\xff\xd7\xdd\x9f\x1f\x76\x05\x10\xbf\xbf\xb9\xb9\xbd\xbd\xbe\x2f\x76\x76\xf7\x47\xdc\x3a\x16\xb5\xeb\xad\x12\xe4\xbd\xf3\x42\x3a\x15\x69\xf3\xe5\x24\x92\x4b\x3b\x36\x3a\xd1\xd0\xe8\x6c\xec\x7a\x22\x66\x91\xe8\xe9\x33\xb0\x4a\xef\xf6\x9a\xef\xd1\x2e\x29\x53\x6b\xf4\xa3\x74\x18\x06\x45\x99\x8f\xa2\xf3\x4e\x52\x08\x6e\x4c\xba\xee\xad\x8c\x50\x42\x23\x52\xe5\xce\xce\x8a\xa0\x56\xd1\xd8\xc1\x08\xed\x90\xda\x30\x77\xa1\x9c\xcd\x6c\xcd\xe7\xd8\xe9\x8b\x18\x47\x85\x81\x2e\xa4\x6b\x67\xd8\xe9\x19\x6d\xba\xd9\xbe\xea\x6c\x8c\x76\x96\xa3\x9d\xad\x17\x0f\xee\x06\x4f\x81\xeb\xde\xe4\xc0\x02\xf9\x75\xc2\x51\xa5\xad\x9a\xfc\x1b\x27\xd1\x34\x2e\x70\xf9\x7a\xfe\x7a\x5e\x04\x83\x53\xe2\x23\x27\x91\x61\x2c\xe1\xea\x00\xcc\xe3\x69\x9a\x5d\xda\x74\x24\x99\xd4\x10\x42\x6d\x5c\xda\x20\xe7\xd0\x3a\xab\xd9\xf9\xe1\x77\xe7\x8c\xa1\xf4\x33\xad\xa0\xfc\x11\xc7\xda\xe0\x8a\x66\xbb\x91\xfa\x39\x26\x14\xf9\xde\xd5\x22\x6c\xad\x14\xd6\xa9\x43\x00\x15\x00\xac\x23\xd2\x2e\x87\x5f\x6d\x6c\x8f\x95\x24\x0c\x06\x4e\x24\x54\xc2\xa2\x29\x0e\xa2\xa9\x50\xae\x6a\x1d\x63\x48\x78\x42\xc9\x7a\x1d\xb7\x8b\x27\xf6\xdb\xb8\x0c\x75\xdb\xb7\x02\x99\xa9\xed\x38\x94\xf0\xe2\x50\x2c\xc8\x86\x54\x6f\x48\xb0\xcb\x7c\x90\xd7\x52\x09\x57\xed\x91\x68\xba\x76\x42\x1a\x17\x68\x92\x5b\xcc\x93\xe0\xfe\xb2\xbe\xbc\xca\xab\x52\x36\x24\x57\x69\x22\xc7\x35\x9e\x6f\xe2\x9e\xf6\x94\xa1\x46\x2a\xd2\x54\xda\xf7\xb1\xfc\x09\xdf\x7d\x2b\xa4\xb3\xb2\xf7\x3e\xce\x2f\x6d\xd8\xa3\x64\x17\xb1\x70\x99\x46\x83\x31\xac\x84\xd1\x61\xd8\xe5\x35\xf6\x26\xad\x80\xb1\x42\x42\x91\xd4\x91\x54\xa7\x60\x2f\xdb\x43\x09\xda\x90\xec\xf9\x50\xe4\x65\x73\x28\xa3\x55\x64\x52\xde\x96\xbb\xa3\x8b\xa9\xec\xb1\x07\x64\x65\xd3\x62\x84\xe9\xb3\x37\x41\x36\xda\x4c\x80\xdd\x4b\xef\x31\xc5\x57\x59\xf1\xf9\x4a\x39\x55\x2f\xf2\x89\x77\x21\x88\x23\x5a\x3f\x59\xcf\xab\xef\x08\x6a\xb9\x72\x75\x7d\xfc\xdc\x3c\x44\xfb\xe2\x31\xb0\x2f\x46\xb0\x77\xe8\xd1\x18\x32\x3a\xb4\x23\xad\x3f\x52\xf0\x9c\x7a\x5e\xdc\x92\x2c\xc7\xa7\x42\x62\x87\x1f\xd1\x8e\xa3\x06\xc4\x57\x7b\xa2\xbb\xaf\x6c\xc5\x4f\x3f\xb2\x15\xf3\xcf\x7b\x71\xf5\x38\xef\x3c\xb1\x13\xdf\xbf\xd6\xd3\x22\x49\x6b\xe4\xa8\xc4\x0d\xa1\xe7\x8a\xf0\x0b\x35\xfb\xef\x5d\xb8\xfc\x66\x5d\x78\x1c\xfd\x75\x5c\x60\x71\xe7\x95\x50\xa3\x09\xb4\xe3\xff\xfc\xf7\x25\x46\x15\x37\x62\x5c\x01\x72\x2b\xcd\xde\x48\x1d\xb4\x2b\x0f\x41\x48\x2f\x65\x21\x3d\x21\x3f\xd4\x97\x51\x80\x6c\x7c\xd2\xa8\x7d\xaf\xcf\xd6\xeb\xdd\x43\x61\x7c\x26\x7c\x73\x6a\xfb\xda\x4e\x5e\x3e\x6d\x9c\x4e\xcc\xd3\xb3\x15\x74\xef\xb9\x35\x3e\x11\x87\x97\xd7\x03\x01\xfd\x1b\x00\x00\xff\xff\x0c\xfa\x3f\xf9\xd3\x10\x00\x00")

func configChainstorageDogecoinMainnetBaseYmlBytes() ([]byte, error) {
	return bindataRead(
		_configChainstorageDogecoinMainnetBaseYml,
		"config/chainstorage/dogecoin/mainnet/base.yml",
	)
}

func configChainstorageDogecoinMainnetBaseYml() (*asset, error) {
	bytes, err := configChainstorageDogecoinMainnetBaseYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/chainstorage/dogecoin/mainnet/base.yml", size: 4307, mode: os.FileMode(420), modTime: time.Unix(1640048354, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configChainstorageDogecoinMainnetDevelopmentYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\xcc\xb1\x6e\xc2\x30\x18\xc4\xf1\xdd\x4f\x71\xa2\x73\xac\xa8\x0c\x15\x9e\xe9\xd0\xa5\x2c\xd9\xd1\x17\xfb\x08\x16\xf1\xe7\xc8\x36\xa1\x7d\xfb\x8a\xa8\x42\xb7\xde\xff\xf7\x86\xe1\x1a\x2b\x2e\x71\x26\x62\xc5\x44\x65\x91\xc6\x80\xf1\x17\xbb\x24\x37\xc2\x67\xbd\xc4\x69\x67\x71\x3c\xe1\xfb\x34\xe0\xf3\xf8\x35\x58\x23\x8f\xea\x0c\x20\x8f\x7a\x16\xef\xf3\x5d\x9b\x43\xe0\xca\x39\x2f\x89\xda\x0c\x30\xde\xfd\x8d\xcd\x81\x3f\x92\x96\x99\x9d\xbf\x4a\xd4\xda\x72\x91\x89\x5d\xc8\x13\x7d\x8e\xda\x25\x89\xaa\x6c\x5d\xe0\x6a\xbc\x04\xaa\xe7\xe6\x86\x50\x58\xab\x43\x63\x5a\x72\x91\xf9\x79\xb0\xff\x94\xf5\x39\xb9\x8f\xf7\xfd\xde\x54\x96\x95\xe5\x19\x8c\x51\xc3\xf9\x55\xf5\x76\x9b\x3b\xf4\x87\xde\xfc\x05\x00\x00\xff\xff\x02\x04\x92\x7d\xe3\x00\x00\x00")

func configChainstorageDogecoinMainnetDevelopmentYmlBytes() ([]byte, error) {
	return bindataRead(
		_configChainstorageDogecoinMainnetDevelopmentYml,
		"config/chainstorage/dogecoin/mainnet/development.yml",
	)
}

func configChainstorageDogecoinMainnetDevelopmentYml() (*asset, error) {
	bytes, err := configChainstorageDogecoinMainnetDevelopmentYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/chainstorage/dogecoin/mainnet/development.yml", size: 227, mode: os.FileMode(420), modTime: time.Unix(1640048354, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configChainstorageDogecoinMainnetLocalYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\xb1\x0e\xc2\x20\x10\x06\xe0\x9d\xa7\xf8\x53\xf7\xa6\x6b\x99\xeb\xe0\x62\x17\x76\x73\xc2\x01\x97\x9e\x90\x70\x38\xf8\xf6\x7e\x37\x84\x2a\x86\x2c\xca\x10\x43\xe1\xc6\x83\x26\x27\xbc\x7f\x58\x3e\x74\x31\x62\x6f\x59\xca\xb2\xe2\x38\xf1\x3c\x03\xee\xc7\x23\xac\xce\xd2\xe5\x1d\x10\x2b\x49\xb3\xd9\x07\x15\x7e\x51\x4a\x83\xcd\x3c\xb4\x47\xd2\xda\x6d\xfa\x7d\xdb\x37\x07\x0c\xb6\x99\xbf\xea\x91\x49\x8d\xdd\x3f\x00\x00\xff\xff\xb5\x38\xa5\xc8\x75\x00\x00\x00")

func configChainstorageDogecoinMainnetLocalYmlBytes() ([]byte, error) {
	return bindataRead(
		_configChainstorageDogecoinMainnetLocalYml,
		"config/chainstorage/dogecoin/mainnet/local.yml",
	)
}

func configChainstorageDogecoinMainnetLocalYml() (*asset, error) {
	bytes, err := configChainstorageDogecoinMainnetLocalYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/chainstorage/dogecoin/mainnet/local.yml", size: 117, mode: os.FileMode(420), modTime: time.Unix(1640048354, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configChainstorageDogecoinMainnetProductionYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\x8e\xb1\x6e\xeb\x30\x0c\x45\x77\x7d\x05\x91\x37\xdb\x08\x5e\x86\x22\x9a\xd3\xa1\x4b\xb3\x78\x37\x68\xe9\xda\x11\x2c\x89\x06\x25\xd7\xe9\xdf\x17\x76\x8a\x82\xcb\x1d\xce\x39\xe0\x3f\xea\x1e\xa1\xd0\x18\x22\x28\x14\x9a\x90\xa1\x5c\xe1\x69\xf8\xa6\x53\xe2\x19\xe4\x24\x8f\x61\x3a\xb5\x74\xbb\xd3\xe7\xbd\xa3\xf7\xdb\x47\xd7\x1a\xde\x8a\x35\x44\xbc\x95\x9e\x9d\x93\x35\x57\x4b\x8b\x8a\x5f\x5d\x0d\x92\x0d\xd1\xb0\xba\x19\xd5\x12\x9e\x9c\x96\x88\xc6\x3d\x38\xe4\x52\x45\x79\x42\xe3\x65\x82\x93\x90\x9b\xc4\x21\x67\xd4\x66\x57\x8d\x63\x8f\xec\x70\x74\xbd\x57\x94\x62\xa9\x22\x2d\xa2\x1c\xdb\xdf\x4e\xeb\x24\xd9\xb7\xff\x97\x8b\x29\xd0\x2f\xe8\x0e\x0f\x21\xfb\xfe\xcf\x38\xb7\xc7\xd9\xeb\xf9\x7a\x36\x25\xf2\x4e\xe0\xb9\xc0\x55\xf8\x7e\x13\x9d\xc7\x28\xaf\xe7\x1b\x4a\x92\x43\x15\x3d\xf6\x22\x31\xe2\x35\x4b\x55\x70\x82\x9a\x9f\x00\x00\x00\xff\xff\x24\x99\x42\xc7\x1e\x01\x00\x00")

func configChainstorageDogecoinMainnetProductionYmlBytes() ([]byte, error) {
	return bindataRead(
		_configChainstorageDogecoinMainnetProductionYml,
		"config/chainstorage/dogecoin/mainnet/production.yml",
	)
}

func configChainstorageDogecoinMainnetProductionYml() (*asset, error) {
	bytes, err := configChainstorageDogecoinMainnetProductionYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/chainstorage/dogecoin/mainnet/production.yml", size: 286, mode: os.FileMode(420), modTime: time.Unix(1640048354, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configChainstorageEthereumGoerliBaseYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x57\x4f\x6f\x1b\xb7\x13\xbd\xef\xa7\x18\xf8\x77\xb6\x25\x39\x76\x7e\xcd\x02\x3d\xb4\x89\x91\x18\x49\xe3\x22\x70\x51\xa0\x17\x62\x44\xce\x6a\x09\xf1\xcf\x86\x9c\x55\xa4\x7e\xfa\x82\xcb\x5d\xad\xa4\xca\x56\x8c\x26\xf1\x4d\x4b\xce\x0c\xdf\xcc\x1b\xbe\xa1\xfe\x07\xf7\xb5\x8e\x50\x69\x43\xa0\x23\x2c\xc8\x51\x40\x26\x05\xf3\x0d\x9c\x59\x5c\x12\x48\xef\x2a\xbd\x38\xbb\x80\x37\x77\xf0\xf1\xee\x1e\x6e\xde\xdc\xde\x5f\x14\xd8\xe8\xb2\x00\xb0\xb8\x16\xae\xb5\x62\x6e\xbc\x5c\x8a\x14\x25\x96\x30\x9b\x4e\xa7\x87\x7b\xb1\x84\xeb\xb4\x98\x16\xbe\xf8\xb0\xa4\xd0\x19\x16\x00\x91\x03\xa1\xd5\x6e\x21\xe6\xc8\xb2\x16\x51\xff\x4d\xbd\xf1\xb8\xa5\x1d\x53\x58\xa1\x29\x61\x16\xf7\x36\xba\x43\xbc\xa0\x15\x39\x16\xac\x2d\xa5\xa8\xb6\xc0\x2f\x31\xc1\xc3\x2f\x51\xa0\x94\xbe\x75\x5c\x82\xa2\x15\x19\xdf\x58\x72\x5c\x00\xcc\x5b\xb9\x24\x2e\xe1\xec\xac\x00\x50\xe6\x73\x32\x07\x50\x64\x70\x23\x22\xc9\x58\xc2\xab\x2e\x0b\x00\x87\x29\x2a\xad\xd1\x36\x86\x84\xac\x51\xbb\xc8\x3e\xe0\x82\xfa\xd4\x04\x71\x4d\x81\x5a\x2b\x16\x9e\x82\xd1\x42\x99\xcf\x9d\xe7\x4a\x47\x3d\xd7\x46\xf3\xa6\x83\xe6\x5b\xee\x43\xbf\xec\x42\xab\x8d\x43\xeb\xd5\x3c\x1f\x9d\x4b\xc8\x38\x37\x4f\x3b\xad\x73\xee\xf3\x3f\xe5\x9c\xeb\x74\x32\x84\xa8\x49\x2f\x6a\x16\xda\x29\x5a\x7f\x4d\xbc\xf9\x66\x70\x39\x16\x79\x45\x21\x6a\xef\x48\x89\xd3\x30\x47\xdb\x93\x80\x8f\x86\xed\xdd\x1e\x43\xfe\xc0\x11\xf3\xcd\xe0\xab\x8e\x1c\xd7\x04\x8a\x7a\x91\x9c\xda\x60\x04\xad\x1b\x1d\x90\xb5\x77\x25\xbc\x98\xda\x02\x20\xd0\xa2\xfb\x6a\xe3\x39\x61\xe4\xf3\x59\xd7\xa5\xdd\x81\x7d\x67\x21\xa3\x90\xde\xa6\x40\xb1\x33\x7d\xfb\xd7\xed\xef\x85\x44\x45\x4e\x76\x36\xa8\x54\xda\x1b\x5a\xd2\x5b\xd4\xae\x84\x5d\xe8\xe7\x03\xae\xf3\x2d\xae\x40\x4c\x2e\x01\x11\x0d\x05\xed\x55\x09\xff\x2f\x3a\x97\x14\x31\xe7\x13\x19\x03\xf7\xfc\x94\x30\x2d\xc6\x56\x5b\x64\x68\x06\x99\x22\x97\x30\xeb\xbe\x62\x4f\xcf\x6c\x34\xcc\xd7\xea\x45\x1c\x56\xf2\x01\xf0\xeb\x87\xbb\xd7\xef\x5f\xbf\xfb\xe5\xf6\xa3\xb8\xb9\x7f\x77\xf3\xe9\xe6\x8f\xdf\x0a\x00\x69\x34\x39\xce\x91\x2d\x46\xa6\x90\x7f\x03\x90\x53\x8d\xd7\x8e\xc5\x22\xf8\xb6\xe9\xf3\x04\x88\x06\x57\x74\xc2\x66\x85\x46\x2b\x64\xff\x78\xac\xa1\x0f\x0e\xf2\x9a\xee\xe5\x95\xbe\x2a\x42\x6e\x43\x7f\x68\xf0\x91\x98\x51\x34\x18\x22\x85\x12\x38\xb4\x54\x00\xe8\x10\xa8\x6b\x95\xd4\x55\x4a\x47\xc6\xc4\x13\xcc\xae\x92\x8a\x11\x27\x11\x2b\xe1\xe3\xcd\xfd\x9f\x77\x9f\xde\x6f\xf3\x17\x6f\xef\x6e\x3e\x7d\xb8\x2d\xb2\x68\x8a\x5e\x3a\x0e\xba\x49\x06\xbf\x43\x4f\x40\xb7\xa0\x5e\xf5\xae\x8a\xaa\x75\x32\xd1\x89\x46\x64\xf0\x67\x67\x45\x54\xcb\x64\xbe\xd7\xc4\xdb\x66\xa9\x99\x9b\x58\x4e\x26\xae\xe2\x73\x6c\xf4\x85\xf4\xda\xcd\x31\xd2\x85\xf4\x76\x82\x8d\x9e\xd0\xba\x99\xec\xba\x4e\x06\x38\x93\x0c\x67\xb2\x9a\x1d\xd5\xe5\x40\x91\xab\xd6\xf4\xf5\x88\x14\x56\x99\xc9\xb9\x76\x6a\x3c\xde\x78\x89\xa6\xf6\x91\xcb\x57\xd3\x57\xd3\x22\x1a\x1c\x33\xeb\x25\x41\x91\x61\x2c\xe1\x6a\xba\xd7\x50\xc3\xf2\xac\xbb\x3e\xb4\x6e\x48\x32\xa9\x0e\x43\x65\x7c\x96\xef\x73\xb0\xde\x69\xf6\xa1\xfb\xdd\x78\x63\x28\xff\xcc\xfa\xdf\x7f\xa4\x9b\x65\x70\x49\x93\x6d\x5b\xff\x9c\x32\x4a\x6a\xeb\x2b\x11\x37\x4e\x0a\xe7\xd5\x2e\x87\x1d\x14\xd6\x89\xec\x59\xf7\xcb\x26\x02\x9c\x24\x61\x30\x72\x96\x81\x12\x66\xd7\xb6\xd8\x83\x33\x47\xb9\xac\x74\x02\x91\x1b\x07\x25\xeb\x55\x12\xf7\x40\x1c\x36\x69\x14\x69\xdb\x5a\x81\xcc\x64\x1b\x8e\x25\xbc\xd8\x37\x8b\xb2\x26\xd5\x1a\x12\xec\xfb\x4b\xd9\x4f\x85\x12\xae\xed\x81\x69\xde\xf6\x42\x1a\x1f\x69\xb4\xcb\xd5\x4a\x50\xc6\x51\x79\x79\xdd\x0f\x2a\x59\x93\x5c\xe6\x5b\x31\x0c\xd1\x7e\x27\x4d\xc9\x40\x4d\xf0\x92\x62\x24\x95\xb4\x22\x4f\xdb\x24\x5f\x79\xc8\xb5\x56\x48\xef\x64\x1b\x42\xba\x43\xb4\xe6\x80\x92\x7d\xea\x86\xcb\xab\xce\x82\x31\x2e\x85\xd1\xb1\x9b\xa4\x15\xb6\x86\xbb\xe5\xa1\x42\x42\x91\xd4\x49\xd8\x46\xb0\x97\x76\xdf\x82\xd6\x24\x5b\xde\x37\xb9\xaa\xf7\x6d\xb4\x4a\x72\xc6\x9b\x72\xbb\x74\x31\x96\x3d\x71\x40\x4e\xd6\x16\x53\xa3\x3e\x3b\x09\xb2\xd6\x66\xec\xd8\x9d\xf4\x1e\x72\x7c\xd9\x3b\x3e\x5f\x29\xc7\xea\x25\x41\x09\x3e\x46\x71\x20\xad\x27\xeb\x79\xfd\x1d\x9b\x5a\x2e\x7d\x55\x1d\x3e\xf6\xf6\xbb\x7d\xf6\x50\xb3\xcf\x86\x66\x6f\x30\xa0\x31\x64\x74\xb4\x49\x51\x1f\x29\x78\x9f\x7a\x3f\x3d\x25\x39\x4e\xe3\x3a\xcb\xdf\x8f\xa0\xe3\x80\x80\xf4\x66\xce\x7a\xf7\x95\x54\xfc\xf4\x23\xa9\x98\xfe\x9b\x8b\xeb\x87\x75\xa7\xdb\xa8\x50\x1b\xbf\xa2\x20\xc8\xa5\xd9\xab\xb6\xb3\xf5\x29\x24\x7d\x7f\x1a\xc6\x21\x93\x47\xcc\x41\xf5\x6b\xc2\xc0\x73\xc2\x47\xca\xf9\xdf\x09\xba\xfc\x66\x04\x3d\x7c\x31\x1e\xa1\xa3\x4a\x73\x2f\x8d\xca\x12\x2a\x34\x91\xb6\x53\xa3\xff\xcf\x91\x00\xa7\x41\x9a\x06\x87\xdc\x48\xb3\x73\x11\x8f\x30\x19\xf3\x13\x57\xc8\x40\xc8\xc7\x18\x1b\x0c\xb6\x40\xc6\x43\x9f\xad\x0b\xb6\xcf\x8b\xe1\x71\xf1\xcd\xf5\xf0\x6b\x39\xbe\x7c\xda\x1d\x3c\x71\x09\x9f\xad\xa0\x3b\x8f\xb4\xe1\x65\xd9\xbd\xd7\x8e\x00\xfa\x27\x00\x00\xff\xff\x3e\xdd\xcd\xb9\x86\x10\x00\x00")

func configChainstorageEthereumGoerliBaseYmlBytes() ([]byte, error) {
	return bindataRead(
		_configChainstorageEthereumGoerliBaseYml,
		"config/chainstorage/ethereum/goerli/base.yml",
	)
}

func configChainstorageEthereumGoerliBaseYml() (*asset, error) {
	bytes, err := configChainstorageEthereumGoerliBaseYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/chainstorage/ethereum/goerli/base.yml", size: 4230, mode: os.FileMode(420), modTime: time.Unix(1640048354, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configChainstorageEthereumGoerliDevelopmentYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\xcc\xbd\x6e\x83\x30\x14\xc5\xf1\xdd\x4f\x71\x95\xce\x20\x94\x54\xaa\xe2\x39\x1d\xba\x34\x0b\x3b\xba\xd8\x27\xd8\xc2\x1f\xc8\xbe\x90\xf6\xed\x2b\x50\x95\x73\xd6\xbf\x7e\x6f\xd4\x3b\x5f\xe9\xe1\x03\xc8\x57\x9a\x90\x50\x58\x60\x69\xfc\xa5\x53\xe4\x19\x64\x72\x7a\xf8\xe9\xd4\xd2\xed\x4e\xdf\xf7\x9e\x3e\x6f\x5f\x7d\xab\xf8\x59\xb5\x22\xe2\x67\x1d\xd8\x98\xbc\x26\xd1\x64\xb1\x21\xe4\x25\x22\x89\x22\x1a\x57\x33\x43\x34\xe1\x87\xe3\x12\xd0\x18\xc7\x3e\x55\xc9\x85\x27\x34\x10\x87\x82\x35\x36\x53\x46\x09\xbe\xb1\xd8\x94\x61\x8b\x64\x70\xb0\xd6\x16\xd4\xaa\x49\x10\x97\x5c\x38\xec\x41\xfb\x2f\xb5\x26\x47\xfd\x71\xbe\x5c\xd4\x41\xee\xfd\x18\xb2\x99\x87\x2a\x5c\x64\x70\xf0\x93\x13\x4d\xef\xe7\x6e\x9f\xaa\x28\x1b\xca\x51\xf9\x64\x87\x17\xdd\xb5\xc7\xf5\xb5\xbb\x76\xea\x2f\x00\x00\xff\xff\x30\xbe\x0b\x83\x07\x01\x00\x00")

func configChainstorageEthereumGoerliDevelopmentYmlBytes() ([]byte, error) {
	return bindataRead(
		_configChainstorageEthereumGoerliDevelopmentYml,
		"config/chainstorage/ethereum/goerli/development.yml",
	)
}

func configChainstorageEthereumGoerliDevelopmentYml() (*asset, error) {
	bytes, err := configChainstorageEthereumGoerliDevelopmentYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/chainstorage/ethereum/goerli/development.yml", size: 263, mode: os.FileMode(420), modTime: time.Unix(1640048354, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configChainstorageEthereumGoerliLocalYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\xb1\x0e\xc2\x20\x10\x06\xe0\x9d\xa7\xf8\x53\xf7\xa6\x6b\x99\xeb\xe0\x62\x17\x76\x73\xc2\x01\x97\x9e\x90\x70\x38\xf8\xf6\x7e\x37\x84\x2a\x86\x2c\xca\x10\x43\xe1\xc6\x83\x26\x27\xbc\x7f\x58\x3e\x74\x31\x62\x6f\x59\xca\xb2\xe2\x38\xf1\x3c\x03\xee\xc7\x23\xac\xce\xd2\xe5\x1d\x10\x2b\x49\xb3\xd9\x07\x15\x7e\x51\x4a\x83\xcd\x3c\xb4\x47\xd2\xda\x6d\xfa\x7d\xdb\x37\x07\x0c\xb6\x99\xbf\xea\x91\x49\x8d\xdd\x3f\x00\x00\xff\xff\xb5\x38\xa5\xc8\x75\x00\x00\x00")

func configChainstorageEthereumGoerliLocalYmlBytes() ([]byte, error) {
	return bindataRead(
		_configChainstorageEthereumGoerliLocalYml,
		"config/chainstorage/ethereum/goerli/local.yml",
	)
}

func configChainstorageEthereumGoerliLocalYml() (*asset, error) {
	bytes, err := configChainstorageEthereumGoerliLocalYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/chainstorage/ethereum/goerli/local.yml", size: 117, mode: os.FileMode(420), modTime: time.Unix(1640048354, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configChainstorageEthereumGoerliProductionYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\xcc\xb1\x4e\xc3\x30\x18\xc4\xf1\xdd\x4f\x71\x2a\x73\xac\x88\x0e\xa8\x9e\xcb\xc0\x42\x97\xec\xd5\x17\xfb\x9a\x58\x8d\xed\xe8\xb3\x43\xe1\xed\x51\x23\x84\x6e\xbd\xff\xef\x05\xc3\x1c\x2b\x6e\x71\x21\x62\xc5\xc4\x4c\x95\xc6\x80\xf1\x07\x87\x24\x77\xc2\x97\x7c\x8b\xd3\xc1\xe2\x7c\xc1\xe7\x65\xc0\xfb\xf9\x63\xb0\x46\x1e\xd5\x19\x40\x1e\xf5\x2a\xde\x97\x2d\x37\x87\x55\x4b\xd8\x7c\x8b\x25\x1b\x60\xdc\xfc\x9d\xcd\x81\xdf\x92\xd6\x85\x9d\x9f\x25\xe6\xda\x8a\xca\xc4\x8e\x6d\xa6\x72\x4b\xdd\x54\xa8\x4b\xec\x9e\xa5\xf1\x12\x98\x3d\x77\x36\x04\x65\xad\x0e\x8d\x69\x2d\x2a\x8b\xfd\x63\xac\x2f\xc9\xbd\xbd\x1e\x8f\xa6\x52\xbf\xa8\xcf\xf3\x18\x73\xb8\xfe\x17\xbd\xdd\xe7\x4e\xfd\xa9\x37\xbf\x01\x00\x00\xff\xff\xef\x4b\x61\x54\xde\x00\x00\x00")

func configChainstorageEthereumGoerliProductionYmlBytes() ([]byte, error) {
	return bindataRead(
		_configChainstorageEthereumGoerliProductionYml,
		"config/chainstorage/ethereum/goerli/production.yml",
	)
}

func configChainstorageEthereumGoerliProductionYml() (*asset, error) {
	bytes, err := configChainstorageEthereumGoerliProductionYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/chainstorage/ethereum/goerli/production.yml", size: 222, mode: os.FileMode(420), modTime: time.Unix(1640048354, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configChainstorageEthereumMainnetBaseYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x57\x4b\x6f\x1b\x37\x10\xbe\xef\xaf\x18\xb8\x67\x5b\x0f\x5b\x69\xb3\x40\x0e\x69\x62\x34\x46\x1a\xbb\x08\x5c\x14\xe8\x85\x18\x71\x67\xb5\x84\xf8\xd8\x90\xb3\x8a\xd4\x5f\x5f\x70\x49\x69\x25\xbf\xe4\x20\x4d\x7d\x5b\x91\xf3\xe2\x7c\x1f\xe7\xa3\x7e\x82\xdb\x46\x05\xa8\x95\x26\x50\x01\x16\x64\xc9\x23\x53\x05\xf3\x0d\x9c\x18\x5c\x12\x48\x67\x6b\xb5\x38\x39\x83\xf7\x37\x70\x7d\x73\x0b\x97\xef\xaf\x6e\xcf\x0a\x6c\x55\x59\x00\x18\x5c\x0b\xdb\x19\x31\xd7\x4e\x2e\x45\x8c\x12\x4a\x98\x8c\xc7\xe3\xbb\x7b\xa1\x84\x59\x5c\x8c\x0b\x5f\x9d\x5f\x92\xef\x0d\x0b\x80\xc0\x9e\xd0\x28\xbb\x10\x73\x64\xd9\x88\xa0\xfe\xa1\x6c\x3c\x6c\x29\xcb\xe4\x57\xa8\x4b\x98\x84\x83\x8d\x3e\x89\x13\xb4\x22\xcb\x82\x95\xa1\x18\xd5\x14\xf8\x35\xc4\xf2\xf0\x6b\x10\x28\xa5\xeb\x2c\x97\x50\xd1\x8a\xb4\x6b\x0d\x59\x2e\x00\xe6\x9d\x5c\x12\x97\x70\x72\x52\x00\x54\xfa\x4b\x34\x07\xa8\x48\xe3\x46\x04\x92\xa1\x84\xd7\xfd\x29\x00\x2c\xc6\xa8\xb4\x46\xd3\x6a\x12\xb2\x41\x65\x03\x3b\x8f\x0b\xca\x47\x13\xc4\x0d\x79\xea\x8c\x30\xa8\xac\x25\x16\x95\xfe\xd2\xbb\xae\x54\x50\x73\xa5\x15\x6f\xfa\xda\x5c\xc7\x39\xf6\xab\x3e\x76\xb5\xb1\x68\x5c\x35\x4f\xb9\x53\x0f\x19\xe7\xfa\x1b\xd3\xf5\xde\xb9\x03\xc7\xbc\x53\xa7\x8e\xc7\x10\x0d\xa9\x45\xc3\x42\xd9\x8a\xd6\xcf\x09\x38\xdf\x6c\x5d\x1e\x0c\xbd\x22\x1f\x94\xb3\x54\x89\xe3\x85\x0e\xb6\xc7\x4b\x7e\x30\x6e\xf6\x7b\xaa\xf6\x47\x72\xcc\x37\x5b\xdf\xea\xa1\x7c\xad\xa7\xa0\x16\xd1\xab\xf3\x5a\xd0\xba\x55\x1e\x59\x39\x5b\xc2\xf9\xd8\x14\x00\x9e\x16\xfd\xaf\x2e\x9c\x12\x06\x3e\x9d\xf4\x5c\xed\x33\x66\x7e\x21\xa3\x90\xce\xc4\x40\xa1\x37\xfd\xed\xef\xab\x3f\x0a\x89\x15\x59\xd9\xdb\x60\x55\xc5\xbd\x2d\x31\x5d\x4c\x5e\xc2\x7e\xed\xa7\xdb\xc2\x4e\x87\xc2\x3c\x31\xd9\x58\x89\x68\xc9\x2b\x57\x95\xf0\x73\xd1\xfb\xc4\x90\xe9\x44\x81\xd1\x73\xc6\xa8\x84\x71\x31\x10\x6e\x91\x6a\xd3\xc8\x14\xb8\x84\x69\xff\x2b\x64\x84\xa6\x83\x61\xba\x5d\xe7\x61\xbb\x92\x12\xc0\xaf\xbf\xdf\xbc\xfb\xf8\xee\xc3\xdb\xab\x6b\x71\x79\xfb\xe1\xf2\xf3\xe5\x9f\x9f\x0a\x00\xa9\x15\x59\x4e\x91\x0d\x06\x26\x9f\xbe\x01\xc8\x56\xad\x53\x96\xc5\xc2\xbb\xae\xcd\x07\x05\x08\x1a\x57\x74\xc4\x66\x85\x5a\x55\xc8\xee\xe9\x58\x5b\x26\xdc\x39\xd7\xe4\xe0\x5c\xb1\x01\x35\x21\x77\x3e\x27\xf5\x2e\x10\x33\x8a\x16\x7d\x20\x5f\x02\xfb\x8e\x0a\x00\xe5\x3d\xf5\x64\x89\xbc\xaa\x54\x60\x8c\x40\xc1\xe4\x22\x0e\x33\xe2\x38\xcb\x4a\xb8\xbe\xbc\xfd\xeb\xe6\xf3\xc7\xdd\xf9\xc5\xa7\xb7\x57\xd7\xd7\x97\xb7\x45\x1a\x9e\x22\x8f\x90\xbb\x84\x92\xde\xed\x01\xe4\xd1\x2e\x28\x8f\xbf\x8b\xa2\xee\xac\x8c\x80\xa2\x16\xa9\xfc\x93\x93\x22\x54\xcb\x68\x7e\x40\xe4\x1d\x5f\x1a\xe6\x36\x94\xa3\x91\xad\xf9\x14\x5b\x75\x26\x9d\xb2\x73\x0c\x74\x26\x9d\x19\x61\xab\x46\xb4\x6e\x47\xfb\xae\xa3\x6d\x3d\xa3\x5c\xcf\x68\x35\x79\x70\x42\x7b\x0a\x5c\x77\x3a\xb7\x24\x90\x5f\x25\x30\xe7\xca\x56\x43\x7e\xed\x24\xea\xc6\x05\x2e\x5f\x8f\x5f\x8f\x8b\xa0\x71\x38\x5a\x9e\x0c\x15\x69\xc6\x1c\x74\xe0\xd4\x76\x79\x1a\x6f\x10\xad\x5b\x92\x4c\x55\x5f\x42\xad\x5d\x9a\xe3\xa7\x60\x9c\x55\xec\x7c\xff\xdd\x3a\xad\x29\x7d\x26\x21\xb8\xf3\x63\xb4\x23\xc0\x9b\x49\xbf\x11\x6f\x9d\xc6\x25\x8d\x76\x8c\x7f\x33\xed\x37\xa4\x77\x21\x88\x1d\xab\x0a\x80\x38\xa2\x5d\x2d\xc2\xc6\x4a\x61\x5d\x75\x00\x79\x2c\x9b\x55\xe4\xc6\xa4\xff\x32\x11\x2d\x2b\x49\x68\x0c\x9c\xe6\x46\x09\xe7\xa6\x38\x28\x7d\x8e\x72\x59\xab\x58\x70\xa2\x19\x4a\x56\xab\x28\x08\x9e\xd8\x6f\xa2\x7e\x29\xd3\x19\x81\xcc\x64\x5a\x0e\x25\x9c\x1f\x9a\x05\xd9\x50\xd5\x69\x12\xec\xf2\x15\xce\x4a\x52\xc2\xcc\xdc\x31\x4d\xdb\x4e\x48\xed\x02\x0d\x76\x93\x71\x32\xdc\xd7\xd7\xe9\x2c\xab\x9b\x6c\x48\x2e\xd3\x1d\xda\x2a\x6f\xde\x89\xd2\xea\xa9\xf5\x4e\x52\x08\x54\xc5\xc9\x92\x24\x3a\x4e\xbb\xa4\x8c\x9d\x11\xd2\x59\xd9\x79\x1f\x1b\x4e\x6b\xf6\x28\xd9\x45\xe2\x4c\x2f\x7a\x0b\xc6\xb0\x14\x5a\x85\x5e\x7e\x6b\xec\x74\x9a\xda\xdb\x0e\x89\x8a\xa4\x8a\x73\x70\x28\x76\x6a\x0e\x2d\x68\x4d\xb2\xe3\x43\x93\x8b\xe6\xd0\x46\x55\x71\xf8\xf1\xa6\xdc\x2d\x9d\x0d\x6d\x8f\x18\x90\x95\x8d\xc1\xc8\xe9\x17\x07\x41\x36\x4a\x0f\xec\xde\x3b\xde\x63\x8e\xaf\xb2\xe3\xcb\xb5\x72\xe8\x5e\x1c\x3e\x87\x57\xe6\x99\xfd\x9c\xfd\x40\x52\xcb\xa5\xab\xeb\xbd\x17\xe2\x6c\x3c\x36\xe1\x1e\xe1\x27\xe3\xc7\x08\xbf\xdb\x69\xd1\xa3\xd6\xa4\x55\x30\x71\x02\x3f\xd1\xf4\x7c\xfc\xac\xb7\x92\x2c\x47\x85\xcf\x0a\xb3\xb7\x79\xa8\xb9\x93\x59\xbc\x5b\x39\xd9\x8f\xc7\xed\xfe\x70\xcb\x43\xf4\x99\x98\xfd\xf2\x3f\x62\x36\x19\xdf\x47\x6c\xf6\xf8\x80\xea\x37\x6a\x54\xda\xad\xc8\x0b\xb2\x51\xd2\xab\x9d\x64\x7f\x0b\x92\x3f\x1e\x86\x41\xb9\x92\x6e\xdd\xe9\x7e\x43\xe8\x79\x4e\xf8\x44\x3b\xbf\x1f\xa0\xe9\x77\x03\x74\x1e\x8e\x5c\x9e\x27\xd0\xa8\xa3\x3c\x46\x45\x2d\xa1\x46\x1d\x68\xa7\x2e\xf9\xff\x4c\xac\x37\xea\x6d\x14\x18\xb9\x91\x3a\x85\xbd\x0f\xe4\x24\xad\x85\xf4\x74\x16\xd2\x13\xf2\x43\x88\x6d\x0d\x76\x95\x0c\x59\x5f\x8c\x05\xbb\x37\xcb\xf6\x91\xf2\x9f\x0f\xce\xe7\x62\x3c\x3d\x02\xf1\xe1\x15\x3c\x72\x07\x5f\xac\x9f\x7b\x0f\xbf\xed\x63\xb5\x7f\xd1\x3d\x50\xd0\xbf\x01\x00\x00\xff\xff\xfd\x08\x85\xf4\xe3\x10\x00\x00")

func configChainstorageEthereumMainnetBaseYmlBytes() ([]byte, error) {
	return bindataRead(
		_configChainstorageEthereumMainnetBaseYml,
		"config/chainstorage/ethereum/mainnet/base.yml",
	)
}

func configChainstorageEthereumMainnetBaseYml() (*asset, error) {
	bytes, err := configChainstorageEthereumMainnetBaseYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/chainstorage/ethereum/mainnet/base.yml", size: 4323, mode: os.FileMode(420), modTime: time.Unix(1640048354, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configChainstorageEthereumMainnetDevelopmentYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\xcc\xb1\x6e\x83\x30\x10\xc6\xf1\xdd\x4f\x71\x4a\x67\x10\x4a\x86\x2a\x9e\xd3\xa1\x4b\xb3\xb0\xa3\xc3\xfe\x02\x56\xec\x33\xb2\x0f\xd2\xbe\x7d\x05\xaa\xaa\x9b\xee\xd3\x5f\xbf\x37\xea\xe7\x50\xe9\x11\x22\x28\x54\x9a\x20\x28\xac\xf0\x34\xfe\xd0\x29\xf1\x13\xe4\xb2\x3c\xc2\x74\x6a\xe9\x76\xa7\xaf\x7b\x4f\x1f\xb7\xcf\xbe\x35\xfc\xaa\xd6\x10\xf1\xab\x0e\xec\x5c\x5e\x45\x2d\x79\x6c\x88\x79\x49\x10\x35\x44\xe3\xea\x9e\x50\x4b\xf8\xe6\xb4\x44\x34\x6e\xe6\x20\x55\x73\xe1\x09\x0d\x74\x46\xc1\x9a\x9a\xc4\x41\x04\xda\x78\x6c\xc6\xb1\x87\x38\x1c\xae\xf7\x05\xb5\x5a\x52\xa4\x25\x17\x8e\x7b\xd0\xfe\x51\xad\xcb\xc9\xbe\x9f\x2f\x17\x73\x98\x7b\x8f\x0d\xa2\x83\xf2\xb4\x3f\x44\x91\x15\x55\x2d\x9d\x4d\x45\xd9\x50\xf6\x75\x0c\xe2\x87\x7f\xb7\x6b\x8f\xb3\xd7\xee\xda\x99\xdf\x00\x00\x00\xff\xff\x09\xce\xe9\x04\x05\x01\x00\x00")

func configChainstorageEthereumMainnetDevelopmentYmlBytes() ([]byte, error) {
	return bindataRead(
		_configChainstorageEthereumMainnetDevelopmentYml,
		"config/chainstorage/ethereum/mainnet/development.yml",
	)
}

func configChainstorageEthereumMainnetDevelopmentYml() (*asset, error) {
	bytes, err := configChainstorageEthereumMainnetDevelopmentYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/chainstorage/ethereum/mainnet/development.yml", size: 261, mode: os.FileMode(420), modTime: time.Unix(1640048354, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configChainstorageEthereumMainnetLocalYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\xb1\x0e\xc2\x20\x10\x06\xe0\x9d\xa7\xf8\x53\xf7\xa6\x6b\x99\xeb\xe0\x62\x17\x76\x73\xc2\x01\x97\x9e\x90\x70\x38\xf8\xf6\x7e\x37\x84\x2a\x86\x2c\xca\x10\x43\xe1\xc6\x83\x26\x27\xbc\x7f\x58\x3e\x74\x31\x62\x6f\x59\xca\xb2\xe2\x38\xf1\x3c\x03\xee\xc7\x23\xac\xce\xd2\xe5\x1d\x10\x2b\x49\xb3\xd9\x07\x15\x7e\x51\x4a\x83\xcd\x3c\xb4\x47\xd2\xda\x6d\xfa\x7d\xdb\x37\x07\x0c\xb6\x99\xbf\xea\x91\x49\x8d\xdd\x3f\x00\x00\xff\xff\xb5\x38\xa5\xc8\x75\x00\x00\x00")

func configChainstorageEthereumMainnetLocalYmlBytes() ([]byte, error) {
	return bindataRead(
		_configChainstorageEthereumMainnetLocalYml,
		"config/chainstorage/ethereum/mainnet/local.yml",
	)
}

func configChainstorageEthereumMainnetLocalYml() (*asset, error) {
	bytes, err := configChainstorageEthereumMainnetLocalYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/chainstorage/ethereum/mainnet/local.yml", size: 117, mode: os.FileMode(420), modTime: time.Unix(1640048354, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configChainstorageEthereumMainnetProductionYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\xcc\xb1\x4e\xc3\x30\x18\xc4\xf1\xdd\x4f\x71\x2a\x73\xac\x88\x0e\xa8\x9e\xcb\xc0\x42\x97\xec\xd5\x17\xfb\x9a\x58\x8d\x3f\x47\xb6\x43\xe1\xed\x51\x23\x84\x6e\xbd\xff\xef\x05\xc3\x1c\x2b\x6e\x71\x21\x62\xc5\x44\x65\x91\xc6\x80\xf1\x07\x87\x24\x77\xc2\x67\xbd\xc5\xe9\x60\x71\xbe\xe0\xf3\x32\xe0\xfd\xfc\x31\x58\x23\x8f\xea\x0c\x20\x8f\x7a\x15\xef\xf3\xa6\xcd\x61\x2d\x39\x6c\xbe\xc5\xac\x06\x18\x37\x7f\x67\x73\xe0\xb7\xa4\x75\x61\xe7\x67\x89\x5a\x5b\x2e\x32\xb1\x63\x9b\x59\xb8\xa5\x2e\x49\x54\x65\xeb\x9e\xa9\xf1\x12\xa8\x9e\xbb\x1b\x42\x61\xad\x0e\x8d\x69\xcd\x45\x16\xfb\xe7\x58\x9f\x93\x7b\x7b\x3d\x1e\x4d\x65\xf9\x62\x79\x9e\xc7\xa8\xe1\xfa\x5f\xf4\x76\x9f\x3b\xf5\xa7\xde\xfc\x06\x00\x00\xff\xff\xae\x16\x62\xef\xdf\x00\x00\x00")

func configChainstorageEthereumMainnetProductionYmlBytes() ([]byte, error) {
	return bindataRead(
		_configChainstorageEthereumMainnetProductionYml,
		"config/chainstorage/ethereum/mainnet/production.yml",
	)
}

func configChainstorageEthereumMainnetProductionYml() (*asset, error) {
	bytes, err := configChainstorageEthereumMainnetProductionYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/chainstorage/ethereum/mainnet/production.yml", size: 223, mode: os.FileMode(420), modTime: time.Unix(1640048354, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configChainstorageOptimismMainnetBaseYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x57\x4d\x6f\x1b\x37\x13\xbe\xef\xaf\x20\xfc\x9e\x6d\x49\x4e\x9c\xb7\xd9\x5b\x9a\x04\xad\x91\xc6\x0e\x5a\x03\x05\x7a\x21\x66\xc9\x59\x2d\x21\x7e\x6c\x38\xb3\xb2\xd5\x5f\x5f\x70\xc9\xb5\x24\x47\x8e\x1c\x04\x89\x6f\x12\x39\x5f\x9c\xe7\xe1\x33\xdc\xff\x89\x9b\xce\x90\x68\x8d\x45\x61\x48\x2c\xd1\x63\x04\x46\x2d\x9a\x8d\x38\x71\xb0\x42\xa1\x82\x6f\xcd\xf2\xe4\x4c\xbc\xbb\x16\x57\xd7\x37\xe2\xfd\xbb\xcb\x9b\xb3\x0a\x7a\x53\x57\x42\x38\xb8\x93\x7e\x70\xb2\xb1\x41\xad\x64\x8a\x42\xb5\x58\xcc\xe7\xf3\x87\x7b\x54\x8b\x8b\xb4\x98\x16\x6e\x43\x5c\x61\x1c\x0d\x2b\x21\x88\x23\x82\x33\x7e\x29\x1b\x60\xd5\x49\x32\xff\x62\x31\xde\x6e\x19\xcf\x18\xd7\x60\x6b\xb1\xa0\xbd\x8d\x31\x49\x90\xb8\x46\xcf\x92\x8d\xc3\x14\xd5\x55\x70\x4b\xa9\x3c\xb8\x25\x09\x4a\x85\xc1\x73\x2d\x34\xae\xd1\x86\xde\xa1\xe7\x4a\x88\x66\x50\x2b\xe4\x5a\x9c\x9c\x54\x42\x68\xfb\x39\x99\x0b\xa1\xd1\xc2\x46\x12\x2a\xaa\xc5\xeb\xf1\x14\x42\x78\x48\x51\xf1\x0e\x5c\x6f\x51\xaa\x0e\x8c\x27\x0e\x11\x96\x58\x8e\x26\x43\xcf\xc6\x19\x72\xd2\x81\xf1\x1e\x59\x6a\xfb\x79\x74\x5d\x1b\x32\x8d\xb1\x86\x37\x63\x6d\x61\xe0\x12\xfb\xd5\x18\x5b\x6f\x3c\xb8\xa0\x9b\x9c\x3b\xf7\x90\xa1\xb1\xdf\x98\x6e\xf4\x2e\x1d\x38\xe6\x9d\x3b\x75\x3c\x86\xec\xd0\x2c\x3b\x96\xc6\x6b\xbc\x7b\x4a\xc0\x66\x33\xb9\x1c\x0c\xbd\xc6\x48\x26\x78\xd4\xf2\x78\xa1\x5b\xdb\xe3\x25\x1f\x8c\x5b\xfc\xbe\x56\xfb\x23\x39\x9a\xcd\xe4\xab\x0f\xe5\xeb\x23\x92\x59\x26\xaf\x21\x5a\x89\x77\xbd\x89\xc0\x26\xf8\x5a\xbc\x98\xbb\x4a\x88\x88\xcb\xf1\xdf\x40\xa7\x08\xc4\xa7\x8b\x91\xab\x63\xc6\xc2\x2f\x60\x90\x2a\xb8\x14\x88\x46\xd3\xdf\xfe\xb9\xfc\x54\x29\xd0\xe8\xd5\x68\x03\x5a\xa7\xbd\x89\x98\x21\x25\xaf\xc5\x6e\xed\xa7\x53\x61\xa7\xdb\xc2\x22\x32\xfa\x54\x89\xec\x31\x9a\xa0\x6b\xf1\xff\x6a\xf4\x49\x21\xf3\x89\x88\x21\x72\xc1\xa8\x16\xf3\x6a\x4b\xb8\x65\xae\xcd\x02\x23\x71\x2d\x16\xe3\x3f\x2a\x08\x2d\xb6\x86\xe3\xed\x3a\x77\xd3\x42\x8e\x2f\x7e\xfd\xe3\xfa\xed\x87\xb7\xbf\xbf\xb9\xbc\x92\xd7\x9f\x6e\x2e\x3f\x5e\xfe\xf5\xb1\x12\x42\x59\x83\x9e\x73\x60\x07\xc4\x18\xf3\x6f\x21\xd0\xeb\x3e\x18\xcf\x72\x19\xc3\xd0\x97\x73\x0a\x41\x16\xd6\x78\xc4\x66\x0d\xd6\x68\xe0\xf0\xf5\x58\x13\x11\x8e\x1e\xab\x45\xe0\x21\x96\xa4\x31\x10\x32\x83\xec\x21\x12\xc6\x5a\xb4\x60\x09\x2b\x21\x4c\x8c\x38\x92\x25\xf1\x4a\x1b\x62\x48\x40\x25\x8d\x4b\x6a\x86\x9c\xc4\xac\x16\x57\xef\x6f\xfe\xbe\xfe\xf3\xc3\x7d\x07\xe4\xc7\x37\x97\x57\x57\xef\x6f\xaa\xac\x9e\x32\x6b\xc8\x17\x8c\x52\x31\xec\x20\x14\xc1\x2f\xb1\xe8\xdf\xcb\x04\xbe\xa1\x91\xcd\x29\x45\x6b\xc3\x6d\x82\x90\x07\xaa\x05\xc7\x01\xab\x76\xf0\x2a\x21\x0e\x56\xe6\x03\x9e\x9c\x54\xa4\x57\x29\xdc\x1e\xd3\xef\x09\xd5\x31\xf7\x54\xcf\x66\xbe\xe5\x53\xe8\xcd\x99\x0a\xc6\x37\x40\x78\xa6\x82\x9b\x41\x6f\x66\x78\xd7\xcf\x76\x5d\x67\x53\xbd\xb3\x52\xef\x6c\xbd\x38\x28\xe1\x11\x89\xdb\xc1\x96\xc2\x08\xe3\x3a\xc3\xdd\x18\xaf\xb7\xf9\x6d\x50\x60\xbb\x40\x5c\xbf\x9e\xbf\x9e\x57\x64\x61\x7b\xf4\x22\x1d\x1a\x2d\xc3\xd4\xdc\x2d\xeb\xa6\xf5\x8b\xc4\xbd\x24\xa2\xa1\x95\xb4\xf1\x4a\xfa\xa0\xbf\x04\x85\x4d\xc2\xef\xc5\xf8\xcb\xa5\x7e\x7a\x85\xd2\x02\x71\xbe\xda\x79\x40\x4c\x3d\x1d\xc7\x44\x03\x6a\xd5\x1a\x6b\x27\x92\x82\x62\xb3\x4e\xa2\x1d\x91\xe3\x26\xcd\x18\xe3\x06\x27\x81\x19\x5d\xcf\x94\x83\xef\x98\x91\xea\x50\x0f\x16\x25\x87\x72\xcd\x8a\xda\x97\x92\x77\x4d\xf3\x76\x90\xca\x06\xc2\xad\xdd\xf9\x3c\x1b\xee\xce\xc0\xf3\x8b\x32\x81\x54\x87\x6a\x95\x89\x3e\x4d\xc7\xb2\x93\xc6\x5f\xc4\x3e\x06\x85\x44\xa8\xd3\xed\xcf\x63\x34\x29\x52\x9e\x5e\x83\x93\x2a\x78\x35\xc4\x98\xae\x05\xde\x71\x04\xc5\x21\x63\x97\x4d\x18\x68\x25\xad\xa1\x71\x46\xb6\x30\xd8\x2c\xad\xf7\xb4\xd3\xa8\x4c\x12\xab\x9d\x6a\xdd\xbe\x05\xde\xa1\x1a\x78\xdf\xe4\x65\xb7\x6f\x63\x74\x52\x28\xde\xd4\xf7\x4b\x67\xdb\xbe\x27\x10\xd0\xab\xce\x41\xe2\xd5\xb3\xa1\xb0\x28\x28\xa8\xce\x58\x2d\x0f\x1c\xef\x31\xc7\x57\xc5\xf1\xf9\x5a\xb9\xed\x5e\x12\x80\x18\x88\xe4\x03\xb9\x3c\xda\xcf\x8b\x1f\xd6\xcf\x04\x74\x68\xdb\x87\xcf\xb8\x7d\xba\x2f\x1e\x63\xfb\x62\x62\x7b\x0f\x11\xac\x45\x6b\xc8\x65\x85\x7c\xb4\xe1\xe5\xe8\x65\x20\x2a\xf4\x9c\x46\x70\x56\xab\x9f\x01\xc7\x03\x00\xd2\x6b\x38\x78\xf3\x74\x28\x7e\xf9\x99\x50\xcc\xbf\xc4\xe2\xe2\x71\xe1\xf9\x46\x24\x7e\x7c\xaf\x4b\x67\xd3\xf3\x2c\x1c\xd0\xf0\x0e\x21\x72\x83\xf0\x95\x9e\x7d\x3f\x0a\xe7\xdf\x8d\xc2\x0b\x3a\x42\xfe\x36\x4d\xb0\x34\xf5\xb6\x6f\x93\xac\xff\xe5\xab\x20\x15\x95\x66\x62\x1a\x01\x6a\xa3\xec\xce\x8d\x3a\x80\x16\xe5\xf7\xa7\x54\x11\x81\x0f\xa1\x32\x19\xa0\x4f\x6f\x10\xbd\x9b\xf4\xd9\x90\xce\xf8\xde\x7f\xff\x3d\x79\x50\x3c\x5d\xd8\x9e\x8a\xe3\xf9\x11\x18\xf7\xef\xd2\x91\xcb\xf4\x6c\xfd\x9c\xda\x58\x65\xb3\xf4\xa0\xab\x84\x38\x3d\x54\xd0\x7f\x01\x00\x00\xff\xff\xca\xaf\xe5\x1d\x28\x10\x00\x00")

func configChainstorageOptimismMainnetBaseYmlBytes() ([]byte, error) {
	return bindataRead(
		_configChainstorageOptimismMainnetBaseYml,
		"config/chainstorage/optimism/mainnet/base.yml",
	)
}

func configChainstorageOptimismMainnetBaseYml() (*asset, error) {
	bytes, err := configChainstorageOptimismMainnetBaseYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/chainstorage/optimism/mainnet/base.yml", size: 4136, mode: os.FileMode(420), modTime: time.Unix(1640048354, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configChainstorageOptimismMainnetDevelopmentYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\xcc\x31\x6f\x83\x30\x10\xc5\xf1\xdd\x9f\xe2\x94\xce\x20\x54\x86\x28\x9e\xd3\xa1\x4b\xb3\xb0\xa3\xc3\x7e\x01\x0b\x6c\x23\xdf\x85\xb4\xdf\xbe\x8a\x55\xf5\xbd\xf5\xaf\xdf\x1b\x0d\x4b\x10\xba\x87\x0d\x14\x84\x66\x24\x14\x56\x78\x9a\x7e\xe8\x14\x79\x05\xb9\x9c\xee\x61\x3e\xb5\x74\xbd\xd1\xd7\x6d\xa0\x8f\xeb\xe7\xd0\x1a\x7e\x8a\x35\x44\xfc\x94\x91\x9d\xcb\x8f\xa4\x96\x3c\x0e\x6c\x79\x8f\x48\x6a\x88\xa6\x87\x5b\xa1\x96\xf0\xcd\x71\xdf\xd0\xb8\x85\x43\x12\xcd\x85\x67\x34\x79\xd7\x10\x83\xc4\x26\x72\x48\x09\xda\x78\x1c\xc6\xb1\x47\x72\xa8\xae\xf7\x05\x22\x96\x14\x71\xcf\x85\xb7\x57\xd0\xfe\x51\xad\xcb\xd1\x9e\xdf\xfb\xde\x54\xf3\xd5\x4f\x5b\x76\xeb\x28\xca\x45\xc7\x05\x61\x5e\xd4\x52\x7f\xee\xea\x8c\xa0\x1c\x28\x35\x0b\xc9\x8f\xff\x76\xd7\xd6\xdb\x4b\x77\xe9\xcc\x6f\x00\x00\x00\xff\xff\x4b\x76\x14\xbe\x09\x01\x00\x00")

func configChainstorageOptimismMainnetDevelopmentYmlBytes() ([]byte, error) {
	return bindataRead(
		_configChainstorageOptimismMainnetDevelopmentYml,
		"config/chainstorage/optimism/mainnet/development.yml",
	)
}

func configChainstorageOptimismMainnetDevelopmentYml() (*asset, error) {
	bytes, err := configChainstorageOptimismMainnetDevelopmentYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/chainstorage/optimism/mainnet/development.yml", size: 265, mode: os.FileMode(420), modTime: time.Unix(1640048354, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configChainstorageOptimismMainnetLocalYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\xb1\x0e\xc2\x20\x10\x06\xe0\x9d\xa7\xf8\x53\xf7\xa6\x6b\x99\xeb\xe0\x62\x17\x76\x73\xc2\x01\x97\x9e\x90\x70\x38\xf8\xf6\x7e\x37\x84\x2a\x86\x2c\xca\x10\x43\xe1\xc6\x83\x26\x27\xbc\x7f\x58\x3e\x74\x31\x62\x6f\x59\xca\xb2\xe2\x38\xf1\x3c\x03\xee\xc7\x23\xac\xce\xd2\xe5\x1d\x10\x2b\x49\xb3\xd9\x07\x15\x7e\x51\x4a\x83\xcd\x3c\xb4\x47\xd2\xda\x6d\xfa\x7d\xdb\x37\x07\x0c\xb6\x99\xbf\xea\x91\x49\x8d\xdd\x3f\x00\x00\xff\xff\xb5\x38\xa5\xc8\x75\x00\x00\x00")

func configChainstorageOptimismMainnetLocalYmlBytes() ([]byte, error) {
	return bindataRead(
		_configChainstorageOptimismMainnetLocalYml,
		"config/chainstorage/optimism/mainnet/local.yml",
	)
}

func configChainstorageOptimismMainnetLocalYml() (*asset, error) {
	bytes, err := configChainstorageOptimismMainnetLocalYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/chainstorage/optimism/mainnet/local.yml", size: 117, mode: os.FileMode(420), modTime: time.Unix(1640048354, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configChainstorageOptimismMainnetProductionYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\xcc\xb1\x6e\xc3\x30\x0c\x84\xe1\x5d\x4f\x71\x48\x67\x1b\x46\x33\x14\xd1\x9c\x0e\x5d\x9a\xc5\x7b\x40\x53\x8c\x43\xc4\xa2\x0c\x51\x6e\xda\xb7\x2f\x12\x14\xc5\xad\xf7\x7f\x2f\x18\xaf\xea\xb8\xe8\x22\x50\xc7\x2c\x26\x95\x9a\x24\x4c\x3f\xd8\x65\xba\x09\xb8\xd8\x45\xe7\x5d\x8f\xe3\x09\x9f\xa7\x11\xef\xc7\x8f\xb1\x0f\x74\xf7\x18\x00\xba\xfb\x99\x98\xcb\x66\x2d\x62\xad\x25\x6d\xdc\xb4\x58\x00\xa6\x8d\x6f\xd2\x22\xe4\x9b\xf2\xba\x48\xc7\x57\x52\xf3\x56\x2a\xcd\xd2\x95\xb5\x69\x56\xcf\x5d\x26\x35\x93\xd6\x3d\xd2\xc0\x94\xc4\x58\x9e\x6e\x4a\x55\xdc\x23\x9a\xe4\xb5\x54\x5a\xfa\x3f\xa7\xe7\x92\xe3\xdb\xeb\x7e\x1f\x5c\xea\x97\xd4\xc7\x79\x52\x4b\xe7\xff\x62\xe8\x9f\x8b\x87\xe1\x30\x84\xdf\x00\x00\x00\xff\xff\x4c\x97\x1c\x66\xdf\x00\x00\x00")

func configChainstorageOptimismMainnetProductionYmlBytes() ([]byte, error) {
	return bindataRead(
		_configChainstorageOptimismMainnetProductionYml,
		"config/chainstorage/optimism/mainnet/production.yml",
	)
}

func configChainstorageOptimismMainnetProductionYml() (*asset, error) {
	bytes, err := configChainstorageOptimismMainnetProductionYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/chainstorage/optimism/mainnet/production.yml", size: 223, mode: os.FileMode(420), modTime: time.Unix(1640048354, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configChainstoragePolygonMainnetBaseYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x57\x5b\x6f\x1b\x37\x13\x7d\xdf\x5f\x41\xf8\x7b\xb6\x75\x71\xf4\xb5\x59\x20\x0f\x69\x12\xa4\x46\x52\x3b\x28\x0c\x14\xed\x0b\x31\x4b\xce\x6a\x09\x71\xc9\x0d\x39\xab\x48\xfd\xf5\x05\x2f\xab\x95\xe4\x8b\x1c\x34\xae\xdf\xb4\xe4\x70\x38\x33\xe7\xcc\x19\xea\x7f\xec\xb6\x51\x9e\xd5\x4a\x23\x53\x9e\x2d\xd1\xa0\x03\x42\xc9\xaa\x2d\x3b\x6b\x61\x85\x4c\x58\x53\xab\xe5\xd9\x05\x7b\x7f\xc3\xae\x6f\x6e\xd9\x87\xf7\x57\xb7\x17\x05\x74\xaa\x2c\x18\x6b\x61\xc3\x4d\xdf\xf2\x4a\x5b\xb1\xe2\xc1\x8b\x2f\xd9\x6c\x3a\x9d\x1e\xef\xf9\x92\x2d\xc2\x62\x58\xf8\x66\xdd\x0a\x5d\x34\x2c\x18\xf3\xe4\x10\x5a\x65\x96\xbc\x02\x12\x0d\xf7\xea\x6f\xcc\xc6\xe3\x96\x32\x84\x6e\x0d\xba\x64\x33\x7f\xb0\x11\x2f\xb1\x1c\xd7\x68\x88\x93\x6a\xb1\x64\xb3\x45\x5b\xc0\x37\x1f\xc2\x83\x6f\x9e\x83\x10\xb6\x37\x54\x32\x89\x6b\xd4\xb6\x6b\xd1\x50\xc1\x58\xd5\x8b\x15\x52\xc9\xce\xce\x0a\xc6\xa4\xfe\x1a\xcc\x19\x93\xa8\x61\xcb\x3d\x0a\x5f\xb2\xd7\x31\x0b\xc6\x0c\x04\xaf\xb8\x81\xb6\xd3\xc8\x45\x03\xca\x78\xb2\x0e\x96\x98\x53\xe3\x9d\xd5\xdb\xa5\x35\xbc\x05\x65\x0c\x12\x97\xfa\x6b\x3c\xb9\x56\x5e\x55\x4a\x2b\xda\xc6\xd0\x6c\x4f\xd9\xf5\xff\xa3\x6b\xb9\x35\xd0\x5a\x59\xa5\xab\x53\x09\x09\x2a\xfd\x7d\xb7\xc5\xc3\x39\xff\x53\x87\x53\x9d\x4e\xba\xe0\x0d\xaa\x65\x43\x5c\x19\x89\x9b\xa7\xf8\xab\xb6\xc3\x91\xfb\x3c\xaf\xd1\x79\x65\x0d\x4a\x7e\x3a\xcc\xd1\xf6\x64\xc0\xf7\xba\xcd\xc7\x1e\x8b\xfc\x81\x2b\xaa\xed\x70\x56\xde\x73\x5d\xe7\xd0\xab\x65\x38\xd4\x3b\xcd\x71\xd3\x29\x07\xa4\xac\x29\xd9\xe5\xb4\x2d\x18\x73\xb8\x8c\x5f\xbd\x3f\x47\xf0\x74\x3e\x8b\x2c\x8d\x17\x66\x66\x01\x01\x17\xb6\x0d\x8e\x7c\x34\xfd\xf8\xd7\xd5\x97\x42\x80\x44\x23\xa2\x0d\x48\x19\xf6\x06\x4a\xda\x70\x79\xc9\xf6\x43\x3f\xcf\x71\x9d\x8f\x71\x39\x24\x34\x21\x10\xde\xa1\x53\x56\x96\xec\xa7\x22\x1e\x09\x1e\x53\x3e\x9e\xc0\x51\xc6\xa7\x64\xd3\x62\xa4\xda\x32\x85\xa6\x81\xd0\x53\xc9\xe6\xf1\xcb\x67\x78\x66\xa3\x61\x6c\xab\xb9\x1f\x16\x92\x7f\xf6\xcb\xe7\x9b\x77\x9f\xde\xfd\xfa\xf6\xea\x9a\x7f\xb9\xf9\xfc\xe7\xc7\x9b\xeb\x82\x31\xa1\x15\x1a\x4a\x7e\x5b\xf0\x84\x2e\xfd\x66\x0c\x8d\xec\xac\x32\xc4\x97\xce\xf6\x5d\xce\x32\x26\xe0\xb6\x83\x4d\xe8\x66\x20\xc2\xb6\xa3\x20\x18\x29\x1e\x0d\x6b\x3c\xe1\x64\x0d\x5a\x49\x20\xfb\xf8\x65\x03\x4d\x8e\xd2\x9e\x1e\xa4\x1d\xbe\x6a\x04\xea\x5d\xbe\xd4\x59\x8f\x44\xc0\x3b\x70\x1e\x5d\xc9\xc8\xf5\x58\x30\xa6\x9c\xc3\xc8\xa4\x40\x3a\xa9\x3c\x41\x80\x91\x5d\xc6\xce\x36\x48\x41\xe4\x4a\x76\xfd\xe1\xf6\x8f\x9b\xdf\x3f\x0d\x05\xe2\xbf\xbd\xbd\xba\xbe\xfe\x70\x5b\x24\x51\xe5\x49\x5a\x8e\xd9\x26\x9c\xdd\x83\xcf\x81\x59\x62\x56\xc5\x57\x45\xdd\x1b\x11\xe0\x06\xcd\x53\xf4\x67\x67\x85\x97\xab\x60\x7e\x40\xf2\x1d\x99\x1a\xa2\xce\x97\x93\x89\xa9\xe9\x1c\x3a\x75\x21\xac\x32\x15\x78\xbc\x10\xb6\x9d\x40\xa7\x26\xb8\xe9\x26\xfb\x47\x27\x39\x9c\x49\x0e\x67\xb2\x9e\xdd\xab\xdb\x0e\x3d\xd5\xbd\xce\x05\xf1\xe8\xd6\x09\xeb\x4a\x19\x39\x5e\xaf\xad\x00\xdd\x58\x4f\xe5\xeb\xe9\xeb\x69\xe1\x35\x8c\x99\x65\xc9\x90\xa8\x09\xe2\xd4\x38\x60\xdc\xb0\xbe\x08\xed\x85\x9b\x0e\x05\xa1\x8c\x31\xd4\xda\x26\x79\x3f\x67\xad\x35\x8a\xac\x8b\xbf\x3b\xab\x35\xa6\x9f\x69\x3e\x1c\x7d\x4c\x76\xf8\xbf\x99\xc5\x8d\xd0\x92\x1a\x56\x38\xd9\xf5\xc3\x9b\xd0\x02\x41\xa6\x6d\xcd\xfd\xd6\x08\x6e\xac\xdc\x47\x37\xc5\x48\x2a\xf0\x60\x1e\x7f\xb5\x01\x1a\x23\x90\x6b\xf0\x94\x04\x24\x98\xb5\xc5\x41\xa0\x15\x88\x55\xad\x42\x78\x89\x53\x20\x48\xad\xc3\x58\x88\xec\x0f\x43\x4c\xb5\x7d\xbb\x47\xfd\xcb\x43\x33\x2f\x1a\x94\xbd\x46\x4e\x36\xb7\x73\x9e\x27\xb9\x3c\xfb\xa6\x69\xdb\x72\xa1\xad\xc7\xd1\x6e\x36\x4d\x86\xfb\x43\x76\xbe\xc8\x23\x4e\x34\x28\x56\xa9\x61\x86\xf1\x9b\x77\x6a\x50\xda\xae\xd1\x71\x34\xa1\x3f\xe4\x8e\xff\xa9\x59\x1d\x76\xce\x0a\xf4\x1e\x65\x10\xa0\x34\xc2\x87\x3a\x25\xd6\x08\x6b\x44\xef\x5c\x28\x3d\x6e\xc8\x81\x20\x1b\x39\x34\x4f\x26\x04\x7e\xc5\xb5\xf2\x71\x40\xd7\xd0\xeb\x24\xee\x43\xf9\xb8\x44\xa1\x82\x5e\x8e\x99\xcc\xdb\x43\x0b\xdc\xa0\xe8\xe9\xd0\xe4\x55\x73\x68\xa3\x64\x50\x49\xda\x96\xbb\xa5\x8b\x11\x93\x00\x10\x1a\xd1\xb4\x10\xf8\xfd\xe2\x08\x89\x46\xe9\x91\xe8\x7b\xe9\x3d\x74\x70\xde\xbc\x70\x25\xc7\xe2\x05\x19\x72\xd6\x7b\x7e\xa4\xc8\x27\xcb\xb9\x78\x46\xc2\x8b\x95\xad\xeb\xbd\x27\xe4\x62\x3a\x6d\xfd\x9d\x66\x98\x4d\x1f\x6a\x86\xdd\x4e\x07\x0e\xb4\x46\xad\x7c\x1b\xb4\xf8\x91\xa2\xe7\xf4\xf3\x5c\x16\x68\x28\x3c\x04\xe2\x4c\x3d\xd8\x3c\x9c\xcd\x97\xa1\xed\xf2\x5d\xcf\x0f\xdb\x11\x50\xe1\xc5\x9e\xd4\xf4\x89\x90\xfd\xfc\x1f\x42\x76\x79\x17\xaf\xc5\xc3\xd2\x75\x4a\xb9\x9e\x8e\xe3\xf3\xa3\x30\x4e\xb0\x34\xbf\x8e\x8a\xdf\x20\x38\xaa\x10\x1e\xa9\xe6\xbf\xc7\x67\xfe\x03\x5b\xea\x0e\x1e\xf3\xc5\x49\x3c\xea\x30\x3b\xc3\xbc\x2d\x59\x0d\xda\x8f\xe3\x25\xff\xe3\x09\x11\x87\x69\x1c\x26\x8c\xd8\x0a\xbd\x7b\x67\x1d\x41\x39\x4f\x58\xfa\xf4\xc2\xe6\xc2\x21\xd0\x7d\x98\x0d\x06\x77\x23\x79\x31\x1a\xec\x1e\x2f\xc3\x6b\xe5\x87\xeb\xe6\x53\x41\x9e\x7f\x9f\x6c\x3e\xf6\x84\x78\xd9\x92\xee\x3d\x02\x87\x97\x6b\x7c\xf6\xdd\x13\xd0\x3f\x01\x00\x00\xff\xff\xa2\x55\x9f\x93\x06\x11\x00\x00")

func configChainstoragePolygonMainnetBaseYmlBytes() ([]byte, error) {
	return bindataRead(
		_configChainstoragePolygonMainnetBaseYml,
		"config/chainstorage/polygon/mainnet/base.yml",
	)
}

func configChainstoragePolygonMainnetBaseYml() (*asset, error) {
	bytes, err := configChainstoragePolygonMainnetBaseYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/chainstorage/polygon/mainnet/base.yml", size: 4358, mode: os.FileMode(420), modTime: time.Unix(1640048354, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configChainstoragePolygonMainnetDevelopmentYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\x8d\xb1\x6e\xc3\x30\x0c\x05\x77\x7d\x05\x91\xce\x36\x8c\x64\x28\xa2\x39\x1d\xba\x34\x8b\x77\x83\x96\x5e\x1c\xc1\x12\x65\x48\x8c\xd3\xfc\x7d\x61\xa3\x68\xc1\x89\xb8\xe3\xf1\x8d\xfa\x7b\xa8\x74\x0b\x11\x14\x2a\x4d\x10\x14\x56\x78\x1a\x5f\x74\x48\x3c\x83\x5c\x96\x5b\x98\x0e\x2d\x5d\xae\xf4\x75\xed\xe9\xe3\xf2\xd9\xb7\x86\x9f\xd5\x1a\x22\x7e\xd6\x81\x9d\xcb\x0f\x51\x4b\x1e\x2b\x62\x5e\x12\x44\x0d\xd1\xf8\x70\x33\xd4\x12\xbe\x39\x2d\x11\x8d\xbb\x73\x90\xaa\xb9\xf0\x84\x66\xc9\xf1\x35\x65\x69\x12\x07\x11\x68\xe3\xb1\x1a\xc7\x1e\xe2\xb0\x67\xbd\x2f\xa8\xd5\x92\x22\x2d\xb9\x70\xdc\x84\xf6\xb7\xd4\xba\x9c\xec\xfb\xf1\x74\x32\x7b\x72\xf3\xc7\x98\xdd\x3c\x28\x4f\xdb\x42\x54\x95\xc7\x08\x4b\x47\x43\x84\x15\xa2\xff\x28\xb2\xa2\xea\x86\x2a\xca\x8a\xb2\x5f\x07\xf1\xc3\xdf\xcb\xae\xdd\xc7\x9e\xbb\x73\x67\x7e\x02\x00\x00\xff\xff\x7d\xc2\x36\xaf\x1f\x01\x00\x00")

func configChainstoragePolygonMainnetDevelopmentYmlBytes() ([]byte, error) {
	return bindataRead(
		_configChainstoragePolygonMainnetDevelopmentYml,
		"config/chainstorage/polygon/mainnet/development.yml",
	)
}

func configChainstoragePolygonMainnetDevelopmentYml() (*asset, error) {
	bytes, err := configChainstoragePolygonMainnetDevelopmentYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/chainstorage/polygon/mainnet/development.yml", size: 287, mode: os.FileMode(420), modTime: time.Unix(1640048354, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configChainstoragePolygonMainnetLocalYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\xb1\x0e\xc2\x20\x10\x06\xe0\x9d\xa7\xf8\x53\xf7\xa6\x6b\x99\xeb\xe0\x62\x17\x76\x73\xc2\x01\x97\x9e\x90\x70\x38\xf8\xf6\x7e\x37\x84\x2a\x86\x2c\xca\x10\x43\xe1\xc6\x83\x26\x27\xbc\x7f\x58\x3e\x74\x31\x62\x6f\x59\xca\xb2\xe2\x38\xf1\x3c\x03\xee\xc7\x23\xac\xce\xd2\xe5\x1d\x10\x2b\x49\xb3\xd9\x07\x15\x7e\x51\x4a\x83\xcd\x3c\xb4\x47\xd2\xda\x6d\xfa\x7d\xdb\x37\x07\x0c\xb6\x99\xbf\xea\x91\x49\x8d\xdd\x3f\x00\x00\xff\xff\xb5\x38\xa5\xc8\x75\x00\x00\x00")

func configChainstoragePolygonMainnetLocalYmlBytes() ([]byte, error) {
	return bindataRead(
		_configChainstoragePolygonMainnetLocalYml,
		"config/chainstorage/polygon/mainnet/local.yml",
	)
}

func configChainstoragePolygonMainnetLocalYml() (*asset, error) {
	bytes, err := configChainstoragePolygonMainnetLocalYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/chainstorage/polygon/mainnet/local.yml", size: 117, mode: os.FileMode(420), modTime: time.Unix(1640048354, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configChainstoragePolygonMainnetProductionYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\x8e\x31\x6f\x83\x30\x10\x46\x77\xff\x8a\x53\x3a\x83\x50\x33\x54\xf1\x9c\x0e\x5d\x9a\x85\x1d\x1d\xf6\x07\xb1\xb0\x7d\x96\x6d\x4a\xf2\xef\x2b\x48\x55\xdd\xf2\x0d\xef\x3d\xdd\x1b\xf5\x77\x57\x68\x72\x1e\xe4\x0a\xcd\x88\xc8\x5c\x61\x69\x7c\xd2\x29\xf0\x02\x32\x12\x27\x37\x9f\x5a\xba\xde\xe8\xfb\xd6\xd3\xe7\xf5\xab\x6f\x15\x6f\x45\x2b\x22\xde\xca\xc0\xc6\xc8\x1a\xab\xa6\x94\xc5\xae\xa6\x3a\x89\x8a\x68\x5c\xcd\x82\xaa\x09\x0f\x0e\xc9\xa3\x31\x77\x76\xb1\x54\xc9\x3c\xa3\x49\xe2\x9f\xb3\xc4\x26\xb0\x8b\x11\xb5\xd9\x4d\x65\xd8\x22\x1a\x1c\x59\x6b\x33\x4a\xd1\x54\x11\x92\x64\xf6\xed\x5f\xa6\x35\x12\xf4\xc7\xfb\xf9\xac\x0a\xf2\x0f\xf2\x0e\x8f\x2e\xda\xe1\xdf\xe8\xda\xe3\xf4\xa5\xbb\x74\xaa\x78\xde\x09\x3c\x12\x4c\x85\x1d\x36\xc9\xcb\xe4\xe5\xf5\x7b\x43\x41\xa2\xab\x92\x8f\x9d\xc4\x7b\xbc\x66\xa9\x19\x1c\x90\xd5\x6f\x00\x00\x00\xff\xff\x07\x1f\xc3\xfd\x1d\x01\x00\x00")

func configChainstoragePolygonMainnetProductionYmlBytes() ([]byte, error) {
	return bindataRead(
		_configChainstoragePolygonMainnetProductionYml,
		"config/chainstorage/polygon/mainnet/production.yml",
	)
}

func configChainstoragePolygonMainnetProductionYml() (*asset, error) {
	bytes, err := configChainstoragePolygonMainnetProductionYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/chainstorage/polygon/mainnet/production.yml", size: 285, mode: os.FileMode(420), modTime: time.Unix(1640048354, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configChainstorageSolanaMainnetBaseYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x57\x4b\x6f\x1b\x37\x10\xbe\xef\xaf\x18\xb8\x67\x5b\x0f\x5b\x69\xb3\x37\x37\x09\x5a\x23\xa9\x5d\xb4\x06\x0a\xf4\x42\x8c\xc8\x59\x89\x10\x1f\x1b\x72\x56\x91\xfa\xeb\x0b\x2e\x29\xaf\xa4\xd8\x96\x8b\xb4\xf5\x6d\x77\x39\x9c\xd7\xf7\xf1\x1b\xee\x77\x70\xbf\xd4\x11\x1a\x6d\x08\x74\x84\x05\x39\x0a\xc8\xa4\x60\xbe\x85\x33\x8b\x2b\x02\xe9\x5d\xa3\x17\x67\x17\xf0\xfe\x0e\x6e\xef\xee\xe1\xc3\xfb\x9b\xfb\x8b\x0a\x5b\x5d\x57\x00\x16\x37\xc2\x75\x56\xcc\x8d\x97\x2b\x91\xbc\xc4\x1a\x26\xe3\xf1\xf8\x78\x2d\xd6\x30\x4b\x1f\xd3\x87\x2f\x3e\xac\x28\xf4\x86\x15\x40\xe4\x40\x68\xb5\x5b\x88\x39\xb2\x5c\x8a\xa8\xff\xa2\x62\x3c\x2c\x69\xc7\x14\xd6\x68\x6a\x98\xce\xc6\x36\x1e\xac\xf5\x71\xbc\xa0\x35\x39\x16\xac\x2d\x25\xc7\xb6\xc2\x2f\x31\x65\x88\x5f\xa2\x40\x29\x7d\xe7\xb8\x06\x45\x6b\x32\xbe\xb5\xe4\xb8\x02\x98\x77\x72\x45\x5c\xc3\xd9\x59\x05\xa0\xcc\xe7\x64\x0e\xa0\xc8\xe0\x56\x44\x92\xb1\x86\xb7\x7d\x21\x00\x0e\x93\x57\xda\xa0\x6d\x0d\x09\xb9\x44\xed\x22\xfb\x80\x0b\x2a\xd5\x89\xe8\x0d\x3a\x14\x16\xb5\x73\xc4\x42\x99\xcf\xfd\xc6\xb5\x8e\x7a\xae\x8d\xe6\x6d\x9f\x99\xef\xb8\x78\x7e\xd3\x7b\x56\x5b\x87\xd6\xab\x79\x8e\x9c\x9b\xc8\x38\x37\xff\x28\x58\xbf\xb7\x54\x7f\x6a\x6f\xee\xd2\x29\x0f\x62\x49\x7a\xb1\x64\xa1\x9d\xa2\xcd\x4b\xdc\xcd\xb7\xbb\x2d\x8f\x38\x5e\x53\x88\xda\x3b\x52\xe2\x74\x92\x83\xed\xa9\x74\x1f\xf5\x5a\x76\x3d\x97\xf7\x13\x11\xe6\xdb\xdd\x5e\xf5\x75\xb4\x36\x50\xd4\x8b\xb4\xa7\x0b\x46\xd0\xa6\xd5\x01\x59\x7b\x57\xc3\xe5\xd8\x56\x00\x81\x16\xfd\x5b\x17\xcf\x09\x23\x9f\x4f\x7a\x7e\xf6\xf1\x0a\xa7\x90\x51\x48\x6f\x93\xa3\xd8\x9b\xfe\xf4\xe7\xcd\xaf\x95\x44\x45\x4e\xf6\x36\xa8\x54\x5a\xdb\x91\xd1\xa7\xe0\x35\xec\x67\x7e\x9e\xd3\x3a\x1f\xd2\x0a\xc4\xe4\x52\x1e\xa2\xa5\xa0\xbd\xaa\xe1\xfb\xaa\xdf\x91\x1c\xe6\x6a\x22\x63\xe0\x82\x4d\x0d\xe3\x6a\x20\xd9\x22\x67\x66\x90\x29\x72\x0d\x93\xfe\x2d\x16\x6c\x26\x83\x61\x7f\x9e\xae\xc6\xf9\xd0\xf5\xdf\x72\x08\xf8\xf1\xd3\xdd\xbb\x8f\xef\x7e\xbe\xbe\xb9\x15\xbf\xdf\x7d\xba\xbe\xbd\xae\x00\xa4\xd1\xe4\x38\x7b\xb6\x18\x99\x42\x7e\x06\x20\xa7\x5a\xaf\x1d\x8b\x45\xf0\x5d\x5b\xca\x04\x88\x06\xd7\x74\xc2\x66\x8d\x46\x2b\x64\xff\xbc\xaf\x1d\x0b\x8e\xea\x1a\x1f\xd4\x95\xde\x1a\x42\xee\x42\x09\x1a\x7c\x24\x66\x14\x2d\x86\x48\xa1\x86\x06\x4d\xa4\x0a\x40\x87\x40\x3d\x53\x12\xa9\x94\x8e\x8c\x09\xa7\xa4\x6c\x49\xc3\x88\x93\x84\xd5\x70\xfb\xe1\xfe\x8f\xbb\xdf\x3e\x96\xfa\xc5\x2f\xd7\x37\xb7\xb7\x1f\xee\xab\xac\x98\x22\x8b\xc6\x11\x99\x64\xf0\x7b\xf0\x04\x74\x0b\x2a\x8a\x77\x95\x70\xd7\xb1\xa7\xb1\x32\x9f\x45\x1b\xbc\xa4\x18\x7d\xa8\x81\x43\x47\x55\xd3\x39\x99\xc0\x46\x23\x72\x69\x67\x67\x55\x54\xab\xe4\xec\x80\xe0\x0f\x4c\x5a\x32\xb7\xb1\x1e\x8d\x5c\xc3\xe7\xd8\xea\x0b\xe9\xb5\x9b\x63\xa4\x0b\xe9\xed\x08\x5b\x3d\xa2\x4d\x3b\xda\xdf\x3a\xca\xb9\x8e\x4a\xae\xa3\xf5\xe4\x51\xc1\x0e\x14\xb9\xe9\x4c\x49\x2b\x52\x58\x67\x98\xe7\xda\xa9\x21\xba\xf1\x12\xcd\xd2\x47\xae\xdf\x8e\xdf\x8e\xab\x68\x70\x28\xbb\x68\x85\x22\xc3\x58\xc3\x64\x36\x3e\xa0\xdb\xc3\x77\x7b\x39\x4e\xa4\xa3\x4d\x4b\x92\x49\xf5\x69\x34\xc6\x67\x5d\x3f\x07\xeb\x9d\x66\x1f\xfa\xe7\xd6\x1b\x43\xf9\x31\x0f\x86\xfe\x25\xc9\xad\x6f\x44\xdc\x3a\x29\x9c\x57\x07\x48\xf6\x41\x59\x27\xd0\xa7\xfd\x93\x4d\x40\x38\x49\xc2\x60\xe4\x2c\x06\x35\x5c\xda\xea\x20\xea\x1c\xe5\xaa\xd1\x29\x56\xe6\x0f\x4a\xd6\xeb\xa4\xee\x81\x38\x6c\xd3\x28\xd2\xb6\xb3\x02\x99\xc9\xb6\x1c\x6b\xb8\x3c\x34\x8b\x72\x49\xaa\x33\x24\xd8\x97\xb3\x59\xc6\x42\x0d\x33\x7b\x64\x9a\x97\xbd\x90\xc6\x47\x1a\xec\x26\xe3\x6c\xb8\x3f\x2d\xa7\xb3\x32\xa8\xe4\x92\xe4\x2a\x1f\x8e\xdd\x1c\x2d\x2b\x69\x4a\x06\x2a\xa4\x22\x95\x24\x23\x0f\xdc\x24\x62\x79\xc8\x75\x56\x48\xef\x64\x17\x42\x3a\x4a\xb4\xe1\x80\x92\x7d\xc2\xfd\xcd\x55\x6f\xc1\x18\x57\xc2\xe8\xd8\x4f\xd2\x06\x3b\x93\xa5\x78\xd7\x21\xa1\x48\xea\x24\x6f\x43\xb2\x53\x7b\x68\x41\x1b\x92\x1d\x1f\x9a\x5c\x2d\x0f\x6d\xb4\x4a\xaa\xc6\xdb\xfa\xe1\xd3\xc5\xd0\xf6\x84\x01\x39\xb9\xb4\x98\x28\xf9\xea\x20\xc8\xa5\x36\x03\x31\xf7\xca\x7b\x6a\xe3\x9b\xb2\xf1\xf5\x5a\x39\x74\x2f\x29\x47\xf0\x31\x8a\x23\x85\x3d\xd9\xcf\xd9\x7f\x48\x6a\xb9\xf2\x4d\xb3\x77\xdf\x9b\xc4\xaf\xd8\x3e\x79\x8a\xec\x93\x1d\xd9\x5b\x0c\x68\x0c\x19\x1d\x6d\x16\xd6\x27\x1b\x5e\x4a\x2f\x43\x54\x92\xe3\x34\xb4\xb3\xd0\xfd\x1f\x70\x1c\x01\x90\xae\xcd\x59\xd6\x5e\x08\xc5\x0f\xaf\x0b\xc5\x74\xf6\xa4\xec\x7c\x0d\x44\x69\xea\xab\x51\x7f\x18\x18\x79\x5c\x1c\xb5\x78\x49\x18\x78\x4e\xf8\x4c\xcf\xbe\x1d\x85\xe9\x37\xa3\x30\x2b\x77\xb1\xe7\xf8\xdf\xa4\x11\x96\xc6\x5e\x19\xd2\xbb\x01\x50\xfe\x1f\x52\x5a\x69\x26\xa6\x19\x20\xb7\x32\xdd\x8c\x2e\x1f\x03\x6c\x9a\x8f\x4e\xcc\x97\x56\x21\x03\x21\x3f\x06\xcc\xce\x80\x5c\xba\xbd\xa8\xbd\xa0\xaf\x86\xf5\xc3\x85\x60\x77\x1d\xf8\xd7\xa5\xed\xa5\x48\x4e\x4f\x03\x79\xf8\xe3\xfb\xf4\x24\x7f\xdd\x96\xee\x5d\xac\x76\x17\xc2\xfe\xc2\xf5\x48\x42\x7f\x07\x00\x00\xff\xff\x94\x43\xb7\x80\x56\x10\x00\x00")

func configChainstorageSolanaMainnetBaseYmlBytes() ([]byte, error) {
	return bindataRead(
		_configChainstorageSolanaMainnetBaseYml,
		"config/chainstorage/solana/mainnet/base.yml",
	)
}

func configChainstorageSolanaMainnetBaseYml() (*asset, error) {
	bytes, err := configChainstorageSolanaMainnetBaseYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/chainstorage/solana/mainnet/base.yml", size: 4182, mode: os.FileMode(420), modTime: time.Unix(1640048354, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configChainstorageSolanaMainnetDevelopmentYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\xd0\xbf\x8e\xdc\x20\x10\x06\xf0\x9e\xa7\x18\x5d\x6a\x5b\xbe\xbb\x44\xb9\xa5\xde\x14\x69\xb2\xcd\xf6\x68\x0c\x63\x1b\x19\x86\x15\x33\xde\x3f\x6f\x1f\xd9\xce\x66\xa1\x41\xfa\x3e\x7e\x82\xf9\x06\xe7\x29\x0a\x0c\x31\x11\x44\x81\x91\x98\x2a\x2a\x05\xe8\x1f\xf0\x96\x71\x26\xf0\x85\x87\x38\xbe\xb5\x70\x3c\xc1\x9f\xd3\x19\x7e\x1d\x7f\x9f\x5b\x83\x37\xb1\x06\x00\x6f\xe2\xd0\xfb\xb2\xb0\x5a\x08\x74\xa5\x54\x2e\x99\x58\x0d\x40\xbf\xf8\x99\xd4\x02\xdd\x31\x5f\x12\x35\x7e\xc2\xc8\xa2\xa5\xe2\x48\x8d\x94\x84\x8c\x4d\xc6\xc8\x4c\xda\x04\xba\x1a\x8f\x81\xd8\xd3\xa6\x86\x50\x49\xc4\x82\x52\xbe\x94\x8a\x69\x2d\xb4\xff\xa0\xd6\x97\x6c\x7f\x7e\x7c\x7e\x9a\x4d\x5c\xfb\x7d\x2a\x7e\x76\xa2\x58\xd5\x4d\x14\xc7\x49\x2d\x7c\x75\xfb\x32\x42\xf5\x4a\x75\xab\x45\x0e\xee\xbf\xdd\xb5\xdb\xb6\x87\xee\xd0\x19\x49\xf8\x82\x76\xc2\x05\x4a\x8a\x16\xde\x57\xe4\x19\x69\xcc\xf4\x0a\xb2\x01\x28\x8b\xba\x32\x38\x79\xb0\x77\x5c\x02\xb9\x10\x45\x71\xfd\xc8\xf3\xa6\x46\xaa\x16\x3e\xb6\x53\x26\x27\x91\x3d\xb9\x84\xa2\x6e\x33\x2d\xbc\xff\xc8\xe6\x56\xea\x3c\xa4\xb2\x4f\xb5\x47\x3f\x0f\x31\xa5\xfd\xd9\x00\xbc\x64\xe7\x0b\xfb\xa5\x56\x62\x75\x74\xd7\x8a\x5e\x4b\x15\x0b\xdf\xbf\xcc\xdf\x00\x00\x00\xff\xff\x76\xe7\x46\xe6\xc3\x01\x00\x00")

func configChainstorageSolanaMainnetDevelopmentYmlBytes() ([]byte, error) {
	return bindataRead(
		_configChainstorageSolanaMainnetDevelopmentYml,
		"config/chainstorage/solana/mainnet/development.yml",
	)
}

func configChainstorageSolanaMainnetDevelopmentYml() (*asset, error) {
	bytes, err := configChainstorageSolanaMainnetDevelopmentYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/chainstorage/solana/mainnet/development.yml", size: 451, mode: os.FileMode(420), modTime: time.Unix(1640048354, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configChainstorageSolanaMainnetLocalYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\xb1\x0e\xc2\x20\x10\x06\xe0\x9d\xa7\xf8\x53\xf7\xa6\x6b\x99\xeb\xe0\x62\x17\x76\x73\xc2\x01\x97\x9e\x90\x70\x38\xf8\xf6\x7e\x37\x84\x2a\x86\x2c\xca\x10\x43\xe1\xc6\x83\x26\x27\xbc\x7f\x58\x3e\x74\x31\x62\x6f\x59\xca\xb2\xe2\x38\xf1\x3c\x03\xee\xc7\x23\xac\xce\xd2\xe5\x1d\x10\x2b\x49\xb3\xd9\x07\x15\x7e\x51\x4a\x83\xcd\x3c\xb4\x47\xd2\xda\x6d\xfa\x7d\xdb\x37\x07\x0c\xb6\x99\xbf\xea\x91\x49\x8d\xdd\x3f\x00\x00\xff\xff\xb5\x38\xa5\xc8\x75\x00\x00\x00")

func configChainstorageSolanaMainnetLocalYmlBytes() ([]byte, error) {
	return bindataRead(
		_configChainstorageSolanaMainnetLocalYml,
		"config/chainstorage/solana/mainnet/local.yml",
	)
}

func configChainstorageSolanaMainnetLocalYml() (*asset, error) {
	bytes, err := configChainstorageSolanaMainnetLocalYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/chainstorage/solana/mainnet/local.yml", size: 117, mode: os.FileMode(420), modTime: time.Unix(1640048354, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configChainstorageSolanaMainnetProductionYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\xcc\x31\x4f\xc3\x30\x10\xc5\xf1\xdd\x9f\xe2\xa9\xcc\xb1\x22\x3a\xa0\x7a\x2e\x03\x0b\x5d\xb2\x57\x97\xf3\x35\xb5\x6a\x9f\x23\x9f\x43\xe1\xdb\xa3\x56\x08\xbd\xf5\xfd\x7f\x2f\x98\xae\xc9\x70\x49\x59\x90\x0c\x8b\xa8\x34\xea\x12\x31\xff\x60\x57\xe8\x26\xe0\xaa\x97\xb4\xec\x3c\x8e\x27\x7c\x9e\x26\xbc\x1f\x3f\x26\xef\xe8\x6e\xc1\x01\x74\xb7\x33\x31\xd7\x4d\x7b\xc0\xda\x6a\xdc\xb8\xa7\xaa\x0e\x98\x37\xbe\x49\x0f\x90\x6f\x2a\x6b\x96\x81\xaf\x94\xd4\x7a\x6d\xb4\xc8\x60\x35\x93\xd2\x50\x28\xa9\x4a\x1f\x1e\xa1\x63\x8a\xa2\x2c\x4f\x35\xc6\x26\x66\x01\x5d\xca\x5a\x1b\x65\xff\xa7\x78\xae\x25\xbc\xbd\xee\xf7\xce\xa4\x7d\x49\x7b\x9c\xe7\xa4\xf1\xfc\x5f\x8c\xfe\xb9\x70\x18\x0f\xa3\xfb\x0d\x00\x00\xff\xff\x65\xd1\xb9\x68\xdd\x00\x00\x00")

func configChainstorageSolanaMainnetProductionYmlBytes() ([]byte, error) {
	return bindataRead(
		_configChainstorageSolanaMainnetProductionYml,
		"config/chainstorage/solana/mainnet/production.yml",
	)
}

func configChainstorageSolanaMainnetProductionYml() (*asset, error) {
	bytes, err := configChainstorageSolanaMainnetProductionYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/chainstorage/solana/mainnet/production.yml", size: 221, mode: os.FileMode(420), modTime: time.Unix(1640048354, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config/chainstorage/arbitrum/mainnet/base.yml":         configChainstorageArbitrumMainnetBaseYml,
	"config/chainstorage/arbitrum/mainnet/development.yml":  configChainstorageArbitrumMainnetDevelopmentYml,
	"config/chainstorage/arbitrum/mainnet/local.yml":        configChainstorageArbitrumMainnetLocalYml,
	"config/chainstorage/arbitrum/mainnet/production.yml":   configChainstorageArbitrumMainnetProductionYml,
	"config/chainstorage/avacchain/mainnet/base.yml":        configChainstorageAvacchainMainnetBaseYml,
	"config/chainstorage/avacchain/mainnet/development.yml": configChainstorageAvacchainMainnetDevelopmentYml,
	"config/chainstorage/avacchain/mainnet/production.yml":  configChainstorageAvacchainMainnetProductionYml,
	"config/chainstorage/bitcoin/mainnet/base.yml":          configChainstorageBitcoinMainnetBaseYml,
	"config/chainstorage/bitcoin/mainnet/development.yml":   configChainstorageBitcoinMainnetDevelopmentYml,
	"config/chainstorage/bitcoin/mainnet/local.yml":         configChainstorageBitcoinMainnetLocalYml,
	"config/chainstorage/bitcoin/mainnet/production.yml":    configChainstorageBitcoinMainnetProductionYml,
	"config/chainstorage/bsc/mainnet/base.yml":              configChainstorageBscMainnetBaseYml,
	"config/chainstorage/bsc/mainnet/development.yml":       configChainstorageBscMainnetDevelopmentYml,
	"config/chainstorage/bsc/mainnet/local.yml":             configChainstorageBscMainnetLocalYml,
	"config/chainstorage/bsc/mainnet/production.yml":        configChainstorageBscMainnetProductionYml,
	"config/chainstorage/dogecoin/mainnet/base.yml":         configChainstorageDogecoinMainnetBaseYml,
	"config/chainstorage/dogecoin/mainnet/development.yml":  configChainstorageDogecoinMainnetDevelopmentYml,
	"config/chainstorage/dogecoin/mainnet/local.yml":        configChainstorageDogecoinMainnetLocalYml,
	"config/chainstorage/dogecoin/mainnet/production.yml":   configChainstorageDogecoinMainnetProductionYml,
	"config/chainstorage/ethereum/goerli/base.yml":          configChainstorageEthereumGoerliBaseYml,
	"config/chainstorage/ethereum/goerli/development.yml":   configChainstorageEthereumGoerliDevelopmentYml,
	"config/chainstorage/ethereum/goerli/local.yml":         configChainstorageEthereumGoerliLocalYml,
	"config/chainstorage/ethereum/goerli/production.yml":    configChainstorageEthereumGoerliProductionYml,
	"config/chainstorage/ethereum/mainnet/base.yml":         configChainstorageEthereumMainnetBaseYml,
	"config/chainstorage/ethereum/mainnet/development.yml":  configChainstorageEthereumMainnetDevelopmentYml,
	"config/chainstorage/ethereum/mainnet/local.yml":        configChainstorageEthereumMainnetLocalYml,
	"config/chainstorage/ethereum/mainnet/production.yml":   configChainstorageEthereumMainnetProductionYml,
	"config/chainstorage/optimism/mainnet/base.yml":         configChainstorageOptimismMainnetBaseYml,
	"config/chainstorage/optimism/mainnet/development.yml":  configChainstorageOptimismMainnetDevelopmentYml,
	"config/chainstorage/optimism/mainnet/local.yml":        configChainstorageOptimismMainnetLocalYml,
	"config/chainstorage/optimism/mainnet/production.yml":   configChainstorageOptimismMainnetProductionYml,
	"config/chainstorage/polygon/mainnet/base.yml":          configChainstoragePolygonMainnetBaseYml,
	"config/chainstorage/polygon/mainnet/development.yml":   configChainstoragePolygonMainnetDevelopmentYml,
	"config/chainstorage/polygon/mainnet/local.yml":         configChainstoragePolygonMainnetLocalYml,
	"config/chainstorage/polygon/mainnet/production.yml":    configChainstoragePolygonMainnetProductionYml,
	"config/chainstorage/solana/mainnet/base.yml":           configChainstorageSolanaMainnetBaseYml,
	"config/chainstorage/solana/mainnet/development.yml":    configChainstorageSolanaMainnetDevelopmentYml,
	"config/chainstorage/solana/mainnet/local.yml":          configChainstorageSolanaMainnetLocalYml,
	"config/chainstorage/solana/mainnet/production.yml":     configChainstorageSolanaMainnetProductionYml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"config": &bintree{nil, map[string]*bintree{
		"chainstorage": &bintree{nil, map[string]*bintree{
			"arbitrum": &bintree{nil, map[string]*bintree{
				"mainnet": &bintree{nil, map[string]*bintree{
					"base.yml":        &bintree{configChainstorageArbitrumMainnetBaseYml, map[string]*bintree{}},
					"development.yml": &bintree{configChainstorageArbitrumMainnetDevelopmentYml, map[string]*bintree{}},
					"local.yml":       &bintree{configChainstorageArbitrumMainnetLocalYml, map[string]*bintree{}},
					"production.yml":  &bintree{configChainstorageArbitrumMainnetProductionYml, map[string]*bintree{}},
				}},
			}},
			"avacchain": &bintree{nil, map[string]*bintree{
				"mainnet": &bintree{nil, map[string]*bintree{
					"base.yml":        &bintree{configChainstorageAvacchainMainnetBaseYml, map[string]*bintree{}},
					"development.yml": &bintree{configChainstorageAvacchainMainnetDevelopmentYml, map[string]*bintree{}},
					"production.yml":  &bintree{configChainstorageAvacchainMainnetProductionYml, map[string]*bintree{}},
				}},
			}},
			"bitcoin": &bintree{nil, map[string]*bintree{
				"mainnet": &bintree{nil, map[string]*bintree{
					"base.yml":        &bintree{configChainstorageBitcoinMainnetBaseYml, map[string]*bintree{}},
					"development.yml": &bintree{configChainstorageBitcoinMainnetDevelopmentYml, map[string]*bintree{}},
					"local.yml":       &bintree{configChainstorageBitcoinMainnetLocalYml, map[string]*bintree{}},
					"production.yml":  &bintree{configChainstorageBitcoinMainnetProductionYml, map[string]*bintree{}},
				}},
			}},
			"bsc": &bintree{nil, map[string]*bintree{
				"mainnet": &bintree{nil, map[string]*bintree{
					"base.yml":        &bintree{configChainstorageBscMainnetBaseYml, map[string]*bintree{}},
					"development.yml": &bintree{configChainstorageBscMainnetDevelopmentYml, map[string]*bintree{}},
					"local.yml":       &bintree{configChainstorageBscMainnetLocalYml, map[string]*bintree{}},
					"production.yml":  &bintree{configChainstorageBscMainnetProductionYml, map[string]*bintree{}},
				}},
			}},
			"dogecoin": &bintree{nil, map[string]*bintree{
				"mainnet": &bintree{nil, map[string]*bintree{
					"base.yml":        &bintree{configChainstorageDogecoinMainnetBaseYml, map[string]*bintree{}},
					"development.yml": &bintree{configChainstorageDogecoinMainnetDevelopmentYml, map[string]*bintree{}},
					"local.yml":       &bintree{configChainstorageDogecoinMainnetLocalYml, map[string]*bintree{}},
					"production.yml":  &bintree{configChainstorageDogecoinMainnetProductionYml, map[string]*bintree{}},
				}},
			}},
			"ethereum": &bintree{nil, map[string]*bintree{
				"goerli": &bintree{nil, map[string]*bintree{
					"base.yml":        &bintree{configChainstorageEthereumGoerliBaseYml, map[string]*bintree{}},
					"development.yml": &bintree{configChainstorageEthereumGoerliDevelopmentYml, map[string]*bintree{}},
					"local.yml":       &bintree{configChainstorageEthereumGoerliLocalYml, map[string]*bintree{}},
					"production.yml":  &bintree{configChainstorageEthereumGoerliProductionYml, map[string]*bintree{}},
				}},
				"mainnet": &bintree{nil, map[string]*bintree{
					"base.yml":        &bintree{configChainstorageEthereumMainnetBaseYml, map[string]*bintree{}},
					"development.yml": &bintree{configChainstorageEthereumMainnetDevelopmentYml, map[string]*bintree{}},
					"local.yml":       &bintree{configChainstorageEthereumMainnetLocalYml, map[string]*bintree{}},
					"production.yml":  &bintree{configChainstorageEthereumMainnetProductionYml, map[string]*bintree{}},
				}},
			}},
			"optimism": &bintree{nil, map[string]*bintree{
				"mainnet": &bintree{nil, map[string]*bintree{
					"base.yml":        &bintree{configChainstorageOptimismMainnetBaseYml, map[string]*bintree{}},
					"development.yml": &bintree{configChainstorageOptimismMainnetDevelopmentYml, map[string]*bintree{}},
					"local.yml":       &bintree{configChainstorageOptimismMainnetLocalYml, map[string]*bintree{}},
					"production.yml":  &bintree{configChainstorageOptimismMainnetProductionYml, map[string]*bintree{}},
				}},
			}},
			"polygon": &bintree{nil, map[string]*bintree{
				"mainnet": &bintree{nil, map[string]*bintree{
					"base.yml":        &bintree{configChainstoragePolygonMainnetBaseYml, map[string]*bintree{}},
					"development.yml": &bintree{configChainstoragePolygonMainnetDevelopmentYml, map[string]*bintree{}},
					"local.yml":       &bintree{configChainstoragePolygonMainnetLocalYml, map[string]*bintree{}},
					"production.yml":  &bintree{configChainstoragePolygonMainnetProductionYml, map[string]*bintree{}},
				}},
			}},
			"solana": &bintree{nil, map[string]*bintree{
				"mainnet": &bintree{nil, map[string]*bintree{
					"base.yml":        &bintree{configChainstorageSolanaMainnetBaseYml, map[string]*bintree{}},
					"development.yml": &bintree{configChainstorageSolanaMainnetDevelopmentYml, map[string]*bintree{}},
					"local.yml":       &bintree{configChainstorageSolanaMainnetLocalYml, map[string]*bintree{}},
					"production.yml":  &bintree{configChainstorageSolanaMainnetProductionYml, map[string]*bintree{}},
				}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
