// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coinbase/chainstorage/internal/storage/metastorage/dynamodb (interfaces: DynamoAPI)

// Package dynamodbmocks is a generated GoMock package.
package dynamodbmocks

import (
	context "context"
	reflect "reflect"

	request "github.com/aws/aws-sdk-go/aws/request"
	dynamodb "github.com/aws/aws-sdk-go/service/dynamodb"
	gomock "github.com/golang/mock/gomock"
)

// MockDynamoAPI is a mock of DynamoAPI interface.
type MockDynamoAPI struct {
	ctrl     *gomock.Controller
	recorder *MockDynamoAPIMockRecorder
}

// MockDynamoAPIMockRecorder is the mock recorder for MockDynamoAPI.
type MockDynamoAPIMockRecorder struct {
	mock *MockDynamoAPI
}

// NewMockDynamoAPI creates a new mock instance.
func NewMockDynamoAPI(ctrl *gomock.Controller) *MockDynamoAPI {
	mock := &MockDynamoAPI{ctrl: ctrl}
	mock.recorder = &MockDynamoAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDynamoAPI) EXPECT() *MockDynamoAPIMockRecorder {
	return m.recorder
}

// BatchExecuteStatement mocks base method.
func (m *MockDynamoAPI) BatchExecuteStatement(arg0 *dynamodb.BatchExecuteStatementInput) (*dynamodb.BatchExecuteStatementOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchExecuteStatement", arg0)
	ret0, _ := ret[0].(*dynamodb.BatchExecuteStatementOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchExecuteStatement indicates an expected call of BatchExecuteStatement.
func (mr *MockDynamoAPIMockRecorder) BatchExecuteStatement(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchExecuteStatement", reflect.TypeOf((*MockDynamoAPI)(nil).BatchExecuteStatement), arg0)
}

// BatchExecuteStatementRequest mocks base method.
func (m *MockDynamoAPI) BatchExecuteStatementRequest(arg0 *dynamodb.BatchExecuteStatementInput) (*request.Request, *dynamodb.BatchExecuteStatementOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchExecuteStatementRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*dynamodb.BatchExecuteStatementOutput)
	return ret0, ret1
}

// BatchExecuteStatementRequest indicates an expected call of BatchExecuteStatementRequest.
func (mr *MockDynamoAPIMockRecorder) BatchExecuteStatementRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchExecuteStatementRequest", reflect.TypeOf((*MockDynamoAPI)(nil).BatchExecuteStatementRequest), arg0)
}

// BatchExecuteStatementWithContext mocks base method.
func (m *MockDynamoAPI) BatchExecuteStatementWithContext(arg0 context.Context, arg1 *dynamodb.BatchExecuteStatementInput, arg2 ...request.Option) (*dynamodb.BatchExecuteStatementOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchExecuteStatementWithContext", varargs...)
	ret0, _ := ret[0].(*dynamodb.BatchExecuteStatementOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchExecuteStatementWithContext indicates an expected call of BatchExecuteStatementWithContext.
func (mr *MockDynamoAPIMockRecorder) BatchExecuteStatementWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchExecuteStatementWithContext", reflect.TypeOf((*MockDynamoAPI)(nil).BatchExecuteStatementWithContext), varargs...)
}

// BatchGetItem mocks base method.
func (m *MockDynamoAPI) BatchGetItem(arg0 *dynamodb.BatchGetItemInput) (*dynamodb.BatchGetItemOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetItem", arg0)
	ret0, _ := ret[0].(*dynamodb.BatchGetItemOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetItem indicates an expected call of BatchGetItem.
func (mr *MockDynamoAPIMockRecorder) BatchGetItem(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetItem", reflect.TypeOf((*MockDynamoAPI)(nil).BatchGetItem), arg0)
}

// BatchGetItemPages mocks base method.
func (m *MockDynamoAPI) BatchGetItemPages(arg0 *dynamodb.BatchGetItemInput, arg1 func(*dynamodb.BatchGetItemOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetItemPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// BatchGetItemPages indicates an expected call of BatchGetItemPages.
func (mr *MockDynamoAPIMockRecorder) BatchGetItemPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetItemPages", reflect.TypeOf((*MockDynamoAPI)(nil).BatchGetItemPages), arg0, arg1)
}

// BatchGetItemPagesWithContext mocks base method.
func (m *MockDynamoAPI) BatchGetItemPagesWithContext(arg0 context.Context, arg1 *dynamodb.BatchGetItemInput, arg2 func(*dynamodb.BatchGetItemOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchGetItemPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// BatchGetItemPagesWithContext indicates an expected call of BatchGetItemPagesWithContext.
func (mr *MockDynamoAPIMockRecorder) BatchGetItemPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetItemPagesWithContext", reflect.TypeOf((*MockDynamoAPI)(nil).BatchGetItemPagesWithContext), varargs...)
}

// BatchGetItemRequest mocks base method.
func (m *MockDynamoAPI) BatchGetItemRequest(arg0 *dynamodb.BatchGetItemInput) (*request.Request, *dynamodb.BatchGetItemOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetItemRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*dynamodb.BatchGetItemOutput)
	return ret0, ret1
}

// BatchGetItemRequest indicates an expected call of BatchGetItemRequest.
func (mr *MockDynamoAPIMockRecorder) BatchGetItemRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetItemRequest", reflect.TypeOf((*MockDynamoAPI)(nil).BatchGetItemRequest), arg0)
}

// BatchGetItemWithContext mocks base method.
func (m *MockDynamoAPI) BatchGetItemWithContext(arg0 context.Context, arg1 *dynamodb.BatchGetItemInput, arg2 ...request.Option) (*dynamodb.BatchGetItemOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchGetItemWithContext", varargs...)
	ret0, _ := ret[0].(*dynamodb.BatchGetItemOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetItemWithContext indicates an expected call of BatchGetItemWithContext.
func (mr *MockDynamoAPIMockRecorder) BatchGetItemWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetItemWithContext", reflect.TypeOf((*MockDynamoAPI)(nil).BatchGetItemWithContext), varargs...)
}

// BatchWriteItem mocks base method.
func (m *MockDynamoAPI) BatchWriteItem(arg0 *dynamodb.BatchWriteItemInput) (*dynamodb.BatchWriteItemOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchWriteItem", arg0)
	ret0, _ := ret[0].(*dynamodb.BatchWriteItemOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchWriteItem indicates an expected call of BatchWriteItem.
func (mr *MockDynamoAPIMockRecorder) BatchWriteItem(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchWriteItem", reflect.TypeOf((*MockDynamoAPI)(nil).BatchWriteItem), arg0)
}

// BatchWriteItemRequest mocks base method.
func (m *MockDynamoAPI) BatchWriteItemRequest(arg0 *dynamodb.BatchWriteItemInput) (*request.Request, *dynamodb.BatchWriteItemOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchWriteItemRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*dynamodb.BatchWriteItemOutput)
	return ret0, ret1
}

// BatchWriteItemRequest indicates an expected call of BatchWriteItemRequest.
func (mr *MockDynamoAPIMockRecorder) BatchWriteItemRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchWriteItemRequest", reflect.TypeOf((*MockDynamoAPI)(nil).BatchWriteItemRequest), arg0)
}

// BatchWriteItemWithContext mocks base method.
func (m *MockDynamoAPI) BatchWriteItemWithContext(arg0 context.Context, arg1 *dynamodb.BatchWriteItemInput, arg2 ...request.Option) (*dynamodb.BatchWriteItemOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchWriteItemWithContext", varargs...)
	ret0, _ := ret[0].(*dynamodb.BatchWriteItemOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchWriteItemWithContext indicates an expected call of BatchWriteItemWithContext.
func (mr *MockDynamoAPIMockRecorder) BatchWriteItemWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchWriteItemWithContext", reflect.TypeOf((*MockDynamoAPI)(nil).BatchWriteItemWithContext), varargs...)
}

// CreateBackup mocks base method.
func (m *MockDynamoAPI) CreateBackup(arg0 *dynamodb.CreateBackupInput) (*dynamodb.CreateBackupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBackup", arg0)
	ret0, _ := ret[0].(*dynamodb.CreateBackupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBackup indicates an expected call of CreateBackup.
func (mr *MockDynamoAPIMockRecorder) CreateBackup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBackup", reflect.TypeOf((*MockDynamoAPI)(nil).CreateBackup), arg0)
}

// CreateBackupRequest mocks base method.
func (m *MockDynamoAPI) CreateBackupRequest(arg0 *dynamodb.CreateBackupInput) (*request.Request, *dynamodb.CreateBackupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBackupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*dynamodb.CreateBackupOutput)
	return ret0, ret1
}

// CreateBackupRequest indicates an expected call of CreateBackupRequest.
func (mr *MockDynamoAPIMockRecorder) CreateBackupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBackupRequest", reflect.TypeOf((*MockDynamoAPI)(nil).CreateBackupRequest), arg0)
}

// CreateBackupWithContext mocks base method.
func (m *MockDynamoAPI) CreateBackupWithContext(arg0 context.Context, arg1 *dynamodb.CreateBackupInput, arg2 ...request.Option) (*dynamodb.CreateBackupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateBackupWithContext", varargs...)
	ret0, _ := ret[0].(*dynamodb.CreateBackupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBackupWithContext indicates an expected call of CreateBackupWithContext.
func (mr *MockDynamoAPIMockRecorder) CreateBackupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBackupWithContext", reflect.TypeOf((*MockDynamoAPI)(nil).CreateBackupWithContext), varargs...)
}

// CreateGlobalTable mocks base method.
func (m *MockDynamoAPI) CreateGlobalTable(arg0 *dynamodb.CreateGlobalTableInput) (*dynamodb.CreateGlobalTableOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGlobalTable", arg0)
	ret0, _ := ret[0].(*dynamodb.CreateGlobalTableOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGlobalTable indicates an expected call of CreateGlobalTable.
func (mr *MockDynamoAPIMockRecorder) CreateGlobalTable(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGlobalTable", reflect.TypeOf((*MockDynamoAPI)(nil).CreateGlobalTable), arg0)
}

// CreateGlobalTableRequest mocks base method.
func (m *MockDynamoAPI) CreateGlobalTableRequest(arg0 *dynamodb.CreateGlobalTableInput) (*request.Request, *dynamodb.CreateGlobalTableOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGlobalTableRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*dynamodb.CreateGlobalTableOutput)
	return ret0, ret1
}

// CreateGlobalTableRequest indicates an expected call of CreateGlobalTableRequest.
func (mr *MockDynamoAPIMockRecorder) CreateGlobalTableRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGlobalTableRequest", reflect.TypeOf((*MockDynamoAPI)(nil).CreateGlobalTableRequest), arg0)
}

// CreateGlobalTableWithContext mocks base method.
func (m *MockDynamoAPI) CreateGlobalTableWithContext(arg0 context.Context, arg1 *dynamodb.CreateGlobalTableInput, arg2 ...request.Option) (*dynamodb.CreateGlobalTableOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateGlobalTableWithContext", varargs...)
	ret0, _ := ret[0].(*dynamodb.CreateGlobalTableOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGlobalTableWithContext indicates an expected call of CreateGlobalTableWithContext.
func (mr *MockDynamoAPIMockRecorder) CreateGlobalTableWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGlobalTableWithContext", reflect.TypeOf((*MockDynamoAPI)(nil).CreateGlobalTableWithContext), varargs...)
}

// CreateTable mocks base method.
func (m *MockDynamoAPI) CreateTable(arg0 *dynamodb.CreateTableInput) (*dynamodb.CreateTableOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTable", arg0)
	ret0, _ := ret[0].(*dynamodb.CreateTableOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTable indicates an expected call of CreateTable.
func (mr *MockDynamoAPIMockRecorder) CreateTable(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTable", reflect.TypeOf((*MockDynamoAPI)(nil).CreateTable), arg0)
}

// CreateTableRequest mocks base method.
func (m *MockDynamoAPI) CreateTableRequest(arg0 *dynamodb.CreateTableInput) (*request.Request, *dynamodb.CreateTableOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTableRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*dynamodb.CreateTableOutput)
	return ret0, ret1
}

// CreateTableRequest indicates an expected call of CreateTableRequest.
func (mr *MockDynamoAPIMockRecorder) CreateTableRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTableRequest", reflect.TypeOf((*MockDynamoAPI)(nil).CreateTableRequest), arg0)
}

// CreateTableWithContext mocks base method.
func (m *MockDynamoAPI) CreateTableWithContext(arg0 context.Context, arg1 *dynamodb.CreateTableInput, arg2 ...request.Option) (*dynamodb.CreateTableOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateTableWithContext", varargs...)
	ret0, _ := ret[0].(*dynamodb.CreateTableOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTableWithContext indicates an expected call of CreateTableWithContext.
func (mr *MockDynamoAPIMockRecorder) CreateTableWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTableWithContext", reflect.TypeOf((*MockDynamoAPI)(nil).CreateTableWithContext), varargs...)
}

// DeleteBackup mocks base method.
func (m *MockDynamoAPI) DeleteBackup(arg0 *dynamodb.DeleteBackupInput) (*dynamodb.DeleteBackupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBackup", arg0)
	ret0, _ := ret[0].(*dynamodb.DeleteBackupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBackup indicates an expected call of DeleteBackup.
func (mr *MockDynamoAPIMockRecorder) DeleteBackup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBackup", reflect.TypeOf((*MockDynamoAPI)(nil).DeleteBackup), arg0)
}

// DeleteBackupRequest mocks base method.
func (m *MockDynamoAPI) DeleteBackupRequest(arg0 *dynamodb.DeleteBackupInput) (*request.Request, *dynamodb.DeleteBackupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBackupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*dynamodb.DeleteBackupOutput)
	return ret0, ret1
}

// DeleteBackupRequest indicates an expected call of DeleteBackupRequest.
func (mr *MockDynamoAPIMockRecorder) DeleteBackupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBackupRequest", reflect.TypeOf((*MockDynamoAPI)(nil).DeleteBackupRequest), arg0)
}

// DeleteBackupWithContext mocks base method.
func (m *MockDynamoAPI) DeleteBackupWithContext(arg0 context.Context, arg1 *dynamodb.DeleteBackupInput, arg2 ...request.Option) (*dynamodb.DeleteBackupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteBackupWithContext", varargs...)
	ret0, _ := ret[0].(*dynamodb.DeleteBackupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBackupWithContext indicates an expected call of DeleteBackupWithContext.
func (mr *MockDynamoAPIMockRecorder) DeleteBackupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBackupWithContext", reflect.TypeOf((*MockDynamoAPI)(nil).DeleteBackupWithContext), varargs...)
}

// DeleteItem mocks base method.
func (m *MockDynamoAPI) DeleteItem(arg0 *dynamodb.DeleteItemInput) (*dynamodb.DeleteItemOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteItem", arg0)
	ret0, _ := ret[0].(*dynamodb.DeleteItemOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteItem indicates an expected call of DeleteItem.
func (mr *MockDynamoAPIMockRecorder) DeleteItem(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteItem", reflect.TypeOf((*MockDynamoAPI)(nil).DeleteItem), arg0)
}

// DeleteItemRequest mocks base method.
func (m *MockDynamoAPI) DeleteItemRequest(arg0 *dynamodb.DeleteItemInput) (*request.Request, *dynamodb.DeleteItemOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteItemRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*dynamodb.DeleteItemOutput)
	return ret0, ret1
}

// DeleteItemRequest indicates an expected call of DeleteItemRequest.
func (mr *MockDynamoAPIMockRecorder) DeleteItemRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteItemRequest", reflect.TypeOf((*MockDynamoAPI)(nil).DeleteItemRequest), arg0)
}

// DeleteItemWithContext mocks base method.
func (m *MockDynamoAPI) DeleteItemWithContext(arg0 context.Context, arg1 *dynamodb.DeleteItemInput, arg2 ...request.Option) (*dynamodb.DeleteItemOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteItemWithContext", varargs...)
	ret0, _ := ret[0].(*dynamodb.DeleteItemOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteItemWithContext indicates an expected call of DeleteItemWithContext.
func (mr *MockDynamoAPIMockRecorder) DeleteItemWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteItemWithContext", reflect.TypeOf((*MockDynamoAPI)(nil).DeleteItemWithContext), varargs...)
}

// DeleteTable mocks base method.
func (m *MockDynamoAPI) DeleteTable(arg0 *dynamodb.DeleteTableInput) (*dynamodb.DeleteTableOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTable", arg0)
	ret0, _ := ret[0].(*dynamodb.DeleteTableOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTable indicates an expected call of DeleteTable.
func (mr *MockDynamoAPIMockRecorder) DeleteTable(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTable", reflect.TypeOf((*MockDynamoAPI)(nil).DeleteTable), arg0)
}

// DeleteTableRequest mocks base method.
func (m *MockDynamoAPI) DeleteTableRequest(arg0 *dynamodb.DeleteTableInput) (*request.Request, *dynamodb.DeleteTableOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTableRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*dynamodb.DeleteTableOutput)
	return ret0, ret1
}

// DeleteTableRequest indicates an expected call of DeleteTableRequest.
func (mr *MockDynamoAPIMockRecorder) DeleteTableRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTableRequest", reflect.TypeOf((*MockDynamoAPI)(nil).DeleteTableRequest), arg0)
}

// DeleteTableWithContext mocks base method.
func (m *MockDynamoAPI) DeleteTableWithContext(arg0 context.Context, arg1 *dynamodb.DeleteTableInput, arg2 ...request.Option) (*dynamodb.DeleteTableOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteTableWithContext", varargs...)
	ret0, _ := ret[0].(*dynamodb.DeleteTableOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTableWithContext indicates an expected call of DeleteTableWithContext.
func (mr *MockDynamoAPIMockRecorder) DeleteTableWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTableWithContext", reflect.TypeOf((*MockDynamoAPI)(nil).DeleteTableWithContext), varargs...)
}

// DescribeBackup mocks base method.
func (m *MockDynamoAPI) DescribeBackup(arg0 *dynamodb.DescribeBackupInput) (*dynamodb.DescribeBackupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeBackup", arg0)
	ret0, _ := ret[0].(*dynamodb.DescribeBackupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeBackup indicates an expected call of DescribeBackup.
func (mr *MockDynamoAPIMockRecorder) DescribeBackup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeBackup", reflect.TypeOf((*MockDynamoAPI)(nil).DescribeBackup), arg0)
}

// DescribeBackupRequest mocks base method.
func (m *MockDynamoAPI) DescribeBackupRequest(arg0 *dynamodb.DescribeBackupInput) (*request.Request, *dynamodb.DescribeBackupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeBackupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*dynamodb.DescribeBackupOutput)
	return ret0, ret1
}

// DescribeBackupRequest indicates an expected call of DescribeBackupRequest.
func (mr *MockDynamoAPIMockRecorder) DescribeBackupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeBackupRequest", reflect.TypeOf((*MockDynamoAPI)(nil).DescribeBackupRequest), arg0)
}

// DescribeBackupWithContext mocks base method.
func (m *MockDynamoAPI) DescribeBackupWithContext(arg0 context.Context, arg1 *dynamodb.DescribeBackupInput, arg2 ...request.Option) (*dynamodb.DescribeBackupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeBackupWithContext", varargs...)
	ret0, _ := ret[0].(*dynamodb.DescribeBackupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeBackupWithContext indicates an expected call of DescribeBackupWithContext.
func (mr *MockDynamoAPIMockRecorder) DescribeBackupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeBackupWithContext", reflect.TypeOf((*MockDynamoAPI)(nil).DescribeBackupWithContext), varargs...)
}

// DescribeContinuousBackups mocks base method.
func (m *MockDynamoAPI) DescribeContinuousBackups(arg0 *dynamodb.DescribeContinuousBackupsInput) (*dynamodb.DescribeContinuousBackupsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeContinuousBackups", arg0)
	ret0, _ := ret[0].(*dynamodb.DescribeContinuousBackupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeContinuousBackups indicates an expected call of DescribeContinuousBackups.
func (mr *MockDynamoAPIMockRecorder) DescribeContinuousBackups(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeContinuousBackups", reflect.TypeOf((*MockDynamoAPI)(nil).DescribeContinuousBackups), arg0)
}

// DescribeContinuousBackupsRequest mocks base method.
func (m *MockDynamoAPI) DescribeContinuousBackupsRequest(arg0 *dynamodb.DescribeContinuousBackupsInput) (*request.Request, *dynamodb.DescribeContinuousBackupsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeContinuousBackupsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*dynamodb.DescribeContinuousBackupsOutput)
	return ret0, ret1
}

// DescribeContinuousBackupsRequest indicates an expected call of DescribeContinuousBackupsRequest.
func (mr *MockDynamoAPIMockRecorder) DescribeContinuousBackupsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeContinuousBackupsRequest", reflect.TypeOf((*MockDynamoAPI)(nil).DescribeContinuousBackupsRequest), arg0)
}

// DescribeContinuousBackupsWithContext mocks base method.
func (m *MockDynamoAPI) DescribeContinuousBackupsWithContext(arg0 context.Context, arg1 *dynamodb.DescribeContinuousBackupsInput, arg2 ...request.Option) (*dynamodb.DescribeContinuousBackupsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeContinuousBackupsWithContext", varargs...)
	ret0, _ := ret[0].(*dynamodb.DescribeContinuousBackupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeContinuousBackupsWithContext indicates an expected call of DescribeContinuousBackupsWithContext.
func (mr *MockDynamoAPIMockRecorder) DescribeContinuousBackupsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeContinuousBackupsWithContext", reflect.TypeOf((*MockDynamoAPI)(nil).DescribeContinuousBackupsWithContext), varargs...)
}

// DescribeContributorInsights mocks base method.
func (m *MockDynamoAPI) DescribeContributorInsights(arg0 *dynamodb.DescribeContributorInsightsInput) (*dynamodb.DescribeContributorInsightsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeContributorInsights", arg0)
	ret0, _ := ret[0].(*dynamodb.DescribeContributorInsightsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeContributorInsights indicates an expected call of DescribeContributorInsights.
func (mr *MockDynamoAPIMockRecorder) DescribeContributorInsights(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeContributorInsights", reflect.TypeOf((*MockDynamoAPI)(nil).DescribeContributorInsights), arg0)
}

// DescribeContributorInsightsRequest mocks base method.
func (m *MockDynamoAPI) DescribeContributorInsightsRequest(arg0 *dynamodb.DescribeContributorInsightsInput) (*request.Request, *dynamodb.DescribeContributorInsightsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeContributorInsightsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*dynamodb.DescribeContributorInsightsOutput)
	return ret0, ret1
}

// DescribeContributorInsightsRequest indicates an expected call of DescribeContributorInsightsRequest.
func (mr *MockDynamoAPIMockRecorder) DescribeContributorInsightsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeContributorInsightsRequest", reflect.TypeOf((*MockDynamoAPI)(nil).DescribeContributorInsightsRequest), arg0)
}

// DescribeContributorInsightsWithContext mocks base method.
func (m *MockDynamoAPI) DescribeContributorInsightsWithContext(arg0 context.Context, arg1 *dynamodb.DescribeContributorInsightsInput, arg2 ...request.Option) (*dynamodb.DescribeContributorInsightsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeContributorInsightsWithContext", varargs...)
	ret0, _ := ret[0].(*dynamodb.DescribeContributorInsightsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeContributorInsightsWithContext indicates an expected call of DescribeContributorInsightsWithContext.
func (mr *MockDynamoAPIMockRecorder) DescribeContributorInsightsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeContributorInsightsWithContext", reflect.TypeOf((*MockDynamoAPI)(nil).DescribeContributorInsightsWithContext), varargs...)
}

// DescribeEndpoints mocks base method.
func (m *MockDynamoAPI) DescribeEndpoints(arg0 *dynamodb.DescribeEndpointsInput) (*dynamodb.DescribeEndpointsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeEndpoints", arg0)
	ret0, _ := ret[0].(*dynamodb.DescribeEndpointsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeEndpoints indicates an expected call of DescribeEndpoints.
func (mr *MockDynamoAPIMockRecorder) DescribeEndpoints(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEndpoints", reflect.TypeOf((*MockDynamoAPI)(nil).DescribeEndpoints), arg0)
}

// DescribeEndpointsRequest mocks base method.
func (m *MockDynamoAPI) DescribeEndpointsRequest(arg0 *dynamodb.DescribeEndpointsInput) (*request.Request, *dynamodb.DescribeEndpointsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeEndpointsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*dynamodb.DescribeEndpointsOutput)
	return ret0, ret1
}

// DescribeEndpointsRequest indicates an expected call of DescribeEndpointsRequest.
func (mr *MockDynamoAPIMockRecorder) DescribeEndpointsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEndpointsRequest", reflect.TypeOf((*MockDynamoAPI)(nil).DescribeEndpointsRequest), arg0)
}

// DescribeEndpointsWithContext mocks base method.
func (m *MockDynamoAPI) DescribeEndpointsWithContext(arg0 context.Context, arg1 *dynamodb.DescribeEndpointsInput, arg2 ...request.Option) (*dynamodb.DescribeEndpointsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeEndpointsWithContext", varargs...)
	ret0, _ := ret[0].(*dynamodb.DescribeEndpointsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeEndpointsWithContext indicates an expected call of DescribeEndpointsWithContext.
func (mr *MockDynamoAPIMockRecorder) DescribeEndpointsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEndpointsWithContext", reflect.TypeOf((*MockDynamoAPI)(nil).DescribeEndpointsWithContext), varargs...)
}

// DescribeExport mocks base method.
func (m *MockDynamoAPI) DescribeExport(arg0 *dynamodb.DescribeExportInput) (*dynamodb.DescribeExportOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeExport", arg0)
	ret0, _ := ret[0].(*dynamodb.DescribeExportOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeExport indicates an expected call of DescribeExport.
func (mr *MockDynamoAPIMockRecorder) DescribeExport(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeExport", reflect.TypeOf((*MockDynamoAPI)(nil).DescribeExport), arg0)
}

// DescribeExportRequest mocks base method.
func (m *MockDynamoAPI) DescribeExportRequest(arg0 *dynamodb.DescribeExportInput) (*request.Request, *dynamodb.DescribeExportOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeExportRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*dynamodb.DescribeExportOutput)
	return ret0, ret1
}

// DescribeExportRequest indicates an expected call of DescribeExportRequest.
func (mr *MockDynamoAPIMockRecorder) DescribeExportRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeExportRequest", reflect.TypeOf((*MockDynamoAPI)(nil).DescribeExportRequest), arg0)
}

// DescribeExportWithContext mocks base method.
func (m *MockDynamoAPI) DescribeExportWithContext(arg0 context.Context, arg1 *dynamodb.DescribeExportInput, arg2 ...request.Option) (*dynamodb.DescribeExportOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeExportWithContext", varargs...)
	ret0, _ := ret[0].(*dynamodb.DescribeExportOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeExportWithContext indicates an expected call of DescribeExportWithContext.
func (mr *MockDynamoAPIMockRecorder) DescribeExportWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeExportWithContext", reflect.TypeOf((*MockDynamoAPI)(nil).DescribeExportWithContext), varargs...)
}

// DescribeGlobalTable mocks base method.
func (m *MockDynamoAPI) DescribeGlobalTable(arg0 *dynamodb.DescribeGlobalTableInput) (*dynamodb.DescribeGlobalTableOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeGlobalTable", arg0)
	ret0, _ := ret[0].(*dynamodb.DescribeGlobalTableOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeGlobalTable indicates an expected call of DescribeGlobalTable.
func (mr *MockDynamoAPIMockRecorder) DescribeGlobalTable(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeGlobalTable", reflect.TypeOf((*MockDynamoAPI)(nil).DescribeGlobalTable), arg0)
}

// DescribeGlobalTableRequest mocks base method.
func (m *MockDynamoAPI) DescribeGlobalTableRequest(arg0 *dynamodb.DescribeGlobalTableInput) (*request.Request, *dynamodb.DescribeGlobalTableOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeGlobalTableRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*dynamodb.DescribeGlobalTableOutput)
	return ret0, ret1
}

// DescribeGlobalTableRequest indicates an expected call of DescribeGlobalTableRequest.
func (mr *MockDynamoAPIMockRecorder) DescribeGlobalTableRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeGlobalTableRequest", reflect.TypeOf((*MockDynamoAPI)(nil).DescribeGlobalTableRequest), arg0)
}

// DescribeGlobalTableSettings mocks base method.
func (m *MockDynamoAPI) DescribeGlobalTableSettings(arg0 *dynamodb.DescribeGlobalTableSettingsInput) (*dynamodb.DescribeGlobalTableSettingsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeGlobalTableSettings", arg0)
	ret0, _ := ret[0].(*dynamodb.DescribeGlobalTableSettingsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeGlobalTableSettings indicates an expected call of DescribeGlobalTableSettings.
func (mr *MockDynamoAPIMockRecorder) DescribeGlobalTableSettings(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeGlobalTableSettings", reflect.TypeOf((*MockDynamoAPI)(nil).DescribeGlobalTableSettings), arg0)
}

// DescribeGlobalTableSettingsRequest mocks base method.
func (m *MockDynamoAPI) DescribeGlobalTableSettingsRequest(arg0 *dynamodb.DescribeGlobalTableSettingsInput) (*request.Request, *dynamodb.DescribeGlobalTableSettingsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeGlobalTableSettingsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*dynamodb.DescribeGlobalTableSettingsOutput)
	return ret0, ret1
}

// DescribeGlobalTableSettingsRequest indicates an expected call of DescribeGlobalTableSettingsRequest.
func (mr *MockDynamoAPIMockRecorder) DescribeGlobalTableSettingsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeGlobalTableSettingsRequest", reflect.TypeOf((*MockDynamoAPI)(nil).DescribeGlobalTableSettingsRequest), arg0)
}

// DescribeGlobalTableSettingsWithContext mocks base method.
func (m *MockDynamoAPI) DescribeGlobalTableSettingsWithContext(arg0 context.Context, arg1 *dynamodb.DescribeGlobalTableSettingsInput, arg2 ...request.Option) (*dynamodb.DescribeGlobalTableSettingsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeGlobalTableSettingsWithContext", varargs...)
	ret0, _ := ret[0].(*dynamodb.DescribeGlobalTableSettingsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeGlobalTableSettingsWithContext indicates an expected call of DescribeGlobalTableSettingsWithContext.
func (mr *MockDynamoAPIMockRecorder) DescribeGlobalTableSettingsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeGlobalTableSettingsWithContext", reflect.TypeOf((*MockDynamoAPI)(nil).DescribeGlobalTableSettingsWithContext), varargs...)
}

// DescribeGlobalTableWithContext mocks base method.
func (m *MockDynamoAPI) DescribeGlobalTableWithContext(arg0 context.Context, arg1 *dynamodb.DescribeGlobalTableInput, arg2 ...request.Option) (*dynamodb.DescribeGlobalTableOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeGlobalTableWithContext", varargs...)
	ret0, _ := ret[0].(*dynamodb.DescribeGlobalTableOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeGlobalTableWithContext indicates an expected call of DescribeGlobalTableWithContext.
func (mr *MockDynamoAPIMockRecorder) DescribeGlobalTableWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeGlobalTableWithContext", reflect.TypeOf((*MockDynamoAPI)(nil).DescribeGlobalTableWithContext), varargs...)
}

// DescribeKinesisStreamingDestination mocks base method.
func (m *MockDynamoAPI) DescribeKinesisStreamingDestination(arg0 *dynamodb.DescribeKinesisStreamingDestinationInput) (*dynamodb.DescribeKinesisStreamingDestinationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeKinesisStreamingDestination", arg0)
	ret0, _ := ret[0].(*dynamodb.DescribeKinesisStreamingDestinationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeKinesisStreamingDestination indicates an expected call of DescribeKinesisStreamingDestination.
func (mr *MockDynamoAPIMockRecorder) DescribeKinesisStreamingDestination(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeKinesisStreamingDestination", reflect.TypeOf((*MockDynamoAPI)(nil).DescribeKinesisStreamingDestination), arg0)
}

// DescribeKinesisStreamingDestinationRequest mocks base method.
func (m *MockDynamoAPI) DescribeKinesisStreamingDestinationRequest(arg0 *dynamodb.DescribeKinesisStreamingDestinationInput) (*request.Request, *dynamodb.DescribeKinesisStreamingDestinationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeKinesisStreamingDestinationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*dynamodb.DescribeKinesisStreamingDestinationOutput)
	return ret0, ret1
}

// DescribeKinesisStreamingDestinationRequest indicates an expected call of DescribeKinesisStreamingDestinationRequest.
func (mr *MockDynamoAPIMockRecorder) DescribeKinesisStreamingDestinationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeKinesisStreamingDestinationRequest", reflect.TypeOf((*MockDynamoAPI)(nil).DescribeKinesisStreamingDestinationRequest), arg0)
}

// DescribeKinesisStreamingDestinationWithContext mocks base method.
func (m *MockDynamoAPI) DescribeKinesisStreamingDestinationWithContext(arg0 context.Context, arg1 *dynamodb.DescribeKinesisStreamingDestinationInput, arg2 ...request.Option) (*dynamodb.DescribeKinesisStreamingDestinationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeKinesisStreamingDestinationWithContext", varargs...)
	ret0, _ := ret[0].(*dynamodb.DescribeKinesisStreamingDestinationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeKinesisStreamingDestinationWithContext indicates an expected call of DescribeKinesisStreamingDestinationWithContext.
func (mr *MockDynamoAPIMockRecorder) DescribeKinesisStreamingDestinationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeKinesisStreamingDestinationWithContext", reflect.TypeOf((*MockDynamoAPI)(nil).DescribeKinesisStreamingDestinationWithContext), varargs...)
}

// DescribeLimits mocks base method.
func (m *MockDynamoAPI) DescribeLimits(arg0 *dynamodb.DescribeLimitsInput) (*dynamodb.DescribeLimitsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeLimits", arg0)
	ret0, _ := ret[0].(*dynamodb.DescribeLimitsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeLimits indicates an expected call of DescribeLimits.
func (mr *MockDynamoAPIMockRecorder) DescribeLimits(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeLimits", reflect.TypeOf((*MockDynamoAPI)(nil).DescribeLimits), arg0)
}

// DescribeLimitsRequest mocks base method.
func (m *MockDynamoAPI) DescribeLimitsRequest(arg0 *dynamodb.DescribeLimitsInput) (*request.Request, *dynamodb.DescribeLimitsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeLimitsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*dynamodb.DescribeLimitsOutput)
	return ret0, ret1
}

// DescribeLimitsRequest indicates an expected call of DescribeLimitsRequest.
func (mr *MockDynamoAPIMockRecorder) DescribeLimitsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeLimitsRequest", reflect.TypeOf((*MockDynamoAPI)(nil).DescribeLimitsRequest), arg0)
}

// DescribeLimitsWithContext mocks base method.
func (m *MockDynamoAPI) DescribeLimitsWithContext(arg0 context.Context, arg1 *dynamodb.DescribeLimitsInput, arg2 ...request.Option) (*dynamodb.DescribeLimitsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeLimitsWithContext", varargs...)
	ret0, _ := ret[0].(*dynamodb.DescribeLimitsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeLimitsWithContext indicates an expected call of DescribeLimitsWithContext.
func (mr *MockDynamoAPIMockRecorder) DescribeLimitsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeLimitsWithContext", reflect.TypeOf((*MockDynamoAPI)(nil).DescribeLimitsWithContext), varargs...)
}

// DescribeTable mocks base method.
func (m *MockDynamoAPI) DescribeTable(arg0 *dynamodb.DescribeTableInput) (*dynamodb.DescribeTableOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeTable", arg0)
	ret0, _ := ret[0].(*dynamodb.DescribeTableOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeTable indicates an expected call of DescribeTable.
func (mr *MockDynamoAPIMockRecorder) DescribeTable(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeTable", reflect.TypeOf((*MockDynamoAPI)(nil).DescribeTable), arg0)
}

// DescribeTableReplicaAutoScaling mocks base method.
func (m *MockDynamoAPI) DescribeTableReplicaAutoScaling(arg0 *dynamodb.DescribeTableReplicaAutoScalingInput) (*dynamodb.DescribeTableReplicaAutoScalingOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeTableReplicaAutoScaling", arg0)
	ret0, _ := ret[0].(*dynamodb.DescribeTableReplicaAutoScalingOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeTableReplicaAutoScaling indicates an expected call of DescribeTableReplicaAutoScaling.
func (mr *MockDynamoAPIMockRecorder) DescribeTableReplicaAutoScaling(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeTableReplicaAutoScaling", reflect.TypeOf((*MockDynamoAPI)(nil).DescribeTableReplicaAutoScaling), arg0)
}

// DescribeTableReplicaAutoScalingRequest mocks base method.
func (m *MockDynamoAPI) DescribeTableReplicaAutoScalingRequest(arg0 *dynamodb.DescribeTableReplicaAutoScalingInput) (*request.Request, *dynamodb.DescribeTableReplicaAutoScalingOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeTableReplicaAutoScalingRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*dynamodb.DescribeTableReplicaAutoScalingOutput)
	return ret0, ret1
}

// DescribeTableReplicaAutoScalingRequest indicates an expected call of DescribeTableReplicaAutoScalingRequest.
func (mr *MockDynamoAPIMockRecorder) DescribeTableReplicaAutoScalingRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeTableReplicaAutoScalingRequest", reflect.TypeOf((*MockDynamoAPI)(nil).DescribeTableReplicaAutoScalingRequest), arg0)
}

// DescribeTableReplicaAutoScalingWithContext mocks base method.
func (m *MockDynamoAPI) DescribeTableReplicaAutoScalingWithContext(arg0 context.Context, arg1 *dynamodb.DescribeTableReplicaAutoScalingInput, arg2 ...request.Option) (*dynamodb.DescribeTableReplicaAutoScalingOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeTableReplicaAutoScalingWithContext", varargs...)
	ret0, _ := ret[0].(*dynamodb.DescribeTableReplicaAutoScalingOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeTableReplicaAutoScalingWithContext indicates an expected call of DescribeTableReplicaAutoScalingWithContext.
func (mr *MockDynamoAPIMockRecorder) DescribeTableReplicaAutoScalingWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeTableReplicaAutoScalingWithContext", reflect.TypeOf((*MockDynamoAPI)(nil).DescribeTableReplicaAutoScalingWithContext), varargs...)
}

// DescribeTableRequest mocks base method.
func (m *MockDynamoAPI) DescribeTableRequest(arg0 *dynamodb.DescribeTableInput) (*request.Request, *dynamodb.DescribeTableOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeTableRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*dynamodb.DescribeTableOutput)
	return ret0, ret1
}

// DescribeTableRequest indicates an expected call of DescribeTableRequest.
func (mr *MockDynamoAPIMockRecorder) DescribeTableRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeTableRequest", reflect.TypeOf((*MockDynamoAPI)(nil).DescribeTableRequest), arg0)
}

// DescribeTableWithContext mocks base method.
func (m *MockDynamoAPI) DescribeTableWithContext(arg0 context.Context, arg1 *dynamodb.DescribeTableInput, arg2 ...request.Option) (*dynamodb.DescribeTableOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeTableWithContext", varargs...)
	ret0, _ := ret[0].(*dynamodb.DescribeTableOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeTableWithContext indicates an expected call of DescribeTableWithContext.
func (mr *MockDynamoAPIMockRecorder) DescribeTableWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeTableWithContext", reflect.TypeOf((*MockDynamoAPI)(nil).DescribeTableWithContext), varargs...)
}

// DescribeTimeToLive mocks base method.
func (m *MockDynamoAPI) DescribeTimeToLive(arg0 *dynamodb.DescribeTimeToLiveInput) (*dynamodb.DescribeTimeToLiveOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeTimeToLive", arg0)
	ret0, _ := ret[0].(*dynamodb.DescribeTimeToLiveOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeTimeToLive indicates an expected call of DescribeTimeToLive.
func (mr *MockDynamoAPIMockRecorder) DescribeTimeToLive(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeTimeToLive", reflect.TypeOf((*MockDynamoAPI)(nil).DescribeTimeToLive), arg0)
}

// DescribeTimeToLiveRequest mocks base method.
func (m *MockDynamoAPI) DescribeTimeToLiveRequest(arg0 *dynamodb.DescribeTimeToLiveInput) (*request.Request, *dynamodb.DescribeTimeToLiveOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeTimeToLiveRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*dynamodb.DescribeTimeToLiveOutput)
	return ret0, ret1
}

// DescribeTimeToLiveRequest indicates an expected call of DescribeTimeToLiveRequest.
func (mr *MockDynamoAPIMockRecorder) DescribeTimeToLiveRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeTimeToLiveRequest", reflect.TypeOf((*MockDynamoAPI)(nil).DescribeTimeToLiveRequest), arg0)
}

// DescribeTimeToLiveWithContext mocks base method.
func (m *MockDynamoAPI) DescribeTimeToLiveWithContext(arg0 context.Context, arg1 *dynamodb.DescribeTimeToLiveInput, arg2 ...request.Option) (*dynamodb.DescribeTimeToLiveOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeTimeToLiveWithContext", varargs...)
	ret0, _ := ret[0].(*dynamodb.DescribeTimeToLiveOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeTimeToLiveWithContext indicates an expected call of DescribeTimeToLiveWithContext.
func (mr *MockDynamoAPIMockRecorder) DescribeTimeToLiveWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeTimeToLiveWithContext", reflect.TypeOf((*MockDynamoAPI)(nil).DescribeTimeToLiveWithContext), varargs...)
}

// DisableKinesisStreamingDestination mocks base method.
func (m *MockDynamoAPI) DisableKinesisStreamingDestination(arg0 *dynamodb.DisableKinesisStreamingDestinationInput) (*dynamodb.DisableKinesisStreamingDestinationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisableKinesisStreamingDestination", arg0)
	ret0, _ := ret[0].(*dynamodb.DisableKinesisStreamingDestinationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisableKinesisStreamingDestination indicates an expected call of DisableKinesisStreamingDestination.
func (mr *MockDynamoAPIMockRecorder) DisableKinesisStreamingDestination(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableKinesisStreamingDestination", reflect.TypeOf((*MockDynamoAPI)(nil).DisableKinesisStreamingDestination), arg0)
}

// DisableKinesisStreamingDestinationRequest mocks base method.
func (m *MockDynamoAPI) DisableKinesisStreamingDestinationRequest(arg0 *dynamodb.DisableKinesisStreamingDestinationInput) (*request.Request, *dynamodb.DisableKinesisStreamingDestinationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisableKinesisStreamingDestinationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*dynamodb.DisableKinesisStreamingDestinationOutput)
	return ret0, ret1
}

// DisableKinesisStreamingDestinationRequest indicates an expected call of DisableKinesisStreamingDestinationRequest.
func (mr *MockDynamoAPIMockRecorder) DisableKinesisStreamingDestinationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableKinesisStreamingDestinationRequest", reflect.TypeOf((*MockDynamoAPI)(nil).DisableKinesisStreamingDestinationRequest), arg0)
}

// DisableKinesisStreamingDestinationWithContext mocks base method.
func (m *MockDynamoAPI) DisableKinesisStreamingDestinationWithContext(arg0 context.Context, arg1 *dynamodb.DisableKinesisStreamingDestinationInput, arg2 ...request.Option) (*dynamodb.DisableKinesisStreamingDestinationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DisableKinesisStreamingDestinationWithContext", varargs...)
	ret0, _ := ret[0].(*dynamodb.DisableKinesisStreamingDestinationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisableKinesisStreamingDestinationWithContext indicates an expected call of DisableKinesisStreamingDestinationWithContext.
func (mr *MockDynamoAPIMockRecorder) DisableKinesisStreamingDestinationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableKinesisStreamingDestinationWithContext", reflect.TypeOf((*MockDynamoAPI)(nil).DisableKinesisStreamingDestinationWithContext), varargs...)
}

// EnableKinesisStreamingDestination mocks base method.
func (m *MockDynamoAPI) EnableKinesisStreamingDestination(arg0 *dynamodb.EnableKinesisStreamingDestinationInput) (*dynamodb.EnableKinesisStreamingDestinationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnableKinesisStreamingDestination", arg0)
	ret0, _ := ret[0].(*dynamodb.EnableKinesisStreamingDestinationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnableKinesisStreamingDestination indicates an expected call of EnableKinesisStreamingDestination.
func (mr *MockDynamoAPIMockRecorder) EnableKinesisStreamingDestination(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableKinesisStreamingDestination", reflect.TypeOf((*MockDynamoAPI)(nil).EnableKinesisStreamingDestination), arg0)
}

// EnableKinesisStreamingDestinationRequest mocks base method.
func (m *MockDynamoAPI) EnableKinesisStreamingDestinationRequest(arg0 *dynamodb.EnableKinesisStreamingDestinationInput) (*request.Request, *dynamodb.EnableKinesisStreamingDestinationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnableKinesisStreamingDestinationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*dynamodb.EnableKinesisStreamingDestinationOutput)
	return ret0, ret1
}

// EnableKinesisStreamingDestinationRequest indicates an expected call of EnableKinesisStreamingDestinationRequest.
func (mr *MockDynamoAPIMockRecorder) EnableKinesisStreamingDestinationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableKinesisStreamingDestinationRequest", reflect.TypeOf((*MockDynamoAPI)(nil).EnableKinesisStreamingDestinationRequest), arg0)
}

// EnableKinesisStreamingDestinationWithContext mocks base method.
func (m *MockDynamoAPI) EnableKinesisStreamingDestinationWithContext(arg0 context.Context, arg1 *dynamodb.EnableKinesisStreamingDestinationInput, arg2 ...request.Option) (*dynamodb.EnableKinesisStreamingDestinationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EnableKinesisStreamingDestinationWithContext", varargs...)
	ret0, _ := ret[0].(*dynamodb.EnableKinesisStreamingDestinationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnableKinesisStreamingDestinationWithContext indicates an expected call of EnableKinesisStreamingDestinationWithContext.
func (mr *MockDynamoAPIMockRecorder) EnableKinesisStreamingDestinationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableKinesisStreamingDestinationWithContext", reflect.TypeOf((*MockDynamoAPI)(nil).EnableKinesisStreamingDestinationWithContext), varargs...)
}

// ExecuteStatement mocks base method.
func (m *MockDynamoAPI) ExecuteStatement(arg0 *dynamodb.ExecuteStatementInput) (*dynamodb.ExecuteStatementOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteStatement", arg0)
	ret0, _ := ret[0].(*dynamodb.ExecuteStatementOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteStatement indicates an expected call of ExecuteStatement.
func (mr *MockDynamoAPIMockRecorder) ExecuteStatement(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteStatement", reflect.TypeOf((*MockDynamoAPI)(nil).ExecuteStatement), arg0)
}

// ExecuteStatementRequest mocks base method.
func (m *MockDynamoAPI) ExecuteStatementRequest(arg0 *dynamodb.ExecuteStatementInput) (*request.Request, *dynamodb.ExecuteStatementOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteStatementRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*dynamodb.ExecuteStatementOutput)
	return ret0, ret1
}

// ExecuteStatementRequest indicates an expected call of ExecuteStatementRequest.
func (mr *MockDynamoAPIMockRecorder) ExecuteStatementRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteStatementRequest", reflect.TypeOf((*MockDynamoAPI)(nil).ExecuteStatementRequest), arg0)
}

// ExecuteStatementWithContext mocks base method.
func (m *MockDynamoAPI) ExecuteStatementWithContext(arg0 context.Context, arg1 *dynamodb.ExecuteStatementInput, arg2 ...request.Option) (*dynamodb.ExecuteStatementOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExecuteStatementWithContext", varargs...)
	ret0, _ := ret[0].(*dynamodb.ExecuteStatementOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteStatementWithContext indicates an expected call of ExecuteStatementWithContext.
func (mr *MockDynamoAPIMockRecorder) ExecuteStatementWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteStatementWithContext", reflect.TypeOf((*MockDynamoAPI)(nil).ExecuteStatementWithContext), varargs...)
}

// ExecuteTransaction mocks base method.
func (m *MockDynamoAPI) ExecuteTransaction(arg0 *dynamodb.ExecuteTransactionInput) (*dynamodb.ExecuteTransactionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteTransaction", arg0)
	ret0, _ := ret[0].(*dynamodb.ExecuteTransactionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteTransaction indicates an expected call of ExecuteTransaction.
func (mr *MockDynamoAPIMockRecorder) ExecuteTransaction(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteTransaction", reflect.TypeOf((*MockDynamoAPI)(nil).ExecuteTransaction), arg0)
}

// ExecuteTransactionRequest mocks base method.
func (m *MockDynamoAPI) ExecuteTransactionRequest(arg0 *dynamodb.ExecuteTransactionInput) (*request.Request, *dynamodb.ExecuteTransactionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteTransactionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*dynamodb.ExecuteTransactionOutput)
	return ret0, ret1
}

// ExecuteTransactionRequest indicates an expected call of ExecuteTransactionRequest.
func (mr *MockDynamoAPIMockRecorder) ExecuteTransactionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteTransactionRequest", reflect.TypeOf((*MockDynamoAPI)(nil).ExecuteTransactionRequest), arg0)
}

// ExecuteTransactionWithContext mocks base method.
func (m *MockDynamoAPI) ExecuteTransactionWithContext(arg0 context.Context, arg1 *dynamodb.ExecuteTransactionInput, arg2 ...request.Option) (*dynamodb.ExecuteTransactionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExecuteTransactionWithContext", varargs...)
	ret0, _ := ret[0].(*dynamodb.ExecuteTransactionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteTransactionWithContext indicates an expected call of ExecuteTransactionWithContext.
func (mr *MockDynamoAPIMockRecorder) ExecuteTransactionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteTransactionWithContext", reflect.TypeOf((*MockDynamoAPI)(nil).ExecuteTransactionWithContext), varargs...)
}

// ExportTableToPointInTime mocks base method.
func (m *MockDynamoAPI) ExportTableToPointInTime(arg0 *dynamodb.ExportTableToPointInTimeInput) (*dynamodb.ExportTableToPointInTimeOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExportTableToPointInTime", arg0)
	ret0, _ := ret[0].(*dynamodb.ExportTableToPointInTimeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExportTableToPointInTime indicates an expected call of ExportTableToPointInTime.
func (mr *MockDynamoAPIMockRecorder) ExportTableToPointInTime(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportTableToPointInTime", reflect.TypeOf((*MockDynamoAPI)(nil).ExportTableToPointInTime), arg0)
}

// ExportTableToPointInTimeRequest mocks base method.
func (m *MockDynamoAPI) ExportTableToPointInTimeRequest(arg0 *dynamodb.ExportTableToPointInTimeInput) (*request.Request, *dynamodb.ExportTableToPointInTimeOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExportTableToPointInTimeRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*dynamodb.ExportTableToPointInTimeOutput)
	return ret0, ret1
}

// ExportTableToPointInTimeRequest indicates an expected call of ExportTableToPointInTimeRequest.
func (mr *MockDynamoAPIMockRecorder) ExportTableToPointInTimeRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportTableToPointInTimeRequest", reflect.TypeOf((*MockDynamoAPI)(nil).ExportTableToPointInTimeRequest), arg0)
}

// ExportTableToPointInTimeWithContext mocks base method.
func (m *MockDynamoAPI) ExportTableToPointInTimeWithContext(arg0 context.Context, arg1 *dynamodb.ExportTableToPointInTimeInput, arg2 ...request.Option) (*dynamodb.ExportTableToPointInTimeOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExportTableToPointInTimeWithContext", varargs...)
	ret0, _ := ret[0].(*dynamodb.ExportTableToPointInTimeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExportTableToPointInTimeWithContext indicates an expected call of ExportTableToPointInTimeWithContext.
func (mr *MockDynamoAPIMockRecorder) ExportTableToPointInTimeWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportTableToPointInTimeWithContext", reflect.TypeOf((*MockDynamoAPI)(nil).ExportTableToPointInTimeWithContext), varargs...)
}

// GetItem mocks base method.
func (m *MockDynamoAPI) GetItem(arg0 *dynamodb.GetItemInput) (*dynamodb.GetItemOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItem", arg0)
	ret0, _ := ret[0].(*dynamodb.GetItemOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItem indicates an expected call of GetItem.
func (mr *MockDynamoAPIMockRecorder) GetItem(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItem", reflect.TypeOf((*MockDynamoAPI)(nil).GetItem), arg0)
}

// GetItemRequest mocks base method.
func (m *MockDynamoAPI) GetItemRequest(arg0 *dynamodb.GetItemInput) (*request.Request, *dynamodb.GetItemOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItemRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*dynamodb.GetItemOutput)
	return ret0, ret1
}

// GetItemRequest indicates an expected call of GetItemRequest.
func (mr *MockDynamoAPIMockRecorder) GetItemRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItemRequest", reflect.TypeOf((*MockDynamoAPI)(nil).GetItemRequest), arg0)
}

// GetItemWithContext mocks base method.
func (m *MockDynamoAPI) GetItemWithContext(arg0 context.Context, arg1 *dynamodb.GetItemInput, arg2 ...request.Option) (*dynamodb.GetItemOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetItemWithContext", varargs...)
	ret0, _ := ret[0].(*dynamodb.GetItemOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItemWithContext indicates an expected call of GetItemWithContext.
func (mr *MockDynamoAPIMockRecorder) GetItemWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItemWithContext", reflect.TypeOf((*MockDynamoAPI)(nil).GetItemWithContext), varargs...)
}

// ListBackups mocks base method.
func (m *MockDynamoAPI) ListBackups(arg0 *dynamodb.ListBackupsInput) (*dynamodb.ListBackupsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBackups", arg0)
	ret0, _ := ret[0].(*dynamodb.ListBackupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBackups indicates an expected call of ListBackups.
func (mr *MockDynamoAPIMockRecorder) ListBackups(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBackups", reflect.TypeOf((*MockDynamoAPI)(nil).ListBackups), arg0)
}

// ListBackupsRequest mocks base method.
func (m *MockDynamoAPI) ListBackupsRequest(arg0 *dynamodb.ListBackupsInput) (*request.Request, *dynamodb.ListBackupsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBackupsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*dynamodb.ListBackupsOutput)
	return ret0, ret1
}

// ListBackupsRequest indicates an expected call of ListBackupsRequest.
func (mr *MockDynamoAPIMockRecorder) ListBackupsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBackupsRequest", reflect.TypeOf((*MockDynamoAPI)(nil).ListBackupsRequest), arg0)
}

// ListBackupsWithContext mocks base method.
func (m *MockDynamoAPI) ListBackupsWithContext(arg0 context.Context, arg1 *dynamodb.ListBackupsInput, arg2 ...request.Option) (*dynamodb.ListBackupsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListBackupsWithContext", varargs...)
	ret0, _ := ret[0].(*dynamodb.ListBackupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBackupsWithContext indicates an expected call of ListBackupsWithContext.
func (mr *MockDynamoAPIMockRecorder) ListBackupsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBackupsWithContext", reflect.TypeOf((*MockDynamoAPI)(nil).ListBackupsWithContext), varargs...)
}

// ListContributorInsights mocks base method.
func (m *MockDynamoAPI) ListContributorInsights(arg0 *dynamodb.ListContributorInsightsInput) (*dynamodb.ListContributorInsightsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListContributorInsights", arg0)
	ret0, _ := ret[0].(*dynamodb.ListContributorInsightsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListContributorInsights indicates an expected call of ListContributorInsights.
func (mr *MockDynamoAPIMockRecorder) ListContributorInsights(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListContributorInsights", reflect.TypeOf((*MockDynamoAPI)(nil).ListContributorInsights), arg0)
}

// ListContributorInsightsPages mocks base method.
func (m *MockDynamoAPI) ListContributorInsightsPages(arg0 *dynamodb.ListContributorInsightsInput, arg1 func(*dynamodb.ListContributorInsightsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListContributorInsightsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListContributorInsightsPages indicates an expected call of ListContributorInsightsPages.
func (mr *MockDynamoAPIMockRecorder) ListContributorInsightsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListContributorInsightsPages", reflect.TypeOf((*MockDynamoAPI)(nil).ListContributorInsightsPages), arg0, arg1)
}

// ListContributorInsightsPagesWithContext mocks base method.
func (m *MockDynamoAPI) ListContributorInsightsPagesWithContext(arg0 context.Context, arg1 *dynamodb.ListContributorInsightsInput, arg2 func(*dynamodb.ListContributorInsightsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListContributorInsightsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListContributorInsightsPagesWithContext indicates an expected call of ListContributorInsightsPagesWithContext.
func (mr *MockDynamoAPIMockRecorder) ListContributorInsightsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListContributorInsightsPagesWithContext", reflect.TypeOf((*MockDynamoAPI)(nil).ListContributorInsightsPagesWithContext), varargs...)
}

// ListContributorInsightsRequest mocks base method.
func (m *MockDynamoAPI) ListContributorInsightsRequest(arg0 *dynamodb.ListContributorInsightsInput) (*request.Request, *dynamodb.ListContributorInsightsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListContributorInsightsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*dynamodb.ListContributorInsightsOutput)
	return ret0, ret1
}

// ListContributorInsightsRequest indicates an expected call of ListContributorInsightsRequest.
func (mr *MockDynamoAPIMockRecorder) ListContributorInsightsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListContributorInsightsRequest", reflect.TypeOf((*MockDynamoAPI)(nil).ListContributorInsightsRequest), arg0)
}

// ListContributorInsightsWithContext mocks base method.
func (m *MockDynamoAPI) ListContributorInsightsWithContext(arg0 context.Context, arg1 *dynamodb.ListContributorInsightsInput, arg2 ...request.Option) (*dynamodb.ListContributorInsightsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListContributorInsightsWithContext", varargs...)
	ret0, _ := ret[0].(*dynamodb.ListContributorInsightsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListContributorInsightsWithContext indicates an expected call of ListContributorInsightsWithContext.
func (mr *MockDynamoAPIMockRecorder) ListContributorInsightsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListContributorInsightsWithContext", reflect.TypeOf((*MockDynamoAPI)(nil).ListContributorInsightsWithContext), varargs...)
}

// ListExports mocks base method.
func (m *MockDynamoAPI) ListExports(arg0 *dynamodb.ListExportsInput) (*dynamodb.ListExportsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListExports", arg0)
	ret0, _ := ret[0].(*dynamodb.ListExportsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListExports indicates an expected call of ListExports.
func (mr *MockDynamoAPIMockRecorder) ListExports(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListExports", reflect.TypeOf((*MockDynamoAPI)(nil).ListExports), arg0)
}

// ListExportsPages mocks base method.
func (m *MockDynamoAPI) ListExportsPages(arg0 *dynamodb.ListExportsInput, arg1 func(*dynamodb.ListExportsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListExportsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListExportsPages indicates an expected call of ListExportsPages.
func (mr *MockDynamoAPIMockRecorder) ListExportsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListExportsPages", reflect.TypeOf((*MockDynamoAPI)(nil).ListExportsPages), arg0, arg1)
}

// ListExportsPagesWithContext mocks base method.
func (m *MockDynamoAPI) ListExportsPagesWithContext(arg0 context.Context, arg1 *dynamodb.ListExportsInput, arg2 func(*dynamodb.ListExportsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListExportsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListExportsPagesWithContext indicates an expected call of ListExportsPagesWithContext.
func (mr *MockDynamoAPIMockRecorder) ListExportsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListExportsPagesWithContext", reflect.TypeOf((*MockDynamoAPI)(nil).ListExportsPagesWithContext), varargs...)
}

// ListExportsRequest mocks base method.
func (m *MockDynamoAPI) ListExportsRequest(arg0 *dynamodb.ListExportsInput) (*request.Request, *dynamodb.ListExportsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListExportsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*dynamodb.ListExportsOutput)
	return ret0, ret1
}

// ListExportsRequest indicates an expected call of ListExportsRequest.
func (mr *MockDynamoAPIMockRecorder) ListExportsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListExportsRequest", reflect.TypeOf((*MockDynamoAPI)(nil).ListExportsRequest), arg0)
}

// ListExportsWithContext mocks base method.
func (m *MockDynamoAPI) ListExportsWithContext(arg0 context.Context, arg1 *dynamodb.ListExportsInput, arg2 ...request.Option) (*dynamodb.ListExportsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListExportsWithContext", varargs...)
	ret0, _ := ret[0].(*dynamodb.ListExportsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListExportsWithContext indicates an expected call of ListExportsWithContext.
func (mr *MockDynamoAPIMockRecorder) ListExportsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListExportsWithContext", reflect.TypeOf((*MockDynamoAPI)(nil).ListExportsWithContext), varargs...)
}

// ListGlobalTables mocks base method.
func (m *MockDynamoAPI) ListGlobalTables(arg0 *dynamodb.ListGlobalTablesInput) (*dynamodb.ListGlobalTablesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListGlobalTables", arg0)
	ret0, _ := ret[0].(*dynamodb.ListGlobalTablesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListGlobalTables indicates an expected call of ListGlobalTables.
func (mr *MockDynamoAPIMockRecorder) ListGlobalTables(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGlobalTables", reflect.TypeOf((*MockDynamoAPI)(nil).ListGlobalTables), arg0)
}

// ListGlobalTablesRequest mocks base method.
func (m *MockDynamoAPI) ListGlobalTablesRequest(arg0 *dynamodb.ListGlobalTablesInput) (*request.Request, *dynamodb.ListGlobalTablesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListGlobalTablesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*dynamodb.ListGlobalTablesOutput)
	return ret0, ret1
}

// ListGlobalTablesRequest indicates an expected call of ListGlobalTablesRequest.
func (mr *MockDynamoAPIMockRecorder) ListGlobalTablesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGlobalTablesRequest", reflect.TypeOf((*MockDynamoAPI)(nil).ListGlobalTablesRequest), arg0)
}

// ListGlobalTablesWithContext mocks base method.
func (m *MockDynamoAPI) ListGlobalTablesWithContext(arg0 context.Context, arg1 *dynamodb.ListGlobalTablesInput, arg2 ...request.Option) (*dynamodb.ListGlobalTablesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListGlobalTablesWithContext", varargs...)
	ret0, _ := ret[0].(*dynamodb.ListGlobalTablesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListGlobalTablesWithContext indicates an expected call of ListGlobalTablesWithContext.
func (mr *MockDynamoAPIMockRecorder) ListGlobalTablesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGlobalTablesWithContext", reflect.TypeOf((*MockDynamoAPI)(nil).ListGlobalTablesWithContext), varargs...)
}

// ListTables mocks base method.
func (m *MockDynamoAPI) ListTables(arg0 *dynamodb.ListTablesInput) (*dynamodb.ListTablesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTables", arg0)
	ret0, _ := ret[0].(*dynamodb.ListTablesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTables indicates an expected call of ListTables.
func (mr *MockDynamoAPIMockRecorder) ListTables(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTables", reflect.TypeOf((*MockDynamoAPI)(nil).ListTables), arg0)
}

// ListTablesPages mocks base method.
func (m *MockDynamoAPI) ListTablesPages(arg0 *dynamodb.ListTablesInput, arg1 func(*dynamodb.ListTablesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTablesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListTablesPages indicates an expected call of ListTablesPages.
func (mr *MockDynamoAPIMockRecorder) ListTablesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTablesPages", reflect.TypeOf((*MockDynamoAPI)(nil).ListTablesPages), arg0, arg1)
}

// ListTablesPagesWithContext mocks base method.
func (m *MockDynamoAPI) ListTablesPagesWithContext(arg0 context.Context, arg1 *dynamodb.ListTablesInput, arg2 func(*dynamodb.ListTablesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTablesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListTablesPagesWithContext indicates an expected call of ListTablesPagesWithContext.
func (mr *MockDynamoAPIMockRecorder) ListTablesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTablesPagesWithContext", reflect.TypeOf((*MockDynamoAPI)(nil).ListTablesPagesWithContext), varargs...)
}

// ListTablesRequest mocks base method.
func (m *MockDynamoAPI) ListTablesRequest(arg0 *dynamodb.ListTablesInput) (*request.Request, *dynamodb.ListTablesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTablesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*dynamodb.ListTablesOutput)
	return ret0, ret1
}

// ListTablesRequest indicates an expected call of ListTablesRequest.
func (mr *MockDynamoAPIMockRecorder) ListTablesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTablesRequest", reflect.TypeOf((*MockDynamoAPI)(nil).ListTablesRequest), arg0)
}

// ListTablesWithContext mocks base method.
func (m *MockDynamoAPI) ListTablesWithContext(arg0 context.Context, arg1 *dynamodb.ListTablesInput, arg2 ...request.Option) (*dynamodb.ListTablesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTablesWithContext", varargs...)
	ret0, _ := ret[0].(*dynamodb.ListTablesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTablesWithContext indicates an expected call of ListTablesWithContext.
func (mr *MockDynamoAPIMockRecorder) ListTablesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTablesWithContext", reflect.TypeOf((*MockDynamoAPI)(nil).ListTablesWithContext), varargs...)
}

// ListTagsOfResource mocks base method.
func (m *MockDynamoAPI) ListTagsOfResource(arg0 *dynamodb.ListTagsOfResourceInput) (*dynamodb.ListTagsOfResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsOfResource", arg0)
	ret0, _ := ret[0].(*dynamodb.ListTagsOfResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsOfResource indicates an expected call of ListTagsOfResource.
func (mr *MockDynamoAPIMockRecorder) ListTagsOfResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsOfResource", reflect.TypeOf((*MockDynamoAPI)(nil).ListTagsOfResource), arg0)
}

// ListTagsOfResourceRequest mocks base method.
func (m *MockDynamoAPI) ListTagsOfResourceRequest(arg0 *dynamodb.ListTagsOfResourceInput) (*request.Request, *dynamodb.ListTagsOfResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsOfResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*dynamodb.ListTagsOfResourceOutput)
	return ret0, ret1
}

// ListTagsOfResourceRequest indicates an expected call of ListTagsOfResourceRequest.
func (mr *MockDynamoAPIMockRecorder) ListTagsOfResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsOfResourceRequest", reflect.TypeOf((*MockDynamoAPI)(nil).ListTagsOfResourceRequest), arg0)
}

// ListTagsOfResourceWithContext mocks base method.
func (m *MockDynamoAPI) ListTagsOfResourceWithContext(arg0 context.Context, arg1 *dynamodb.ListTagsOfResourceInput, arg2 ...request.Option) (*dynamodb.ListTagsOfResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsOfResourceWithContext", varargs...)
	ret0, _ := ret[0].(*dynamodb.ListTagsOfResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsOfResourceWithContext indicates an expected call of ListTagsOfResourceWithContext.
func (mr *MockDynamoAPIMockRecorder) ListTagsOfResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsOfResourceWithContext", reflect.TypeOf((*MockDynamoAPI)(nil).ListTagsOfResourceWithContext), varargs...)
}

// PutItem mocks base method.
func (m *MockDynamoAPI) PutItem(arg0 *dynamodb.PutItemInput) (*dynamodb.PutItemOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutItem", arg0)
	ret0, _ := ret[0].(*dynamodb.PutItemOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutItem indicates an expected call of PutItem.
func (mr *MockDynamoAPIMockRecorder) PutItem(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutItem", reflect.TypeOf((*MockDynamoAPI)(nil).PutItem), arg0)
}

// PutItemRequest mocks base method.
func (m *MockDynamoAPI) PutItemRequest(arg0 *dynamodb.PutItemInput) (*request.Request, *dynamodb.PutItemOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutItemRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*dynamodb.PutItemOutput)
	return ret0, ret1
}

// PutItemRequest indicates an expected call of PutItemRequest.
func (mr *MockDynamoAPIMockRecorder) PutItemRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutItemRequest", reflect.TypeOf((*MockDynamoAPI)(nil).PutItemRequest), arg0)
}

// PutItemWithContext mocks base method.
func (m *MockDynamoAPI) PutItemWithContext(arg0 context.Context, arg1 *dynamodb.PutItemInput, arg2 ...request.Option) (*dynamodb.PutItemOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutItemWithContext", varargs...)
	ret0, _ := ret[0].(*dynamodb.PutItemOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutItemWithContext indicates an expected call of PutItemWithContext.
func (mr *MockDynamoAPIMockRecorder) PutItemWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutItemWithContext", reflect.TypeOf((*MockDynamoAPI)(nil).PutItemWithContext), varargs...)
}

// Query mocks base method.
func (m *MockDynamoAPI) Query(arg0 *dynamodb.QueryInput) (*dynamodb.QueryOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Query", arg0)
	ret0, _ := ret[0].(*dynamodb.QueryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Query indicates an expected call of Query.
func (mr *MockDynamoAPIMockRecorder) Query(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockDynamoAPI)(nil).Query), arg0)
}

// QueryPages mocks base method.
func (m *MockDynamoAPI) QueryPages(arg0 *dynamodb.QueryInput, arg1 func(*dynamodb.QueryOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// QueryPages indicates an expected call of QueryPages.
func (mr *MockDynamoAPIMockRecorder) QueryPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryPages", reflect.TypeOf((*MockDynamoAPI)(nil).QueryPages), arg0, arg1)
}

// QueryPagesWithContext mocks base method.
func (m *MockDynamoAPI) QueryPagesWithContext(arg0 context.Context, arg1 *dynamodb.QueryInput, arg2 func(*dynamodb.QueryOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// QueryPagesWithContext indicates an expected call of QueryPagesWithContext.
func (mr *MockDynamoAPIMockRecorder) QueryPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryPagesWithContext", reflect.TypeOf((*MockDynamoAPI)(nil).QueryPagesWithContext), varargs...)
}

// QueryRequest mocks base method.
func (m *MockDynamoAPI) QueryRequest(arg0 *dynamodb.QueryInput) (*request.Request, *dynamodb.QueryOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*dynamodb.QueryOutput)
	return ret0, ret1
}

// QueryRequest indicates an expected call of QueryRequest.
func (mr *MockDynamoAPIMockRecorder) QueryRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRequest", reflect.TypeOf((*MockDynamoAPI)(nil).QueryRequest), arg0)
}

// QueryWithContext mocks base method.
func (m *MockDynamoAPI) QueryWithContext(arg0 context.Context, arg1 *dynamodb.QueryInput, arg2 ...request.Option) (*dynamodb.QueryOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryWithContext", varargs...)
	ret0, _ := ret[0].(*dynamodb.QueryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryWithContext indicates an expected call of QueryWithContext.
func (mr *MockDynamoAPIMockRecorder) QueryWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryWithContext", reflect.TypeOf((*MockDynamoAPI)(nil).QueryWithContext), varargs...)
}

// RestoreTableFromBackup mocks base method.
func (m *MockDynamoAPI) RestoreTableFromBackup(arg0 *dynamodb.RestoreTableFromBackupInput) (*dynamodb.RestoreTableFromBackupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreTableFromBackup", arg0)
	ret0, _ := ret[0].(*dynamodb.RestoreTableFromBackupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RestoreTableFromBackup indicates an expected call of RestoreTableFromBackup.
func (mr *MockDynamoAPIMockRecorder) RestoreTableFromBackup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreTableFromBackup", reflect.TypeOf((*MockDynamoAPI)(nil).RestoreTableFromBackup), arg0)
}

// RestoreTableFromBackupRequest mocks base method.
func (m *MockDynamoAPI) RestoreTableFromBackupRequest(arg0 *dynamodb.RestoreTableFromBackupInput) (*request.Request, *dynamodb.RestoreTableFromBackupOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreTableFromBackupRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*dynamodb.RestoreTableFromBackupOutput)
	return ret0, ret1
}

// RestoreTableFromBackupRequest indicates an expected call of RestoreTableFromBackupRequest.
func (mr *MockDynamoAPIMockRecorder) RestoreTableFromBackupRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreTableFromBackupRequest", reflect.TypeOf((*MockDynamoAPI)(nil).RestoreTableFromBackupRequest), arg0)
}

// RestoreTableFromBackupWithContext mocks base method.
func (m *MockDynamoAPI) RestoreTableFromBackupWithContext(arg0 context.Context, arg1 *dynamodb.RestoreTableFromBackupInput, arg2 ...request.Option) (*dynamodb.RestoreTableFromBackupOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RestoreTableFromBackupWithContext", varargs...)
	ret0, _ := ret[0].(*dynamodb.RestoreTableFromBackupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RestoreTableFromBackupWithContext indicates an expected call of RestoreTableFromBackupWithContext.
func (mr *MockDynamoAPIMockRecorder) RestoreTableFromBackupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreTableFromBackupWithContext", reflect.TypeOf((*MockDynamoAPI)(nil).RestoreTableFromBackupWithContext), varargs...)
}

// RestoreTableToPointInTime mocks base method.
func (m *MockDynamoAPI) RestoreTableToPointInTime(arg0 *dynamodb.RestoreTableToPointInTimeInput) (*dynamodb.RestoreTableToPointInTimeOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreTableToPointInTime", arg0)
	ret0, _ := ret[0].(*dynamodb.RestoreTableToPointInTimeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RestoreTableToPointInTime indicates an expected call of RestoreTableToPointInTime.
func (mr *MockDynamoAPIMockRecorder) RestoreTableToPointInTime(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreTableToPointInTime", reflect.TypeOf((*MockDynamoAPI)(nil).RestoreTableToPointInTime), arg0)
}

// RestoreTableToPointInTimeRequest mocks base method.
func (m *MockDynamoAPI) RestoreTableToPointInTimeRequest(arg0 *dynamodb.RestoreTableToPointInTimeInput) (*request.Request, *dynamodb.RestoreTableToPointInTimeOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreTableToPointInTimeRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*dynamodb.RestoreTableToPointInTimeOutput)
	return ret0, ret1
}

// RestoreTableToPointInTimeRequest indicates an expected call of RestoreTableToPointInTimeRequest.
func (mr *MockDynamoAPIMockRecorder) RestoreTableToPointInTimeRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreTableToPointInTimeRequest", reflect.TypeOf((*MockDynamoAPI)(nil).RestoreTableToPointInTimeRequest), arg0)
}

// RestoreTableToPointInTimeWithContext mocks base method.
func (m *MockDynamoAPI) RestoreTableToPointInTimeWithContext(arg0 context.Context, arg1 *dynamodb.RestoreTableToPointInTimeInput, arg2 ...request.Option) (*dynamodb.RestoreTableToPointInTimeOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RestoreTableToPointInTimeWithContext", varargs...)
	ret0, _ := ret[0].(*dynamodb.RestoreTableToPointInTimeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RestoreTableToPointInTimeWithContext indicates an expected call of RestoreTableToPointInTimeWithContext.
func (mr *MockDynamoAPIMockRecorder) RestoreTableToPointInTimeWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreTableToPointInTimeWithContext", reflect.TypeOf((*MockDynamoAPI)(nil).RestoreTableToPointInTimeWithContext), varargs...)
}

// Scan mocks base method.
func (m *MockDynamoAPI) Scan(arg0 *dynamodb.ScanInput) (*dynamodb.ScanOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Scan", arg0)
	ret0, _ := ret[0].(*dynamodb.ScanOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Scan indicates an expected call of Scan.
func (mr *MockDynamoAPIMockRecorder) Scan(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scan", reflect.TypeOf((*MockDynamoAPI)(nil).Scan), arg0)
}

// ScanPages mocks base method.
func (m *MockDynamoAPI) ScanPages(arg0 *dynamodb.ScanInput, arg1 func(*dynamodb.ScanOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScanPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ScanPages indicates an expected call of ScanPages.
func (mr *MockDynamoAPIMockRecorder) ScanPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScanPages", reflect.TypeOf((*MockDynamoAPI)(nil).ScanPages), arg0, arg1)
}

// ScanPagesWithContext mocks base method.
func (m *MockDynamoAPI) ScanPagesWithContext(arg0 context.Context, arg1 *dynamodb.ScanInput, arg2 func(*dynamodb.ScanOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ScanPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ScanPagesWithContext indicates an expected call of ScanPagesWithContext.
func (mr *MockDynamoAPIMockRecorder) ScanPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScanPagesWithContext", reflect.TypeOf((*MockDynamoAPI)(nil).ScanPagesWithContext), varargs...)
}

// ScanRequest mocks base method.
func (m *MockDynamoAPI) ScanRequest(arg0 *dynamodb.ScanInput) (*request.Request, *dynamodb.ScanOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScanRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*dynamodb.ScanOutput)
	return ret0, ret1
}

// ScanRequest indicates an expected call of ScanRequest.
func (mr *MockDynamoAPIMockRecorder) ScanRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScanRequest", reflect.TypeOf((*MockDynamoAPI)(nil).ScanRequest), arg0)
}

// ScanWithContext mocks base method.
func (m *MockDynamoAPI) ScanWithContext(arg0 context.Context, arg1 *dynamodb.ScanInput, arg2 ...request.Option) (*dynamodb.ScanOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ScanWithContext", varargs...)
	ret0, _ := ret[0].(*dynamodb.ScanOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScanWithContext indicates an expected call of ScanWithContext.
func (mr *MockDynamoAPIMockRecorder) ScanWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScanWithContext", reflect.TypeOf((*MockDynamoAPI)(nil).ScanWithContext), varargs...)
}

// TagResource mocks base method.
func (m *MockDynamoAPI) TagResource(arg0 *dynamodb.TagResourceInput) (*dynamodb.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResource", arg0)
	ret0, _ := ret[0].(*dynamodb.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource.
func (mr *MockDynamoAPIMockRecorder) TagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockDynamoAPI)(nil).TagResource), arg0)
}

// TagResourceRequest mocks base method.
func (m *MockDynamoAPI) TagResourceRequest(arg0 *dynamodb.TagResourceInput) (*request.Request, *dynamodb.TagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*dynamodb.TagResourceOutput)
	return ret0, ret1
}

// TagResourceRequest indicates an expected call of TagResourceRequest.
func (mr *MockDynamoAPIMockRecorder) TagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceRequest", reflect.TypeOf((*MockDynamoAPI)(nil).TagResourceRequest), arg0)
}

// TagResourceWithContext mocks base method.
func (m *MockDynamoAPI) TagResourceWithContext(arg0 context.Context, arg1 *dynamodb.TagResourceInput, arg2 ...request.Option) (*dynamodb.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*dynamodb.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResourceWithContext indicates an expected call of TagResourceWithContext.
func (mr *MockDynamoAPIMockRecorder) TagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceWithContext", reflect.TypeOf((*MockDynamoAPI)(nil).TagResourceWithContext), varargs...)
}

// TransactGetItems mocks base method.
func (m *MockDynamoAPI) TransactGetItems(arg0 *dynamodb.TransactGetItemsInput) (*dynamodb.TransactGetItemsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransactGetItems", arg0)
	ret0, _ := ret[0].(*dynamodb.TransactGetItemsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TransactGetItems indicates an expected call of TransactGetItems.
func (mr *MockDynamoAPIMockRecorder) TransactGetItems(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransactGetItems", reflect.TypeOf((*MockDynamoAPI)(nil).TransactGetItems), arg0)
}

// TransactGetItemsRequest mocks base method.
func (m *MockDynamoAPI) TransactGetItemsRequest(arg0 *dynamodb.TransactGetItemsInput) (*request.Request, *dynamodb.TransactGetItemsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransactGetItemsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*dynamodb.TransactGetItemsOutput)
	return ret0, ret1
}

// TransactGetItemsRequest indicates an expected call of TransactGetItemsRequest.
func (mr *MockDynamoAPIMockRecorder) TransactGetItemsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransactGetItemsRequest", reflect.TypeOf((*MockDynamoAPI)(nil).TransactGetItemsRequest), arg0)
}

// TransactGetItemsWithContext mocks base method.
func (m *MockDynamoAPI) TransactGetItemsWithContext(arg0 context.Context, arg1 *dynamodb.TransactGetItemsInput, arg2 ...request.Option) (*dynamodb.TransactGetItemsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TransactGetItemsWithContext", varargs...)
	ret0, _ := ret[0].(*dynamodb.TransactGetItemsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TransactGetItemsWithContext indicates an expected call of TransactGetItemsWithContext.
func (mr *MockDynamoAPIMockRecorder) TransactGetItemsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransactGetItemsWithContext", reflect.TypeOf((*MockDynamoAPI)(nil).TransactGetItemsWithContext), varargs...)
}

// TransactWriteItems mocks base method.
func (m *MockDynamoAPI) TransactWriteItems(arg0 *dynamodb.TransactWriteItemsInput) (*dynamodb.TransactWriteItemsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransactWriteItems", arg0)
	ret0, _ := ret[0].(*dynamodb.TransactWriteItemsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TransactWriteItems indicates an expected call of TransactWriteItems.
func (mr *MockDynamoAPIMockRecorder) TransactWriteItems(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransactWriteItems", reflect.TypeOf((*MockDynamoAPI)(nil).TransactWriteItems), arg0)
}

// TransactWriteItemsRequest mocks base method.
func (m *MockDynamoAPI) TransactWriteItemsRequest(arg0 *dynamodb.TransactWriteItemsInput) (*request.Request, *dynamodb.TransactWriteItemsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransactWriteItemsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*dynamodb.TransactWriteItemsOutput)
	return ret0, ret1
}

// TransactWriteItemsRequest indicates an expected call of TransactWriteItemsRequest.
func (mr *MockDynamoAPIMockRecorder) TransactWriteItemsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransactWriteItemsRequest", reflect.TypeOf((*MockDynamoAPI)(nil).TransactWriteItemsRequest), arg0)
}

// TransactWriteItemsWithContext mocks base method.
func (m *MockDynamoAPI) TransactWriteItemsWithContext(arg0 context.Context, arg1 *dynamodb.TransactWriteItemsInput, arg2 ...request.Option) (*dynamodb.TransactWriteItemsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TransactWriteItemsWithContext", varargs...)
	ret0, _ := ret[0].(*dynamodb.TransactWriteItemsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TransactWriteItemsWithContext indicates an expected call of TransactWriteItemsWithContext.
func (mr *MockDynamoAPIMockRecorder) TransactWriteItemsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransactWriteItemsWithContext", reflect.TypeOf((*MockDynamoAPI)(nil).TransactWriteItemsWithContext), varargs...)
}

// UntagResource mocks base method.
func (m *MockDynamoAPI) UntagResource(arg0 *dynamodb.UntagResourceInput) (*dynamodb.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResource", arg0)
	ret0, _ := ret[0].(*dynamodb.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResource indicates an expected call of UntagResource.
func (mr *MockDynamoAPIMockRecorder) UntagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResource", reflect.TypeOf((*MockDynamoAPI)(nil).UntagResource), arg0)
}

// UntagResourceRequest mocks base method.
func (m *MockDynamoAPI) UntagResourceRequest(arg0 *dynamodb.UntagResourceInput) (*request.Request, *dynamodb.UntagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*dynamodb.UntagResourceOutput)
	return ret0, ret1
}

// UntagResourceRequest indicates an expected call of UntagResourceRequest.
func (mr *MockDynamoAPIMockRecorder) UntagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceRequest", reflect.TypeOf((*MockDynamoAPI)(nil).UntagResourceRequest), arg0)
}

// UntagResourceWithContext mocks base method.
func (m *MockDynamoAPI) UntagResourceWithContext(arg0 context.Context, arg1 *dynamodb.UntagResourceInput, arg2 ...request.Option) (*dynamodb.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*dynamodb.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResourceWithContext indicates an expected call of UntagResourceWithContext.
func (mr *MockDynamoAPIMockRecorder) UntagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceWithContext", reflect.TypeOf((*MockDynamoAPI)(nil).UntagResourceWithContext), varargs...)
}

// UpdateContinuousBackups mocks base method.
func (m *MockDynamoAPI) UpdateContinuousBackups(arg0 *dynamodb.UpdateContinuousBackupsInput) (*dynamodb.UpdateContinuousBackupsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateContinuousBackups", arg0)
	ret0, _ := ret[0].(*dynamodb.UpdateContinuousBackupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateContinuousBackups indicates an expected call of UpdateContinuousBackups.
func (mr *MockDynamoAPIMockRecorder) UpdateContinuousBackups(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateContinuousBackups", reflect.TypeOf((*MockDynamoAPI)(nil).UpdateContinuousBackups), arg0)
}

// UpdateContinuousBackupsRequest mocks base method.
func (m *MockDynamoAPI) UpdateContinuousBackupsRequest(arg0 *dynamodb.UpdateContinuousBackupsInput) (*request.Request, *dynamodb.UpdateContinuousBackupsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateContinuousBackupsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*dynamodb.UpdateContinuousBackupsOutput)
	return ret0, ret1
}

// UpdateContinuousBackupsRequest indicates an expected call of UpdateContinuousBackupsRequest.
func (mr *MockDynamoAPIMockRecorder) UpdateContinuousBackupsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateContinuousBackupsRequest", reflect.TypeOf((*MockDynamoAPI)(nil).UpdateContinuousBackupsRequest), arg0)
}

// UpdateContinuousBackupsWithContext mocks base method.
func (m *MockDynamoAPI) UpdateContinuousBackupsWithContext(arg0 context.Context, arg1 *dynamodb.UpdateContinuousBackupsInput, arg2 ...request.Option) (*dynamodb.UpdateContinuousBackupsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateContinuousBackupsWithContext", varargs...)
	ret0, _ := ret[0].(*dynamodb.UpdateContinuousBackupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateContinuousBackupsWithContext indicates an expected call of UpdateContinuousBackupsWithContext.
func (mr *MockDynamoAPIMockRecorder) UpdateContinuousBackupsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateContinuousBackupsWithContext", reflect.TypeOf((*MockDynamoAPI)(nil).UpdateContinuousBackupsWithContext), varargs...)
}

// UpdateContributorInsights mocks base method.
func (m *MockDynamoAPI) UpdateContributorInsights(arg0 *dynamodb.UpdateContributorInsightsInput) (*dynamodb.UpdateContributorInsightsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateContributorInsights", arg0)
	ret0, _ := ret[0].(*dynamodb.UpdateContributorInsightsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateContributorInsights indicates an expected call of UpdateContributorInsights.
func (mr *MockDynamoAPIMockRecorder) UpdateContributorInsights(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateContributorInsights", reflect.TypeOf((*MockDynamoAPI)(nil).UpdateContributorInsights), arg0)
}

// UpdateContributorInsightsRequest mocks base method.
func (m *MockDynamoAPI) UpdateContributorInsightsRequest(arg0 *dynamodb.UpdateContributorInsightsInput) (*request.Request, *dynamodb.UpdateContributorInsightsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateContributorInsightsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*dynamodb.UpdateContributorInsightsOutput)
	return ret0, ret1
}

// UpdateContributorInsightsRequest indicates an expected call of UpdateContributorInsightsRequest.
func (mr *MockDynamoAPIMockRecorder) UpdateContributorInsightsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateContributorInsightsRequest", reflect.TypeOf((*MockDynamoAPI)(nil).UpdateContributorInsightsRequest), arg0)
}

// UpdateContributorInsightsWithContext mocks base method.
func (m *MockDynamoAPI) UpdateContributorInsightsWithContext(arg0 context.Context, arg1 *dynamodb.UpdateContributorInsightsInput, arg2 ...request.Option) (*dynamodb.UpdateContributorInsightsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateContributorInsightsWithContext", varargs...)
	ret0, _ := ret[0].(*dynamodb.UpdateContributorInsightsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateContributorInsightsWithContext indicates an expected call of UpdateContributorInsightsWithContext.
func (mr *MockDynamoAPIMockRecorder) UpdateContributorInsightsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateContributorInsightsWithContext", reflect.TypeOf((*MockDynamoAPI)(nil).UpdateContributorInsightsWithContext), varargs...)
}

// UpdateGlobalTable mocks base method.
func (m *MockDynamoAPI) UpdateGlobalTable(arg0 *dynamodb.UpdateGlobalTableInput) (*dynamodb.UpdateGlobalTableOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGlobalTable", arg0)
	ret0, _ := ret[0].(*dynamodb.UpdateGlobalTableOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateGlobalTable indicates an expected call of UpdateGlobalTable.
func (mr *MockDynamoAPIMockRecorder) UpdateGlobalTable(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGlobalTable", reflect.TypeOf((*MockDynamoAPI)(nil).UpdateGlobalTable), arg0)
}

// UpdateGlobalTableRequest mocks base method.
func (m *MockDynamoAPI) UpdateGlobalTableRequest(arg0 *dynamodb.UpdateGlobalTableInput) (*request.Request, *dynamodb.UpdateGlobalTableOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGlobalTableRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*dynamodb.UpdateGlobalTableOutput)
	return ret0, ret1
}

// UpdateGlobalTableRequest indicates an expected call of UpdateGlobalTableRequest.
func (mr *MockDynamoAPIMockRecorder) UpdateGlobalTableRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGlobalTableRequest", reflect.TypeOf((*MockDynamoAPI)(nil).UpdateGlobalTableRequest), arg0)
}

// UpdateGlobalTableSettings mocks base method.
func (m *MockDynamoAPI) UpdateGlobalTableSettings(arg0 *dynamodb.UpdateGlobalTableSettingsInput) (*dynamodb.UpdateGlobalTableSettingsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGlobalTableSettings", arg0)
	ret0, _ := ret[0].(*dynamodb.UpdateGlobalTableSettingsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateGlobalTableSettings indicates an expected call of UpdateGlobalTableSettings.
func (mr *MockDynamoAPIMockRecorder) UpdateGlobalTableSettings(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGlobalTableSettings", reflect.TypeOf((*MockDynamoAPI)(nil).UpdateGlobalTableSettings), arg0)
}

// UpdateGlobalTableSettingsRequest mocks base method.
func (m *MockDynamoAPI) UpdateGlobalTableSettingsRequest(arg0 *dynamodb.UpdateGlobalTableSettingsInput) (*request.Request, *dynamodb.UpdateGlobalTableSettingsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGlobalTableSettingsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*dynamodb.UpdateGlobalTableSettingsOutput)
	return ret0, ret1
}

// UpdateGlobalTableSettingsRequest indicates an expected call of UpdateGlobalTableSettingsRequest.
func (mr *MockDynamoAPIMockRecorder) UpdateGlobalTableSettingsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGlobalTableSettingsRequest", reflect.TypeOf((*MockDynamoAPI)(nil).UpdateGlobalTableSettingsRequest), arg0)
}

// UpdateGlobalTableSettingsWithContext mocks base method.
func (m *MockDynamoAPI) UpdateGlobalTableSettingsWithContext(arg0 context.Context, arg1 *dynamodb.UpdateGlobalTableSettingsInput, arg2 ...request.Option) (*dynamodb.UpdateGlobalTableSettingsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateGlobalTableSettingsWithContext", varargs...)
	ret0, _ := ret[0].(*dynamodb.UpdateGlobalTableSettingsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateGlobalTableSettingsWithContext indicates an expected call of UpdateGlobalTableSettingsWithContext.
func (mr *MockDynamoAPIMockRecorder) UpdateGlobalTableSettingsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGlobalTableSettingsWithContext", reflect.TypeOf((*MockDynamoAPI)(nil).UpdateGlobalTableSettingsWithContext), varargs...)
}

// UpdateGlobalTableWithContext mocks base method.
func (m *MockDynamoAPI) UpdateGlobalTableWithContext(arg0 context.Context, arg1 *dynamodb.UpdateGlobalTableInput, arg2 ...request.Option) (*dynamodb.UpdateGlobalTableOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateGlobalTableWithContext", varargs...)
	ret0, _ := ret[0].(*dynamodb.UpdateGlobalTableOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateGlobalTableWithContext indicates an expected call of UpdateGlobalTableWithContext.
func (mr *MockDynamoAPIMockRecorder) UpdateGlobalTableWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGlobalTableWithContext", reflect.TypeOf((*MockDynamoAPI)(nil).UpdateGlobalTableWithContext), varargs...)
}

// UpdateItem mocks base method.
func (m *MockDynamoAPI) UpdateItem(arg0 *dynamodb.UpdateItemInput) (*dynamodb.UpdateItemOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateItem", arg0)
	ret0, _ := ret[0].(*dynamodb.UpdateItemOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateItem indicates an expected call of UpdateItem.
func (mr *MockDynamoAPIMockRecorder) UpdateItem(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateItem", reflect.TypeOf((*MockDynamoAPI)(nil).UpdateItem), arg0)
}

// UpdateItemRequest mocks base method.
func (m *MockDynamoAPI) UpdateItemRequest(arg0 *dynamodb.UpdateItemInput) (*request.Request, *dynamodb.UpdateItemOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateItemRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*dynamodb.UpdateItemOutput)
	return ret0, ret1
}

// UpdateItemRequest indicates an expected call of UpdateItemRequest.
func (mr *MockDynamoAPIMockRecorder) UpdateItemRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateItemRequest", reflect.TypeOf((*MockDynamoAPI)(nil).UpdateItemRequest), arg0)
}

// UpdateItemWithContext mocks base method.
func (m *MockDynamoAPI) UpdateItemWithContext(arg0 context.Context, arg1 *dynamodb.UpdateItemInput, arg2 ...request.Option) (*dynamodb.UpdateItemOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateItemWithContext", varargs...)
	ret0, _ := ret[0].(*dynamodb.UpdateItemOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateItemWithContext indicates an expected call of UpdateItemWithContext.
func (mr *MockDynamoAPIMockRecorder) UpdateItemWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateItemWithContext", reflect.TypeOf((*MockDynamoAPI)(nil).UpdateItemWithContext), varargs...)
}

// UpdateTable mocks base method.
func (m *MockDynamoAPI) UpdateTable(arg0 *dynamodb.UpdateTableInput) (*dynamodb.UpdateTableOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTable", arg0)
	ret0, _ := ret[0].(*dynamodb.UpdateTableOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTable indicates an expected call of UpdateTable.
func (mr *MockDynamoAPIMockRecorder) UpdateTable(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTable", reflect.TypeOf((*MockDynamoAPI)(nil).UpdateTable), arg0)
}

// UpdateTableReplicaAutoScaling mocks base method.
func (m *MockDynamoAPI) UpdateTableReplicaAutoScaling(arg0 *dynamodb.UpdateTableReplicaAutoScalingInput) (*dynamodb.UpdateTableReplicaAutoScalingOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTableReplicaAutoScaling", arg0)
	ret0, _ := ret[0].(*dynamodb.UpdateTableReplicaAutoScalingOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTableReplicaAutoScaling indicates an expected call of UpdateTableReplicaAutoScaling.
func (mr *MockDynamoAPIMockRecorder) UpdateTableReplicaAutoScaling(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTableReplicaAutoScaling", reflect.TypeOf((*MockDynamoAPI)(nil).UpdateTableReplicaAutoScaling), arg0)
}

// UpdateTableReplicaAutoScalingRequest mocks base method.
func (m *MockDynamoAPI) UpdateTableReplicaAutoScalingRequest(arg0 *dynamodb.UpdateTableReplicaAutoScalingInput) (*request.Request, *dynamodb.UpdateTableReplicaAutoScalingOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTableReplicaAutoScalingRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*dynamodb.UpdateTableReplicaAutoScalingOutput)
	return ret0, ret1
}

// UpdateTableReplicaAutoScalingRequest indicates an expected call of UpdateTableReplicaAutoScalingRequest.
func (mr *MockDynamoAPIMockRecorder) UpdateTableReplicaAutoScalingRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTableReplicaAutoScalingRequest", reflect.TypeOf((*MockDynamoAPI)(nil).UpdateTableReplicaAutoScalingRequest), arg0)
}

// UpdateTableReplicaAutoScalingWithContext mocks base method.
func (m *MockDynamoAPI) UpdateTableReplicaAutoScalingWithContext(arg0 context.Context, arg1 *dynamodb.UpdateTableReplicaAutoScalingInput, arg2 ...request.Option) (*dynamodb.UpdateTableReplicaAutoScalingOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateTableReplicaAutoScalingWithContext", varargs...)
	ret0, _ := ret[0].(*dynamodb.UpdateTableReplicaAutoScalingOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTableReplicaAutoScalingWithContext indicates an expected call of UpdateTableReplicaAutoScalingWithContext.
func (mr *MockDynamoAPIMockRecorder) UpdateTableReplicaAutoScalingWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTableReplicaAutoScalingWithContext", reflect.TypeOf((*MockDynamoAPI)(nil).UpdateTableReplicaAutoScalingWithContext), varargs...)
}

// UpdateTableRequest mocks base method.
func (m *MockDynamoAPI) UpdateTableRequest(arg0 *dynamodb.UpdateTableInput) (*request.Request, *dynamodb.UpdateTableOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTableRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*dynamodb.UpdateTableOutput)
	return ret0, ret1
}

// UpdateTableRequest indicates an expected call of UpdateTableRequest.
func (mr *MockDynamoAPIMockRecorder) UpdateTableRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTableRequest", reflect.TypeOf((*MockDynamoAPI)(nil).UpdateTableRequest), arg0)
}

// UpdateTableWithContext mocks base method.
func (m *MockDynamoAPI) UpdateTableWithContext(arg0 context.Context, arg1 *dynamodb.UpdateTableInput, arg2 ...request.Option) (*dynamodb.UpdateTableOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateTableWithContext", varargs...)
	ret0, _ := ret[0].(*dynamodb.UpdateTableOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTableWithContext indicates an expected call of UpdateTableWithContext.
func (mr *MockDynamoAPIMockRecorder) UpdateTableWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTableWithContext", reflect.TypeOf((*MockDynamoAPI)(nil).UpdateTableWithContext), varargs...)
}

// UpdateTimeToLive mocks base method.
func (m *MockDynamoAPI) UpdateTimeToLive(arg0 *dynamodb.UpdateTimeToLiveInput) (*dynamodb.UpdateTimeToLiveOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTimeToLive", arg0)
	ret0, _ := ret[0].(*dynamodb.UpdateTimeToLiveOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTimeToLive indicates an expected call of UpdateTimeToLive.
func (mr *MockDynamoAPIMockRecorder) UpdateTimeToLive(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTimeToLive", reflect.TypeOf((*MockDynamoAPI)(nil).UpdateTimeToLive), arg0)
}

// UpdateTimeToLiveRequest mocks base method.
func (m *MockDynamoAPI) UpdateTimeToLiveRequest(arg0 *dynamodb.UpdateTimeToLiveInput) (*request.Request, *dynamodb.UpdateTimeToLiveOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTimeToLiveRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*dynamodb.UpdateTimeToLiveOutput)
	return ret0, ret1
}

// UpdateTimeToLiveRequest indicates an expected call of UpdateTimeToLiveRequest.
func (mr *MockDynamoAPIMockRecorder) UpdateTimeToLiveRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTimeToLiveRequest", reflect.TypeOf((*MockDynamoAPI)(nil).UpdateTimeToLiveRequest), arg0)
}

// UpdateTimeToLiveWithContext mocks base method.
func (m *MockDynamoAPI) UpdateTimeToLiveWithContext(arg0 context.Context, arg1 *dynamodb.UpdateTimeToLiveInput, arg2 ...request.Option) (*dynamodb.UpdateTimeToLiveOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateTimeToLiveWithContext", varargs...)
	ret0, _ := ret[0].(*dynamodb.UpdateTimeToLiveOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTimeToLiveWithContext indicates an expected call of UpdateTimeToLiveWithContext.
func (mr *MockDynamoAPIMockRecorder) UpdateTimeToLiveWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTimeToLiveWithContext", reflect.TypeOf((*MockDynamoAPI)(nil).UpdateTimeToLiveWithContext), varargs...)
}

// WaitUntilTableExists mocks base method.
func (m *MockDynamoAPI) WaitUntilTableExists(arg0 *dynamodb.DescribeTableInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitUntilTableExists", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilTableExists indicates an expected call of WaitUntilTableExists.
func (mr *MockDynamoAPIMockRecorder) WaitUntilTableExists(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilTableExists", reflect.TypeOf((*MockDynamoAPI)(nil).WaitUntilTableExists), arg0)
}

// WaitUntilTableExistsWithContext mocks base method.
func (m *MockDynamoAPI) WaitUntilTableExistsWithContext(arg0 context.Context, arg1 *dynamodb.DescribeTableInput, arg2 ...request.WaiterOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WaitUntilTableExistsWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilTableExistsWithContext indicates an expected call of WaitUntilTableExistsWithContext.
func (mr *MockDynamoAPIMockRecorder) WaitUntilTableExistsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilTableExistsWithContext", reflect.TypeOf((*MockDynamoAPI)(nil).WaitUntilTableExistsWithContext), varargs...)
}

// WaitUntilTableNotExists mocks base method.
func (m *MockDynamoAPI) WaitUntilTableNotExists(arg0 *dynamodb.DescribeTableInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitUntilTableNotExists", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilTableNotExists indicates an expected call of WaitUntilTableNotExists.
func (mr *MockDynamoAPIMockRecorder) WaitUntilTableNotExists(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilTableNotExists", reflect.TypeOf((*MockDynamoAPI)(nil).WaitUntilTableNotExists), arg0)
}

// WaitUntilTableNotExistsWithContext mocks base method.
func (m *MockDynamoAPI) WaitUntilTableNotExistsWithContext(arg0 context.Context, arg1 *dynamodb.DescribeTableInput, arg2 ...request.WaiterOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WaitUntilTableNotExistsWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilTableNotExistsWithContext indicates an expected call of WaitUntilTableNotExistsWithContext.
func (mr *MockDynamoAPIMockRecorder) WaitUntilTableNotExistsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilTableNotExistsWithContext", reflect.TypeOf((*MockDynamoAPI)(nil).WaitUntilTableNotExistsWithContext), varargs...)
}
