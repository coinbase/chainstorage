// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coinbase/chainstorage/internal/storage/metastorage (interfaces: MetaStorage,EventStorage,BlockStorage)

// Package metastoragemocks is a generated GoMock package.
package metastoragemocks

import (
	context "context"
	reflect "reflect"

	model "github.com/coinbase/chainstorage/internal/storage/metastorage/model"
	chainstorage "github.com/coinbase/chainstorage/protos/coinbase/chainstorage"
	gomock "github.com/golang/mock/gomock"
)

// MockMetaStorage is a mock of MetaStorage interface.
type MockMetaStorage struct {
	ctrl     *gomock.Controller
	recorder *MockMetaStorageMockRecorder
}

// MockMetaStorageMockRecorder is the mock recorder for MockMetaStorage.
type MockMetaStorageMockRecorder struct {
	mock *MockMetaStorage
}

// NewMockMetaStorage creates a new mock instance.
func NewMockMetaStorage(ctrl *gomock.Controller) *MockMetaStorage {
	mock := &MockMetaStorage{ctrl: ctrl}
	mock.recorder = &MockMetaStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetaStorage) EXPECT() *MockMetaStorageMockRecorder {
	return m.recorder
}

// AddEvents mocks base method.
func (m *MockMetaStorage) AddEvents(arg0 context.Context, arg1 uint32, arg2 []*model.BlockEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddEvents", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddEvents indicates an expected call of AddEvents.
func (mr *MockMetaStorageMockRecorder) AddEvents(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEvents", reflect.TypeOf((*MockMetaStorage)(nil).AddEvents), arg0, arg1, arg2)
}

// GetBlockByHash mocks base method.
func (m *MockMetaStorage) GetBlockByHash(arg0 context.Context, arg1 uint32, arg2 uint64, arg3 string) (*chainstorage.BlockMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockByHash", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*chainstorage.BlockMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockByHash indicates an expected call of GetBlockByHash.
func (mr *MockMetaStorageMockRecorder) GetBlockByHash(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockByHash", reflect.TypeOf((*MockMetaStorage)(nil).GetBlockByHash), arg0, arg1, arg2, arg3)
}

// GetBlockByHeight mocks base method.
func (m *MockMetaStorage) GetBlockByHeight(arg0 context.Context, arg1 uint32, arg2 uint64) (*chainstorage.BlockMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockByHeight", arg0, arg1, arg2)
	ret0, _ := ret[0].(*chainstorage.BlockMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockByHeight indicates an expected call of GetBlockByHeight.
func (mr *MockMetaStorageMockRecorder) GetBlockByHeight(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockByHeight", reflect.TypeOf((*MockMetaStorage)(nil).GetBlockByHeight), arg0, arg1, arg2)
}

// GetBlocksByHeightRange mocks base method.
func (m *MockMetaStorage) GetBlocksByHeightRange(arg0 context.Context, arg1 uint32, arg2, arg3 uint64) ([]*chainstorage.BlockMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlocksByHeightRange", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*chainstorage.BlockMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlocksByHeightRange indicates an expected call of GetBlocksByHeightRange.
func (mr *MockMetaStorageMockRecorder) GetBlocksByHeightRange(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlocksByHeightRange", reflect.TypeOf((*MockMetaStorage)(nil).GetBlocksByHeightRange), arg0, arg1, arg2, arg3)
}

// GetEventByEventId mocks base method.
func (m *MockMetaStorage) GetEventByEventId(arg0 context.Context, arg1 uint32, arg2 int64) (*model.EventEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEventByEventId", arg0, arg1, arg2)
	ret0, _ := ret[0].(*model.EventEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEventByEventId indicates an expected call of GetEventByEventId.
func (mr *MockMetaStorageMockRecorder) GetEventByEventId(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventByEventId", reflect.TypeOf((*MockMetaStorage)(nil).GetEventByEventId), arg0, arg1, arg2)
}

// GetEventsAfterEventId mocks base method.
func (m *MockMetaStorage) GetEventsAfterEventId(arg0 context.Context, arg1 uint32, arg2 int64, arg3 uint64) ([]*model.EventEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEventsAfterEventId", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*model.EventEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEventsAfterEventId indicates an expected call of GetEventsAfterEventId.
func (mr *MockMetaStorageMockRecorder) GetEventsAfterEventId(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventsAfterEventId", reflect.TypeOf((*MockMetaStorage)(nil).GetEventsAfterEventId), arg0, arg1, arg2, arg3)
}

// GetEventsByBlockHeight mocks base method.
func (m *MockMetaStorage) GetEventsByBlockHeight(arg0 context.Context, arg1 uint32, arg2 uint64) ([]*model.EventEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEventsByBlockHeight", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*model.EventEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEventsByBlockHeight indicates an expected call of GetEventsByBlockHeight.
func (mr *MockMetaStorageMockRecorder) GetEventsByBlockHeight(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventsByBlockHeight", reflect.TypeOf((*MockMetaStorage)(nil).GetEventsByBlockHeight), arg0, arg1, arg2)
}

// GetEventsByEventIdRange mocks base method.
func (m *MockMetaStorage) GetEventsByEventIdRange(arg0 context.Context, arg1 uint32, arg2, arg3 int64) ([]*model.EventEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEventsByEventIdRange", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*model.EventEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEventsByEventIdRange indicates an expected call of GetEventsByEventIdRange.
func (mr *MockMetaStorageMockRecorder) GetEventsByEventIdRange(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventsByEventIdRange", reflect.TypeOf((*MockMetaStorage)(nil).GetEventsByEventIdRange), arg0, arg1, arg2, arg3)
}

// GetFirstEventIdByBlockHeight mocks base method.
func (m *MockMetaStorage) GetFirstEventIdByBlockHeight(arg0 context.Context, arg1 uint32, arg2 uint64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFirstEventIdByBlockHeight", arg0, arg1, arg2)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFirstEventIdByBlockHeight indicates an expected call of GetFirstEventIdByBlockHeight.
func (mr *MockMetaStorageMockRecorder) GetFirstEventIdByBlockHeight(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFirstEventIdByBlockHeight", reflect.TypeOf((*MockMetaStorage)(nil).GetFirstEventIdByBlockHeight), arg0, arg1, arg2)
}

// GetLatestBlock mocks base method.
func (m *MockMetaStorage) GetLatestBlock(arg0 context.Context, arg1 uint32) (*chainstorage.BlockMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestBlock", arg0, arg1)
	ret0, _ := ret[0].(*chainstorage.BlockMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestBlock indicates an expected call of GetLatestBlock.
func (mr *MockMetaStorageMockRecorder) GetLatestBlock(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestBlock", reflect.TypeOf((*MockMetaStorage)(nil).GetLatestBlock), arg0, arg1)
}

// GetMaxEventId mocks base method.
func (m *MockMetaStorage) GetMaxEventId(arg0 context.Context, arg1 uint32) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMaxEventId", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMaxEventId indicates an expected call of GetMaxEventId.
func (mr *MockMetaStorageMockRecorder) GetMaxEventId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMaxEventId", reflect.TypeOf((*MockMetaStorage)(nil).GetMaxEventId), arg0, arg1)
}

// PersistBlockMetas mocks base method.
func (m *MockMetaStorage) PersistBlockMetas(arg0 context.Context, arg1 bool, arg2 []*chainstorage.BlockMetadata, arg3 *chainstorage.BlockMetadata) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PersistBlockMetas", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// PersistBlockMetas indicates an expected call of PersistBlockMetas.
func (mr *MockMetaStorageMockRecorder) PersistBlockMetas(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PersistBlockMetas", reflect.TypeOf((*MockMetaStorage)(nil).PersistBlockMetas), arg0, arg1, arg2, arg3)
}

// SetMaxEventId mocks base method.
func (m *MockMetaStorage) SetMaxEventId(arg0 context.Context, arg1 uint32, arg2 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetMaxEventId", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetMaxEventId indicates an expected call of SetMaxEventId.
func (mr *MockMetaStorageMockRecorder) SetMaxEventId(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMaxEventId", reflect.TypeOf((*MockMetaStorage)(nil).SetMaxEventId), arg0, arg1, arg2)
}

// MockEventStorage is a mock of EventStorage interface.
type MockEventStorage struct {
	ctrl     *gomock.Controller
	recorder *MockEventStorageMockRecorder
}

// MockEventStorageMockRecorder is the mock recorder for MockEventStorage.
type MockEventStorageMockRecorder struct {
	mock *MockEventStorage
}

// NewMockEventStorage creates a new mock instance.
func NewMockEventStorage(ctrl *gomock.Controller) *MockEventStorage {
	mock := &MockEventStorage{ctrl: ctrl}
	mock.recorder = &MockEventStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventStorage) EXPECT() *MockEventStorageMockRecorder {
	return m.recorder
}

// AddEvents mocks base method.
func (m *MockEventStorage) AddEvents(arg0 context.Context, arg1 uint32, arg2 []*model.BlockEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddEvents", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddEvents indicates an expected call of AddEvents.
func (mr *MockEventStorageMockRecorder) AddEvents(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEvents", reflect.TypeOf((*MockEventStorage)(nil).AddEvents), arg0, arg1, arg2)
}

// GetEventByEventId mocks base method.
func (m *MockEventStorage) GetEventByEventId(arg0 context.Context, arg1 uint32, arg2 int64) (*model.EventEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEventByEventId", arg0, arg1, arg2)
	ret0, _ := ret[0].(*model.EventEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEventByEventId indicates an expected call of GetEventByEventId.
func (mr *MockEventStorageMockRecorder) GetEventByEventId(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventByEventId", reflect.TypeOf((*MockEventStorage)(nil).GetEventByEventId), arg0, arg1, arg2)
}

// GetEventsAfterEventId mocks base method.
func (m *MockEventStorage) GetEventsAfterEventId(arg0 context.Context, arg1 uint32, arg2 int64, arg3 uint64) ([]*model.EventEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEventsAfterEventId", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*model.EventEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEventsAfterEventId indicates an expected call of GetEventsAfterEventId.
func (mr *MockEventStorageMockRecorder) GetEventsAfterEventId(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventsAfterEventId", reflect.TypeOf((*MockEventStorage)(nil).GetEventsAfterEventId), arg0, arg1, arg2, arg3)
}

// GetEventsByBlockHeight mocks base method.
func (m *MockEventStorage) GetEventsByBlockHeight(arg0 context.Context, arg1 uint32, arg2 uint64) ([]*model.EventEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEventsByBlockHeight", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*model.EventEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEventsByBlockHeight indicates an expected call of GetEventsByBlockHeight.
func (mr *MockEventStorageMockRecorder) GetEventsByBlockHeight(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventsByBlockHeight", reflect.TypeOf((*MockEventStorage)(nil).GetEventsByBlockHeight), arg0, arg1, arg2)
}

// GetEventsByEventIdRange mocks base method.
func (m *MockEventStorage) GetEventsByEventIdRange(arg0 context.Context, arg1 uint32, arg2, arg3 int64) ([]*model.EventEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEventsByEventIdRange", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*model.EventEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEventsByEventIdRange indicates an expected call of GetEventsByEventIdRange.
func (mr *MockEventStorageMockRecorder) GetEventsByEventIdRange(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventsByEventIdRange", reflect.TypeOf((*MockEventStorage)(nil).GetEventsByEventIdRange), arg0, arg1, arg2, arg3)
}

// GetFirstEventIdByBlockHeight mocks base method.
func (m *MockEventStorage) GetFirstEventIdByBlockHeight(arg0 context.Context, arg1 uint32, arg2 uint64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFirstEventIdByBlockHeight", arg0, arg1, arg2)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFirstEventIdByBlockHeight indicates an expected call of GetFirstEventIdByBlockHeight.
func (mr *MockEventStorageMockRecorder) GetFirstEventIdByBlockHeight(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFirstEventIdByBlockHeight", reflect.TypeOf((*MockEventStorage)(nil).GetFirstEventIdByBlockHeight), arg0, arg1, arg2)
}

// GetMaxEventId mocks base method.
func (m *MockEventStorage) GetMaxEventId(arg0 context.Context, arg1 uint32) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMaxEventId", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMaxEventId indicates an expected call of GetMaxEventId.
func (mr *MockEventStorageMockRecorder) GetMaxEventId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMaxEventId", reflect.TypeOf((*MockEventStorage)(nil).GetMaxEventId), arg0, arg1)
}

// SetMaxEventId mocks base method.
func (m *MockEventStorage) SetMaxEventId(arg0 context.Context, arg1 uint32, arg2 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetMaxEventId", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetMaxEventId indicates an expected call of SetMaxEventId.
func (mr *MockEventStorageMockRecorder) SetMaxEventId(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMaxEventId", reflect.TypeOf((*MockEventStorage)(nil).SetMaxEventId), arg0, arg1, arg2)
}

// MockBlockStorage is a mock of BlockStorage interface.
type MockBlockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockBlockStorageMockRecorder
}

// MockBlockStorageMockRecorder is the mock recorder for MockBlockStorage.
type MockBlockStorageMockRecorder struct {
	mock *MockBlockStorage
}

// NewMockBlockStorage creates a new mock instance.
func NewMockBlockStorage(ctrl *gomock.Controller) *MockBlockStorage {
	mock := &MockBlockStorage{ctrl: ctrl}
	mock.recorder = &MockBlockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBlockStorage) EXPECT() *MockBlockStorageMockRecorder {
	return m.recorder
}

// GetBlockByHash mocks base method.
func (m *MockBlockStorage) GetBlockByHash(arg0 context.Context, arg1 uint32, arg2 uint64, arg3 string) (*chainstorage.BlockMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockByHash", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*chainstorage.BlockMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockByHash indicates an expected call of GetBlockByHash.
func (mr *MockBlockStorageMockRecorder) GetBlockByHash(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockByHash", reflect.TypeOf((*MockBlockStorage)(nil).GetBlockByHash), arg0, arg1, arg2, arg3)
}

// GetBlockByHeight mocks base method.
func (m *MockBlockStorage) GetBlockByHeight(arg0 context.Context, arg1 uint32, arg2 uint64) (*chainstorage.BlockMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockByHeight", arg0, arg1, arg2)
	ret0, _ := ret[0].(*chainstorage.BlockMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockByHeight indicates an expected call of GetBlockByHeight.
func (mr *MockBlockStorageMockRecorder) GetBlockByHeight(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockByHeight", reflect.TypeOf((*MockBlockStorage)(nil).GetBlockByHeight), arg0, arg1, arg2)
}

// GetBlocksByHeightRange mocks base method.
func (m *MockBlockStorage) GetBlocksByHeightRange(arg0 context.Context, arg1 uint32, arg2, arg3 uint64) ([]*chainstorage.BlockMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlocksByHeightRange", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*chainstorage.BlockMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlocksByHeightRange indicates an expected call of GetBlocksByHeightRange.
func (mr *MockBlockStorageMockRecorder) GetBlocksByHeightRange(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlocksByHeightRange", reflect.TypeOf((*MockBlockStorage)(nil).GetBlocksByHeightRange), arg0, arg1, arg2, arg3)
}

// GetLatestBlock mocks base method.
func (m *MockBlockStorage) GetLatestBlock(arg0 context.Context, arg1 uint32) (*chainstorage.BlockMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestBlock", arg0, arg1)
	ret0, _ := ret[0].(*chainstorage.BlockMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestBlock indicates an expected call of GetLatestBlock.
func (mr *MockBlockStorageMockRecorder) GetLatestBlock(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestBlock", reflect.TypeOf((*MockBlockStorage)(nil).GetLatestBlock), arg0, arg1)
}

// PersistBlockMetas mocks base method.
func (m *MockBlockStorage) PersistBlockMetas(arg0 context.Context, arg1 bool, arg2 []*chainstorage.BlockMetadata, arg3 *chainstorage.BlockMetadata) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PersistBlockMetas", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// PersistBlockMetas indicates an expected call of PersistBlockMetas.
func (mr *MockBlockStorageMockRecorder) PersistBlockMetas(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PersistBlockMetas", reflect.TypeOf((*MockBlockStorage)(nil).PersistBlockMetas), arg0, arg1, arg2, arg3)
}
