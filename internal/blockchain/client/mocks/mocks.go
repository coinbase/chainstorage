// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coinbase/chainstorage/internal/blockchain/client (interfaces: Client)

// Package clientmocks is a generated GoMock package.
package clientmocks

import (
	context "context"
	reflect "reflect"

	client "github.com/coinbase/chainstorage/internal/blockchain/client"
	chainstorage "github.com/coinbase/chainstorage/protos/coinbase/chainstorage"
	gomock "github.com/golang/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// BatchGetBlockMetadata mocks base method.
func (m *MockClient) BatchGetBlockMetadata(arg0 context.Context, arg1 uint32, arg2, arg3 uint64) ([]*chainstorage.BlockMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetBlockMetadata", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*chainstorage.BlockMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetBlockMetadata indicates an expected call of BatchGetBlockMetadata.
func (mr *MockClientMockRecorder) BatchGetBlockMetadata(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetBlockMetadata", reflect.TypeOf((*MockClient)(nil).BatchGetBlockMetadata), arg0, arg1, arg2, arg3)
}

// CanReprocess mocks base method.
func (m *MockClient) CanReprocess(arg0 uint32, arg1 uint64) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CanReprocess", arg0, arg1)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CanReprocess indicates an expected call of CanReprocess.
func (mr *MockClientMockRecorder) CanReprocess(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CanReprocess", reflect.TypeOf((*MockClient)(nil).CanReprocess), arg0, arg1)
}

// GetBlockByHash mocks base method.
func (m *MockClient) GetBlockByHash(arg0 context.Context, arg1 uint32, arg2 uint64, arg3 string, arg4 ...client.ClientOption) (*chainstorage.Block, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2, arg3}
	for _, a := range arg4 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBlockByHash", varargs...)
	ret0, _ := ret[0].(*chainstorage.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockByHash indicates an expected call of GetBlockByHash.
func (mr *MockClientMockRecorder) GetBlockByHash(arg0, arg1, arg2, arg3 interface{}, arg4 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2, arg3}, arg4...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockByHash", reflect.TypeOf((*MockClient)(nil).GetBlockByHash), varargs...)
}

// GetBlockByHeight mocks base method.
func (m *MockClient) GetBlockByHeight(arg0 context.Context, arg1 uint32, arg2 uint64, arg3 ...client.ClientOption) (*chainstorage.Block, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBlockByHeight", varargs...)
	ret0, _ := ret[0].(*chainstorage.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockByHeight indicates an expected call of GetBlockByHeight.
func (mr *MockClientMockRecorder) GetBlockByHeight(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockByHeight", reflect.TypeOf((*MockClient)(nil).GetBlockByHeight), varargs...)
}

// GetLatestHeight mocks base method.
func (m *MockClient) GetLatestHeight(arg0 context.Context) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestHeight", arg0)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestHeight indicates an expected call of GetLatestHeight.
func (mr *MockClientMockRecorder) GetLatestHeight(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestHeight", reflect.TypeOf((*MockClient)(nil).GetLatestHeight), arg0)
}

// UpgradeBlock mocks base method.
func (m *MockClient) UpgradeBlock(arg0 context.Context, arg1 *chainstorage.Block, arg2 uint32) (*chainstorage.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpgradeBlock", arg0, arg1, arg2)
	ret0, _ := ret[0].(*chainstorage.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpgradeBlock indicates an expected call of UpgradeBlock.
func (mr *MockClientMockRecorder) UpgradeBlock(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpgradeBlock", reflect.TypeOf((*MockClient)(nil).UpgradeBlock), arg0, arg1, arg2)
}
