// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coinbase/chainstorage/internal/dlq (interfaces: DLQ)
//
// Generated by this command:
//
//	mockgen -destination internal/dlq/mocks/mocks.go -package dlqmocks github.com/coinbase/chainstorage/internal/dlq DLQ
//
// Package dlqmocks is a generated GoMock package.
package dlqmocks

import (
	context "context"
	reflect "reflect"

	internal "github.com/coinbase/chainstorage/internal/dlq/internal"
	gomock "go.uber.org/mock/gomock"
)

// MockDLQ is a mock of DLQ interface.
type MockDLQ struct {
	ctrl     *gomock.Controller
	recorder *MockDLQMockRecorder
}

// MockDLQMockRecorder is the mock recorder for MockDLQ.
type MockDLQMockRecorder struct {
	mock *MockDLQ
}

// NewMockDLQ creates a new mock instance.
func NewMockDLQ(ctrl *gomock.Controller) *MockDLQ {
	mock := &MockDLQ{ctrl: ctrl}
	mock.recorder = &MockDLQMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDLQ) EXPECT() *MockDLQMockRecorder {
	return m.recorder
}

// DeleteMessage mocks base method.
func (m *MockDLQ) DeleteMessage(arg0 context.Context, arg1 *internal.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMessage", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMessage indicates an expected call of DeleteMessage.
func (mr *MockDLQMockRecorder) DeleteMessage(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMessage", reflect.TypeOf((*MockDLQ)(nil).DeleteMessage), arg0, arg1)
}

// ReceiveMessage mocks base method.
func (m *MockDLQ) ReceiveMessage(arg0 context.Context) (*internal.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReceiveMessage", arg0)
	ret0, _ := ret[0].(*internal.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReceiveMessage indicates an expected call of ReceiveMessage.
func (mr *MockDLQMockRecorder) ReceiveMessage(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReceiveMessage", reflect.TypeOf((*MockDLQ)(nil).ReceiveMessage), arg0)
}

// ResendMessage mocks base method.
func (m *MockDLQ) ResendMessage(arg0 context.Context, arg1 *internal.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResendMessage", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResendMessage indicates an expected call of ResendMessage.
func (mr *MockDLQMockRecorder) ResendMessage(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResendMessage", reflect.TypeOf((*MockDLQ)(nil).ResendMessage), arg0, arg1)
}

// SendMessage mocks base method.
func (m *MockDLQ) SendMessage(arg0 context.Context, arg1 *internal.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMessage", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMessage indicates an expected call of SendMessage.
func (mr *MockDLQMockRecorder) SendMessage(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessage", reflect.TypeOf((*MockDLQ)(nil).SendMessage), arg0, arg1)
}
